"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('dummy/adapters/application', ['exports', 'ember-flexberry-data', 'dummy/config/environment'], function (exports, _emberFlexberryData, _dummyConfigEnvironment) {
  exports['default'] = _emberFlexberryData.Adapter.Odata.extend(_emberFlexberryData.Projection.AdapterMixin, {
    host: _dummyConfigEnvironment['default'].APP.backendUrls.api,

    /**
    */
    ajax: function ajax(url, type, options) {
      options.xhrFields = { withCredentials: true };
      return this._super(url, type, options);
    }
  });
});
define('dummy/adapters/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/adapters/new-platform-flexberry-services-lock', 'dummy/config/environment'], function (exports, _emberFlexberryAdaptersNewPlatformFlexberryServicesLock, _dummyConfigEnvironment) {
  exports['default'] = _emberFlexberryAdaptersNewPlatformFlexberryServicesLock['default'].extend({
    /**
      @property host
      @type String
    */
    host: _dummyConfigEnvironment['default'].APP.backendUrls.api
  });
});
define('dummy/adapters/odata', ['exports', 'ember-flexberry-data/adapters/odata'], function (exports, _emberFlexberryDataAdaptersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOdata['default'];
    }
  });
});
define('dummy/adapters/offline', ['exports', 'ember-flexberry-data/adapters/offline'], function (exports, _emberFlexberryDataAdaptersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOffline['default'];
    }
  });
});
define('dummy/app', ['exports', 'ember', 'dummy/resolver', 'ember-load-initializers', 'dummy/config/environment', 'dummy/models/custom-inflector-rules'], function (exports, _ember, _dummyResolver, _emberLoadInitializers, _dummyConfigEnvironment, _dummyModelsCustomInflectorRules) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix,
    Resolver: _dummyResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _dummyConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('dummy/browserify', ['exports', 'npm:dexie', 'npm:node-uuid'], function (exports, _npmDexie, _npmNodeUuid) {});
// Requirement of ember-browserify.
// In order to use NPM pacakges inside the addon, we have to import
// them from somewhere in /app directory.
// See: https://github.com/ef4/ember-browserify#using-ember-browserify-in-addons
define('dummy/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'dummy/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _dummyConfigEnvironment) {

  var name = _dummyConfigEnvironment['default'].APP.name;
  var version = _dummyConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('dummy/components/colsconfig-dialog-content', ['exports', 'ember-flexberry/components/colsconfig-dialog-content'], function (exports, _emberFlexberryComponentsColsconfigDialogContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsColsconfigDialogContent['default'];
    }
  });
});
define('dummy/components/flexberry-checkbox', ['exports', 'ember-flexberry/components/flexberry-checkbox'], function (exports, _emberFlexberryComponentsFlexberryCheckbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryCheckbox['default'];
});
define('dummy/components/flexberry-datepicker', ['exports', 'ember-flexberry/components/flexberry-datepicker'], function (exports, _emberFlexberryComponentsFlexberryDatepicker) {
  exports['default'] = _emberFlexberryComponentsFlexberryDatepicker['default'];
});
define('dummy/components/flexberry-dropdown', ['exports', 'ember-flexberry/components/flexberry-dropdown'], function (exports, _emberFlexberryComponentsFlexberryDropdown) {
  exports['default'] = _emberFlexberryComponentsFlexberryDropdown['default'];
});
define('dummy/components/flexberry-field', ['exports', 'ember-flexberry/components/flexberry-field'], function (exports, _emberFlexberryComponentsFlexberryField) {
  exports['default'] = _emberFlexberryComponentsFlexberryField['default'];
});
define('dummy/components/flexberry-file', ['exports', 'ember-flexberry/components/flexberry-file'], function (exports, _emberFlexberryComponentsFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsFlexberryFile['default'];
});
define('dummy/components/flexberry-groupedit', ['exports', 'ember-flexberry/components/flexberry-groupedit'], function (exports, _emberFlexberryComponentsFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsFlexberryGroupedit['default'];
});
define('dummy/components/flexberry-lookup', ['exports', 'ember-flexberry/components/flexberry-lookup'], function (exports, _emberFlexberryComponentsFlexberryLookup) {
  exports['default'] = _emberFlexberryComponentsFlexberryLookup['default'];
});
define('dummy/components/flexberry-menu', ['exports', 'ember-flexberry/components/flexberry-menu'], function (exports, _emberFlexberryComponentsFlexberryMenu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenu['default'];
    }
  });
});
define('dummy/components/flexberry-menuitem', ['exports', 'ember-flexberry/components/flexberry-menuitem'], function (exports, _emberFlexberryComponentsFlexberryMenuitem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenuitem['default'];
    }
  });
});
define('dummy/components/flexberry-objectlistview', ['exports', 'ember-flexberry/components/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsFlexberryObjectlistview['default'];
});
define('dummy/components/flexberry-simpledatetime', ['exports', 'ember-flexberry/components/flexberry-simpledatetime'], function (exports, _emberFlexberryComponentsFlexberrySimpledatetime) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberrySimpledatetime['default'];
    }
  });
});
define('dummy/components/flexberry-textarea', ['exports', 'ember-flexberry/components/flexberry-textarea'], function (exports, _emberFlexberryComponentsFlexberryTextarea) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextarea['default'];
});
define('dummy/components/flexberry-textbox', ['exports', 'ember-flexberry/components/flexberry-textbox'], function (exports, _emberFlexberryComponentsFlexberryTextbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextbox['default'];
});
define('dummy/components/flexberry-toggler', ['exports', 'ember-flexberry/components/flexberry-toggler'], function (exports, _emberFlexberryComponentsFlexberryToggler) {
  exports['default'] = _emberFlexberryComponentsFlexberryToggler['default'];
});
define('dummy/components/flexberry-validationmessage', ['exports', 'ember-flexberry/components/flexberry-validationmessage'], function (exports, _emberFlexberryComponentsFlexberryValidationmessage) {
  exports['default'] = _emberFlexberryComponentsFlexberryValidationmessage['default'];
});
define('dummy/components/flexberry-validationsummary', ['exports', 'ember-flexberry/components/flexberry-validationsummary'], function (exports, _emberFlexberryComponentsFlexberryValidationsummary) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryValidationsummary['default'];
    }
  });
});
define('dummy/components/groupedit-toolbar', ['exports', 'ember-flexberry/components/groupedit-toolbar'], function (exports, _emberFlexberryComponentsGroupeditToolbar) {
  exports['default'] = _emberFlexberryComponentsGroupeditToolbar['default'];
});
define('dummy/components/mobile/flexberry-file', ['exports', 'ember-flexberry/components/mobile/flexberry-file'], function (exports, _emberFlexberryComponentsMobileFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryFile['default'];
});
define('dummy/components/mobile/flexberry-groupedit', ['exports', 'ember-flexberry/components/mobile/flexberry-groupedit'], function (exports, _emberFlexberryComponentsMobileFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryGroupedit['default'];
});
define('dummy/components/mobile/flexberry-objectlistview', ['exports', 'ember-flexberry/components/mobile/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsMobileFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryObjectlistview['default'];
});
define('dummy/components/mobile/object-list-view-row', ['exports', 'ember-flexberry/components/mobile/object-list-view-row'], function (exports, _emberFlexberryComponentsMobileObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsMobileObjectListViewRow['default'];
});
define('dummy/components/modal-dialog', ['exports', 'ember-flexberry/components/modal-dialog'], function (exports, _emberFlexberryComponentsModalDialog) {
  exports['default'] = _emberFlexberryComponentsModalDialog['default'];
});
define('dummy/components/object-list-view-cell', ['exports', 'ember-flexberry/components/object-list-view-cell'], function (exports, _emberFlexberryComponentsObjectListViewCell) {
  exports['default'] = _emberFlexberryComponentsObjectListViewCell['default'];
});
define('dummy/components/object-list-view-header-cell', ['exports', 'ember-flexberry/components/object-list-view-header-cell'], function (exports, _emberFlexberryComponentsObjectListViewHeaderCell) {
  exports['default'] = _emberFlexberryComponentsObjectListViewHeaderCell['default'];
});
define('dummy/components/object-list-view-row', ['exports', 'ember-flexberry/components/object-list-view-row'], function (exports, _emberFlexberryComponentsObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsObjectListViewRow['default'];
});
define('dummy/components/object-list-view-single-column-cell', ['exports', 'ember-flexberry/components/object-list-view-single-column-cell'], function (exports, _emberFlexberryComponentsObjectListViewSingleColumnCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsObjectListViewSingleColumnCell['default'];
    }
  });
});
define('dummy/components/object-list-view', ['exports', 'ember-flexberry/components/object-list-view'], function (exports, _emberFlexberryComponentsObjectListView) {
  exports['default'] = _emberFlexberryComponentsObjectListView['default'];
});
define('dummy/components/olv-setconfigdialogbutton', ['exports', 'ember-flexberry/components/olv-setconfigdialogbutton'], function (exports, _emberFlexberryComponentsOlvSetconfigdialogbutton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsOlvSetconfigdialogbutton['default'];
    }
  });
});
define('dummy/components/olv-toolbar', ['exports', 'ember-flexberry/components/olv-toolbar'], function (exports, _emberFlexberryComponentsOlvToolbar) {
  exports['default'] = _emberFlexberryComponentsOlvToolbar['default'];
});
define('dummy/components/security-assign', ['exports', 'ember-flexberry-security/components/security-assign'], function (exports, _emberFlexberrySecurityComponentsSecurityAssign) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityComponentsSecurityAssign['default'];
    }
  });
});
define('dummy/components/ui-accordion', ['exports', 'semantic-ui-ember/components/ui-accordion'], function (exports, _semanticUiEmberComponentsUiAccordion) {
  exports['default'] = _semanticUiEmberComponentsUiAccordion['default'];
});
define('dummy/components/ui-checkbox', ['exports', 'semantic-ui-ember/components/ui-checkbox'], function (exports, _semanticUiEmberComponentsUiCheckbox) {
  exports['default'] = _semanticUiEmberComponentsUiCheckbox['default'];
});
define('dummy/components/ui-dropdown-item', ['exports', 'semantic-ui-ember/components/ui-dropdown-item'], function (exports, _semanticUiEmberComponentsUiDropdownItem) {
  exports['default'] = _semanticUiEmberComponentsUiDropdownItem['default'];
});
define('dummy/components/ui-dropdown', ['exports', 'semantic-ui-ember/components/ui-dropdown'], function (exports, _semanticUiEmberComponentsUiDropdown) {
  exports['default'] = _semanticUiEmberComponentsUiDropdown['default'];
});
define('dummy/components/ui-embed', ['exports', 'semantic-ui-ember/components/ui-embed'], function (exports, _semanticUiEmberComponentsUiEmbed) {
  exports['default'] = _semanticUiEmberComponentsUiEmbed['default'];
});
define('dummy/components/ui-message', ['exports', 'ember-flexberry/components/ui-message'], function (exports, _emberFlexberryComponentsUiMessage) {
  exports['default'] = _emberFlexberryComponentsUiMessage['default'];
});
define('dummy/components/ui-modal', ['exports', 'semantic-ui-ember/components/ui-modal'], function (exports, _semanticUiEmberComponentsUiModal) {
  exports['default'] = _semanticUiEmberComponentsUiModal['default'];
});
define('dummy/components/ui-nag', ['exports', 'semantic-ui-ember/components/ui-nag'], function (exports, _semanticUiEmberComponentsUiNag) {
  exports['default'] = _semanticUiEmberComponentsUiNag['default'];
});
define('dummy/components/ui-popup', ['exports', 'semantic-ui-ember/components/ui-popup'], function (exports, _semanticUiEmberComponentsUiPopup) {
  exports['default'] = _semanticUiEmberComponentsUiPopup['default'];
});
define('dummy/components/ui-progress', ['exports', 'semantic-ui-ember/components/ui-progress'], function (exports, _semanticUiEmberComponentsUiProgress) {
  exports['default'] = _semanticUiEmberComponentsUiProgress['default'];
});
define('dummy/components/ui-radio', ['exports', 'semantic-ui-ember/components/ui-radio'], function (exports, _semanticUiEmberComponentsUiRadio) {
  exports['default'] = _semanticUiEmberComponentsUiRadio['default'];
});
define('dummy/components/ui-rating', ['exports', 'semantic-ui-ember/components/ui-rating'], function (exports, _semanticUiEmberComponentsUiRating) {
  exports['default'] = _semanticUiEmberComponentsUiRating['default'];
});
define('dummy/components/ui-search', ['exports', 'semantic-ui-ember/components/ui-search'], function (exports, _semanticUiEmberComponentsUiSearch) {
  exports['default'] = _semanticUiEmberComponentsUiSearch['default'];
});
define('dummy/components/ui-shape', ['exports', 'semantic-ui-ember/components/ui-shape'], function (exports, _semanticUiEmberComponentsUiShape) {
  exports['default'] = _semanticUiEmberComponentsUiShape['default'];
});
define('dummy/components/ui-sidebar', ['exports', 'semantic-ui-ember/components/ui-sidebar'], function (exports, _semanticUiEmberComponentsUiSidebar) {
  exports['default'] = _semanticUiEmberComponentsUiSidebar['default'];
});
define('dummy/components/ui-sticky', ['exports', 'semantic-ui-ember/components/ui-sticky'], function (exports, _semanticUiEmberComponentsUiSticky) {
  exports['default'] = _semanticUiEmberComponentsUiSticky['default'];
});
define('dummy/controllers/application', ['exports', 'ember', 'dummy/config/environment', 'ember-i18n'], function (exports, _ember, _dummyConfigEnvironment, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({

    /**
    */
    login: '',

    /**
    */
    offlineGlobals: _ember['default'].inject.service('offline-globals'),

    /**
    */
    onlineStatus: _ember['default'].computed('offlineGlobals.isOnline', {
      get: function get() {
        return this.get('offlineGlobals.isOnline');
      },
      set: function set(key, newValue, oldValue) {
        if (newValue !== oldValue) {
          this.get('offlineGlobals').setOnlineAvailable(newValue);
        }

        return newValue;
      }
    }),

    /**
    */
    synchronizes: false,

    /**
    */
    sitemap: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');

      return {
        nodes: [{
          link: 'index',
          caption: i18n.t('forms.application.sitemap.index.caption'),
          title: i18n.t('forms.application.sitemap.index.title'),
          children: null
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.audit-forms.caption'),
          title: i18n.t('forms.application.sitemap.audit-forms.title'),
          children: [{
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l',
            caption: i18n.t('forms.application.sitemap.audit-forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.caption'),
            title: i18n.t('forms.application.sitemap.audit-forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.полномочия.caption'),
          title: i18n.t('forms.application.sitemap.полномочия.title'),
          children: [{
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.title'),
            children: null
          }, {
            link: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l',
            caption: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.caption'),
            title: i18n.t('forms.application.sitemap.полномочия.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.application.caption'),
          title: i18n.t('forms.application.sitemap.application.title'),
          children: [{
            link: 'ember-flexberry-dummy-application-user-list',
            caption: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-application-user-list.caption'),
            title: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-application-user-list.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-localization-list',
            caption: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-localization-list.caption'),
            title: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-localization-list.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-list',
            caption: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-suggestion-list.caption'),
            title: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-suggestion-list.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-type-list',
            caption: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-suggestion-type-list.caption'),
            title: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-suggestion-type-list.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-test-poly-child-list',
            caption: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-test-poly-child-list.caption'),
            title: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-test-poly-child-list.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-test-poly-list',
            caption: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-test-poly-list.caption'),
            title: i18n.t('forms.application.sitemap.application.ember-flexberry-dummy-test-poly-list.title'),
            children: null
          }]
        }]
      };
    }),

    actions: {
      /**
      */
      toggleSidebar: function toggleSidebar() {
        _ember['default'].$('.ui.sidebar').sidebar('toggle');
      },

      /**
      */
      syncUp: function syncUp() {
        var _this = this;
        _this.set('synchronizes', true);
        var syncer = _ember['default'].getOwner(this).lookup('service:syncer');
        syncer.syncUp().then(function () {
          _this.set('synchronizes', false);
        })['catch'](function (reason) {
          _ember['default'].Logger.debug(reason);
        });
      },

      /**
      */
      login: function login() {
        var _this = this;
        var login = _this.get('loginInput');
        var password = _this.get('password');
        if (login && password) {
          _this._resetLoginErrors();
          _this.set('tryToLogin', true);
          _ember['default'].$.ajax({
            type: 'GET',
            xhrFields: { withCredentials: true },
            url: _dummyConfigEnvironment['default'].APP.backendUrls.api + '/Login(login=\'' + login + '\',password=\'' + password + '\')',
            success: function success(result) {
              _this.set('tryToLogin', false);
              if (result.value === true) {
                _this._resetLoginData(login);
                _this.transitionToRoute('index');
              } else {
                _this.set('errorMessage', (0, _emberI18n.translationMacro)('forms.login.errors.incorrect-auth-data'));
              }
            },
            error: function error() {
              _this.set('tryToLogin', false);
              _this.set('errorMessage', (0, _emberI18n.translationMacro)('forms.login.errors.server-error'));
            }
          });
        } else {
          if (!login) {
            _this.set('emptyLogin', (0, _emberI18n.translationMacro)('forms.login.errors.empty-login'));
          }

          if (!password) {
            _this.set('emptyPassword', (0, _emberI18n.translationMacro)('forms.login.errors.empty-password'));
          }
        }
      },

      /**
      */
      logout: function logout() {
        var _this = this;
        _ember['default'].$.ajax({
          type: 'GET',
          xhrFields: { withCredentials: true },
          url: _dummyConfigEnvironment['default'].APP.backendUrls.api + '/Logout()',
          success: function success(result) {
            if (result.value === true) {
              _this.set('login', '');
            } else {
              _this.set('errorMessage', (0, _emberI18n.translationMacro)('forms.login.errors.unknown-error'));
            }

            _this.transitionToRoute('index');
          },
          error: function error() {
            _this.set('errorMessage', (0, _emberI18n.translationMacro)('forms.login.errors.server-error'));
            _this.transitionToRoute('index');
          }
        });
      },

      /**
      */
      goToLoginForm: function goToLoginForm() {
        this.transitionToRoute('login');
      },

      /**
      */
      closeLoginForm: function closeLoginForm() {
        this._resetLoginErrors();
        this.transitionToRoute('index');
      }
    },

    /**
    */
    _resetLoginErrors: function _resetLoginErrors() {
      this.setProperties({
        errorMessage: null,
        emptyLogin: null,
        emptyPassword: null
      });
    },

    /**
    */
    _resetLoginData: function _resetLoginData(login) {
      this.setProperties({
        login: login,
        loginInput: null,
        password: null
      });
    }
  });
});
define('dummy/controllers/colsconfig-dialog', ['exports', 'ember-flexberry/controllers/colsconfig-dialog'], function (exports, _emberFlexberryControllersColsconfigDialog) {
  exports['default'] = _emberFlexberryControllersColsconfigDialog['default'];
});
define('dummy/controllers/detail-edit-form', ['exports', 'ember-flexberry/controllers/detail-edit-form'], function (exports, _emberFlexberryControllersDetailEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersDetailEditForm['default'];
    }
  });
});
define('dummy/controllers/edit-form', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersEditForm['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    parentRoute: 'ember-flexberry-dummy-application-user-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-application-user-edit'], function (exports, _dummyControllersEmberFlexberryDummyApplicationUserEdit) {

  var EmberFlexberryDummyApplicationUserEditNewController = _dummyControllersEmberFlexberryDummyApplicationUserEdit['default'];
  exports['default'] = EmberFlexberryDummyApplicationUserEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-application-user-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-application-user-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    getCellComponent: function getCellComponent(attr, bindingPath) {
      if (attr.kind === 'belongsTo') {
        switch (bindingPath) {
          case 'applicationUser':
            return {
              componentName: 'flexberry-lookup',
              componentProperties: {
                choose: 'showLookupDialog',
                chooseText: '...',
                remove: 'removeLookupValue',
                displayAttributeName: 'name',
                required: true,
                relationName: 'applicationUser',
                projection: 'ApplicationUserL',
                autocomplete: true
              }
            };

        }
      }

      return this._super.apply(this, arguments);
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-comment-edit'], function (exports, _dummyControllersEmberFlexberryDummyCommentEdit) {

  var EmberFlexberryDummyCommentEditNewController = _dummyControllersEmberFlexberryDummyCommentEdit['default'];
  exports['default'] = EmberFlexberryDummyCommentEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-localization-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    parentRoute: 'ember-flexberry-dummy-localization-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-localization-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-localization-edit'], function (exports, _dummyControllersEmberFlexberryDummyLocalizationEdit) {

  var EmberFlexberryDummyLocalizationEditNewController = _dummyControllersEmberFlexberryDummyLocalizationEdit['default'];
  exports['default'] = EmberFlexberryDummyLocalizationEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-localization-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-localization-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-localization-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    parentRoute: 'ember-flexberry-dummy-suggestion-list',
    getCellComponent: function getCellComponent(attr, bindingPath) {
      if (attr.kind === 'belongsTo') {
        switch (bindingPath) {
          case 'applicationUser':
            return {
              componentName: 'flexberry-lookup',
              componentProperties: {
                choose: 'showLookupDialog',
                chooseText: '...',
                remove: 'removeLookupValue',
                displayAttributeName: 'name',
                required: true,
                relationName: 'applicationUser',
                projection: 'ApplicationUserL',
                autocomplete: true
              }
            };

          case 'author':
            return {
              componentName: 'flexberry-lookup',
              componentProperties: {
                choose: 'showLookupDialog',
                chooseText: '...',
                remove: 'removeLookupValue',
                displayAttributeName: 'name',
                required: true,
                relationName: 'author',
                projection: 'ApplicationUserL',
                autocomplete: true
              }
            };

        }
      }

      return this._super.apply(this, arguments);
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionEdit) {

  var EmberFlexberryDummySuggestionEditNewController = _dummyControllersEmberFlexberryDummySuggestionEdit['default'];
  exports['default'] = EmberFlexberryDummySuggestionEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    parentRoute: 'ember-flexberry-dummy-suggestion-type-list',
    getCellComponent: function getCellComponent(attr, bindingPath) {
      if (attr.kind === 'belongsTo') {
        switch (bindingPath) {
          case 'localization':
            return {
              componentName: 'flexberry-lookup',
              componentProperties: {
                choose: 'showLookupDialog',
                chooseText: '...',
                remove: 'removeLookupValue',
                displayAttributeName: 'name',
                required: true,
                relationName: 'localization',
                projection: 'LocalizationL',
                autocomplete: true
              }
            };

        }
      }

      return this._super.apply(this, arguments);
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-type-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionTypeEdit) {

  var EmberFlexberryDummySuggestionTypeEditNewController = _dummyControllersEmberFlexberryDummySuggestionTypeEdit['default'];
  exports['default'] = EmberFlexberryDummySuggestionTypeEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-test-poly-child-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    parentRoute: 'ember-flexberry-dummy-test-poly-child-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-test-poly-child-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-test-poly-child-edit'], function (exports, _dummyControllersEmberFlexberryDummyTestPolyChildEdit) {

  var EmberFlexberryDummyTestPolyChildEditNewController = _dummyControllersEmberFlexberryDummyTestPolyChildEdit['default'];
  exports['default'] = EmberFlexberryDummyTestPolyChildEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-test-poly-child-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-test-poly-child-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-test-poly-child-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-test-poly-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-security/mixins/show-audit-action-controller'], function (exports, _emberFlexberryControllersEditForm, _emberFlexberrySecurityMixinsShowAuditActionController) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_emberFlexberrySecurityMixinsShowAuditActionController['default'], {
    // Caption of this particular edit form.

    parentRoute: 'ember-flexberry-dummy-test-poly-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-test-poly-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-test-poly-edit'], function (exports, _dummyControllersEmberFlexberryDummyTestPolyEdit) {

  var EmberFlexberryDummyTestPolyEditNewController = _dummyControllersEmberFlexberryDummyTestPolyEdit['default'];
  exports['default'] = EmberFlexberryDummyTestPolyEditNewController;
});
define('dummy/controllers/ember-flexberry-dummy-test-poly-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-test-poly-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-test-poly-edit'
  });
});
define('dummy/controllers/flexberry-file-view-dialog', ['exports', 'ember-flexberry/controllers/flexberry-file-view-dialog'], function (exports, _emberFlexberryControllersFlexberryFileViewDialog) {
  exports['default'] = _emberFlexberryControllersFlexberryFileViewDialog['default'];
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETBusinessAuditObjectsAuditEntityE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETBusinessAuditObjectsAuditEntityE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETBusinessAuditObjectsAuditEntityL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETBusinessAuditObjectsAuditEntityL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityAccessE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityAccessE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityAccessENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityAccessENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityAccessL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityAccessL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityClassE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityClassE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityClassENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityClassENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityClassL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityClassL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityGroupE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityGroupE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityGroupENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityGroupENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityGroupL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityGroupL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkGroupE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkGroupE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkGroupENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkGroupENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkGroupL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkGroupL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkRoleE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkRoleE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkRoleENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkRoleENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkRoleL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityLinkRoleL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityOperationE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityOperationE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityOperationENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityOperationENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityOperationL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityOperationL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityPermitionE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityPermitionE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityPermitionENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityPermitionENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityPermitionL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityPermitionL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityRoleE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityRoleE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityRoleENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityRoleENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityRoleL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityRoleL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityUserE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityUserE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityUserENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityUserENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityUserL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityUserL['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityViewE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityViewE['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityViewENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityViewENew['default'];
    }
  });
});
define('dummy/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l', ['exports', 'ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l'], function (exports, _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityViewL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityControllersICSSoftSTORMNETSecurityViewL['default'];
    }
  });
});
define('dummy/controllers/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('dummy/controllers/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('dummy/controllers/list-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersListForm['default'];
    }
  });
});
define('dummy/controllers/lookup-dialog', ['exports', 'ember-flexberry/controllers/lookup-dialog'], function (exports, _emberFlexberryControllersLookupDialog) {
  exports['default'] = _emberFlexberryControllersLookupDialog['default'];
});
define('dummy/controllers/new-platform-flexberry-services-lock-edit', ['exports', 'ember-flexberry/controllers/new-platform-flexberry-services-lock-edit'], function (exports, _emberFlexberryControllersNewPlatformFlexberryServicesLockEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersNewPlatformFlexberryServicesLockEdit['default'];
    }
  });
});
define('dummy/controllers/new-platform-flexberry-services-lock-list', ['exports', 'ember-flexberry/controllers/new-platform-flexberry-services-lock-list'], function (exports, _emberFlexberryControllersNewPlatformFlexberryServicesLockList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersNewPlatformFlexberryServicesLockList['default'];
    }
  });
});
define('dummy/controllers/sitemap-node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      hideSidebar: function hideSidebar() {
        _ember['default'].$('.ui.sidebar').sidebar('hide');
      }
    }
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/components/security-assign.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/components');
  test('modules/ember-flexberry-security/components/security-assign.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/components/security-assign.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/components/security-assign.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/components/security-assign.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/components/security-assign.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/controllers');
  test('modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/controllers/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/enums');
  test('modules/ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/forms');
  test('modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en/models');
  test('modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/translations.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/en');
  test('modules/ember-flexberry-security/locales/en/translations.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/en/translations.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/en/translations.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/en/translations.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/en/translations.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/forms');
  test('modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/forms/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru/models');
  test('modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/translations.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/locales/ru');
  test('modules/ember-flexberry-security/locales/ru/translations.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/locales/ru/translations.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/locales/ru/translations.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/locales/ru/translations.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/locales/ru/translations.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/offline-schema.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/offline-schema.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/offline-schema.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/offline-schema.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/offline-schema.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/offline-schema.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/models');
  test('modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins/regenerated/serializers');
  test('modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/regenerated/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-class-e-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-class-e-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-class-e-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-class-e-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-class-e-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-class-e-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-classes-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-get-agent-classes-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-classes-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-classes-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-get-agent-classes-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-classes-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-groups-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-get-agent-groups-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-groups-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-groups-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-get-agent-groups-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-groups-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-operations-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-get-agent-operations-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-operations-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-operations-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-get-agent-operations-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-operations-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-roles-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-get-agent-roles-route.js should pass jscs', function () {
    ok(false, 'modules/ember-flexberry-security/mixins/security-get-agent-roles-route.js should pass jscs.\nLine comments must be preceded with a blank line at modules/ember-flexberry-security/mixins/security-get-agent-roles-route.js :\n    25 |\n    26 |      let isRolePredicate = new SimplePredicate(\'isRole\', FilterOperator.Eq, true);\n    27 |      let enabledPredicate = new SimplePredicate(\'enabled\', FilterOperator.Eq, true);\n---------------------------------------------------------------------------------------------^\n    28 |      // TODO: filter \'not model.id\', \'not All users\'.\n    29 |      let predicate = new ComplexPredicate(Condition.And, isRolePredicate, enabledPredicate);');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-roles-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-get-agent-roles-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-roles-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-users-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-get-agent-users-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-users-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-get-agent-users-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-get-agent-users-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-get-agent-users-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-group-e-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-group-e-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-group-e-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-group-e-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-group-e-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-group-e-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-operation-e-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-operation-e-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-operation-e-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-operation-e-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-operation-e-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-operation-e-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-role-e-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-role-e-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-role-e-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-role-e-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-role-e-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-role-e-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-role-e-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-role-e-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-role-e-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-role-e-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-role-e-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-role-e-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-user-e-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-user-e-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-user-e-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-user-e-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-user-e-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-user-e-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-user-e-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/security-user-e-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/security-user-e-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/security-user-e-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/security-user-e-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/security-user-e-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/show-audit-action-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/mixins');
  test('modules/ember-flexberry-security/mixins/show-audit-action-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/mixins/show-audit-action-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/mixins/show-audit-action-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/mixins/show-audit-action-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/mixins/show-audit-action-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/base.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/base.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/base.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/base.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/base.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/base.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/models');
  test('modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/objects/security-assign-data-cell.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/objects');
  test('modules/ember-flexberry-security/objects/security-assign-data-cell.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/objects/security-assign-data-cell.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/objects/security-assign-data-cell.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/objects/security-assign-data-cell.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/objects/security-assign-data-cell.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/objects/security-assign-data-row.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/objects');
  test('modules/ember-flexberry-security/objects/security-assign-data-row.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/objects/security-assign-data-row.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/objects/security-assign-data-row.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/objects/security-assign-data-row.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/objects/security-assign-data-row.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/objects/security-assign-data.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/objects');
  test('modules/ember-flexberry-security/objects/security-assign-data.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/objects/security-assign-data.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/objects/security-assign-data.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/objects/security-assign-data.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/objects/security-assign-data.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/routes');
  test('modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/application.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/application.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/application.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/application.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/application.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/application.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/serializers');
  test('modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject.js should pass jshint.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry-security/transforms');
  test('modules/ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js should pass jscs.');
  });
});
define('dummy/ember-flexberry-security/tests/modules/ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access.js should pass jshint.');
  });
});
define('dummy/enums/ember-flexberry-dummy-gender', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Male: 'Male',
    Female: 'Female',
    Unknown: ''
  });
});
define('dummy/enums/ember-flexberry-dummy-vote-type', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Like: 'Like',
    Dislike: 'Dislike'
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access', ['exports', 'ember-flexberry-security/enums/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access'], function (exports, _emberFlexberrySecurityEnumsICSSoftSTORMNETSecurityTTypeAccess) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityEnumsICSSoftSTORMNETSecurityTTypeAccess['default'];
    }
  });
});
define('dummy/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/flexberry-enum', ['exports', 'ember-flexberry/helpers/flexberry-enum'], function (exports, _emberFlexberryHelpersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersFlexberryEnum['default'];
    }
  });
});
define('dummy/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _emberMomentHelpersMomentCalendar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar['default'];
    }
  });
  Object.defineProperty(exports, 'momentCalendar', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar.momentCalendar;
    }
  });
});
define('dummy/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('dummy/helpers/moment-format', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/moment-from-now', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/moment-to-now', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('dummy/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('dummy/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('dummy/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('dummy/initializers/allow-link-action', ['exports', 'ember-link-action/initializers/allow-link-action'], function (exports, _emberLinkActionInitializersAllowLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction.initialize;
    }
  });
});
define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _dummyConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_dummyConfigEnvironment['default'].APP.name, _dummyConfigEnvironment['default'].APP.version)
  };
});
define('dummy/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('dummy/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.ArrayController.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define("dummy/initializers/ember-i18n", ["exports", "dummy/instance-initializers/ember-i18n"], function (exports, _dummyInstanceInitializersEmberI18n) {
  exports["default"] = {
    name: _dummyInstanceInitializersEmberI18n["default"].name,

    initialize: function initialize() {
      var application = arguments[1] || arguments[0]; // depending on Ember version
      if (application.instanceInitializer) {
        return;
      }

      _dummyInstanceInitializersEmberI18n["default"].initialize(application);
    }
  };
});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_dummyConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _dummyConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_dummyConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('dummy/initializers/flexberry-enum', ['exports', 'ember-flexberry-data/initializers/flexberry-enum'], function (exports, _emberFlexberryDataInitializersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum.initialize;
    }
  });
});
define('dummy/initializers/i18n', ['exports', 'ember-flexberry/initializers/i18n'], function (exports, _emberFlexberryInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n.initialize;
    }
  });
});
define('dummy/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/local-store', ['exports', 'ember-flexberry-data/initializers/local-store'], function (exports, _emberFlexberryDataInitializersLocalStore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore.initialize;
    }
  });
});
define('dummy/initializers/log', ['exports', 'ember-flexberry/initializers/log'], function (exports, _emberFlexberryInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog.initialize;
    }
  });
});
define('dummy/initializers/moment', ['exports', 'ember-flexberry/initializers/moment'], function (exports, _emberFlexberryInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment.initialize;
    }
  });
});
define('dummy/initializers/offline-globals', ['exports', 'ember-flexberry-data/initializers/offline-globals'], function (exports, _emberFlexberryDataInitializersOfflineGlobals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals.initialize;
    }
  });
});
define('dummy/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('dummy/initializers/user-settings', ['exports', 'ember-flexberry/initializers/user-settings'], function (exports, _emberFlexberryInitializersUserSettings) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings.initialize;
    }
  });
});
define('dummy/instance-initializers/device', ['exports', 'ember-flexberry/instance-initializers/device'], function (exports, _emberFlexberryInstanceInitializersDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice.initialize;
    }
  });
});
define("dummy/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define("dummy/instance-initializers/ember-i18n", ["exports", "ember", "ember-i18n/stream", "ember-i18n/legacy-helper", "dummy/config/environment"], function (exports, _ember, _emberI18nStream, _emberI18nLegacyHelper, _dummyConfigEnvironment) {
  exports["default"] = {
    name: 'ember-i18n',

    initialize: function initialize(appOrAppInstance) {
      if (_emberI18nLegacyHelper["default"] != null) {
        (function () {
          // Used for Ember < 1.13
          var i18n = appOrAppInstance.container.lookup('service:i18n');

          i18n.localeStream = new _emberI18nStream["default"](function () {
            return i18n.get('locale');
          });

          _ember["default"].addObserver(i18n, 'locale', i18n, function () {
            this.localeStream.value(); // force the stream to be dirty
            this.localeStream.notify();
          });

          _ember["default"].HTMLBars._registerHelper('t', _emberI18nLegacyHelper["default"]);
        })();
      }
    }
  };
});
define('dummy/instance-initializers/i18n', ['exports', 'ember-flexberry/instance-initializers/moment'], function (exports, _emberFlexberryInstanceInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment.initialize;
    }
  });
});
define('dummy/instance-initializers/lock', ['exports', 'ember-flexberry/instance-initializers/lock'], function (exports, _emberFlexberryInstanceInitializersLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLock['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLock.initialize;
    }
  });
});
define('dummy/instance-initializers/log', ['exports', 'ember-flexberry/instance-initializers/log'], function (exports, _emberFlexberryInstanceInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog.initialize;
    }
  });
});
define('dummy/instance-initializers/moment', ['exports', 'ember-flexberry/instance-initializers/i18n'], function (exports, _emberFlexberryInstanceInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n.initialize;
    }
  });
});
define('dummy/locales/en/forms/ember-flexberry-dummy-application-user-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyApplicationUserEdit',
    'name-caption': 'name',
    'eMail-caption': 'eMail',
    'phone1-caption': 'phone1',
    'phone2-caption': 'phone2',
    'phone3-caption': 'phone3',
    'activated-caption': 'activated',
    'vK-caption': 'vK',
    'facebook-caption': 'facebook',
    'twitter-caption': 'twitter',
    'birthday-caption': 'birthday',
    'gender-caption': 'gender',
    'vip-caption': 'vip',
    'karma-caption': 'karma',
    'audit-button-text': 'Audit'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-application-user-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyApplicationUserList'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-comment-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyCommentEdit',
    'text-caption': 'text',
    'votes-caption': 'votes',
    'moderated-caption': 'moderated',
    'suggestion-caption': 'suggestion',
    'author-caption': 'author',
    'userVotes-caption': 'userVotes'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-localization-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyLocalizationEdit',
    'name-caption': 'name'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-localization-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyLocalizationList'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-suggestion-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummySuggestionEdit',
    'address-caption': 'address',
    'text-caption': 'text',
    'date-caption': 'date',
    'votes-caption': 'votes',
    'moderated-caption': 'moderated',
    'createTime-caption': 'createTime',
    'creator-caption': 'creator',
    'editTime-caption': 'editTime',
    'editor-caption': 'editor',
    'type-caption': 'type',
    'author-caption': 'author',
    'editor1-caption': 'editor1',
    'files-caption': 'files',
    'userVotes-caption': 'userVotes',
    'comments-caption': 'comments'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-suggestion-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummySuggestionList'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-suggestion-type-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummySuggestionTypeEdit',
    'name-caption': 'name',
    'moderated-caption': 'moderated',
    'parent-caption': 'parent',
    'localizedTypes-caption': 'localizedTypes'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-suggestion-type-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummySuggestionTypeList'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-test-poly-child-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyTestPolyChildEdit',
    'pole-caption': 'pole',
    'childPole-caption': 'childPole'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-test-poly-child-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyTestPolyChildList'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-test-poly-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyTestPolyEdit',
    'selfPole-caption': 'selfPole',
    'relation-caption': 'relation'
  };
});
define('dummy/locales/en/forms/ember-flexberry-dummy-test-poly-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'EmberFlexberryDummyTestPolyList'
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-application-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      ApplicationUserE: {
        name: {
          caption: 'name'
        },
        eMail: {
          caption: 'eMail'
        },
        phone1: {
          caption: 'phone1'
        },
        phone2: {
          caption: 'phone2'
        },
        phone3: {
          caption: 'phone3'
        },
        activated: {
          caption: 'activated'
        },
        vK: {
          caption: 'vK'
        },
        facebook: {
          caption: 'facebook'
        },
        twitter: {
          caption: 'twitter'
        },
        birthday: {
          caption: 'birthday'
        },
        gender: {
          caption: 'gender'
        },
        vip: {
          caption: 'vip'
        },
        karma: {
          caption: 'karma'
        }
      },
      ApplicationUserL: {
        name: {
          caption: 'name'
        },
        eMail: {
          caption: 'eMail'
        },
        activated: {
          caption: 'activated'
        },
        birthday: {
          caption: 'birthday'
        },
        gender: {
          caption: 'gender'
        },
        karma: {
          caption: 'karma'
        }
      },
      AuditView: {
        name: {
          caption: 'name'
        },
        eMail: {
          caption: 'eMail'
        },
        phone1: {
          caption: 'phone1'
        },
        phone2: {
          caption: 'phone2'
        },
        phone3: {
          caption: 'phone3'
        },
        activated: {
          caption: 'activated'
        },
        vK: {
          caption: 'vK'
        },
        facebook: {
          caption: 'facebook'
        },
        twitter: {
          caption: 'twitter'
        },
        birthday: {
          caption: 'birthday'
        },
        gender: {
          caption: 'gender'
        },
        vip: {
          caption: 'vip'
        },
        karma: {
          caption: 'karma'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-comment-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        voteType: {
          caption: 'voteType'
        },
        applicationUser: {
          caption: 'applicationUser',
          name: {
            caption: 'name'
          }
        }
      },
      CommentVoteE: {
        voteType: {
          caption: 'voteType'
        },
        applicationUser: {
          caption: 'applicationUser',
          name: {
            caption: 'name'
          }
        },
        comment: {
          caption: 'comment'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-comment', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        text: {
          caption: 'text'
        },
        votes: {
          caption: 'votes'
        },
        moderated: {
          caption: 'moderated'
        },
        author: {
          caption: 'author',
          name: {
            caption: 'name'
          }
        },
        userVotes: {
          caption: 'userVotes',
          voteType: {
            caption: 'voteType'
          },
          applicationUser: {
            caption: 'applicationUser',
            name: {
              caption: 'name'
            }
          }
        }
      },
      CommentD: {
        text: {
          caption: 'text'
        },
        votes: {
          caption: 'votes'
        },
        moderated: {
          caption: 'moderated'
        },
        author: {
          caption: 'author',
          name: {
            caption: 'name'
          }
        }
      },
      CommentE: {
        suggestion: {
          caption: 'suggestion',
          address: {
            caption: 'address'
          }
        },
        text: {
          caption: 'text'
        },
        votes: {
          caption: 'votes'
        },
        moderated: {
          caption: 'moderated'
        },
        author: {
          caption: 'author',
          name: {
            caption: 'name'
          },
          phone1: {
            caption: 'phone1'
          }
        },
        userVotes: {
          caption: 'userVotes',
          voteType: {
            caption: 'voteType'
          },
          applicationUser: {
            caption: 'applicationUser',
            name: {
              caption: 'name'
            }
          },
          comment: {
            caption: 'comment'
          }
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-localization', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        name: {
          caption: 'name'
        }
      },
      LocalizationE: {
        name: {
          caption: 'name'
        }
      },
      LocalizationL: {
        name: {
          caption: 'name'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-localized-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        name: {
          caption: 'name'
        },
        localization: {
          caption: 'localization',
          name: {
            caption: 'name'
          }
        }
      },
      LocalizedSuggestionTypeE: {
        name: {
          caption: 'name'
        },
        localization: {
          caption: 'localization',
          name: {
            caption: 'name'
          }
        },
        suggestionType: {
          caption: 'suggestionType'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-suggestion-file', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        order: {
          caption: 'order'
        },
        file: {
          caption: 'file'
        }
      },
      SuggestionFileE: {
        order: {
          caption: 'order'
        },
        file: {
          caption: 'file'
        },
        suggestion: {
          caption: 'suggestion'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        name: {
          caption: 'name'
        },
        moderated: {
          caption: 'moderated'
        },
        parent: {
          caption: 'parent',
          name: {
            caption: 'name'
          }
        },
        localizedTypes: {
          caption: 'localizedTypes',
          name: {
            caption: 'name'
          },
          localization: {
            caption: 'localization',
            name: {
              caption: 'name'
            }
          }
        }
      },
      SuggestionTypeE: {
        name: {
          caption: 'name'
        },
        moderated: {
          caption: 'moderated'
        },
        parent: {
          caption: 'parent',
          name: {
            caption: 'name'
          }
        },
        localizedTypes: {
          caption: 'localizedTypes',
          name: {
            caption: 'name'
          },
          localization: {
            caption: 'localization',
            name: {
              caption: 'name'
            }
          },
          suggestionType: {
            caption: 'suggestionType'
          }
        }
      },
      SuggestionTypeL: {
        name: {
          caption: 'name'
        },
        moderated: {
          caption: 'moderated'
        },
        parent: {
          caption: 'parent',
          name: {
            caption: 'name'
          }
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-suggestion', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        address: {
          caption: 'address'
        },
        text: {
          caption: 'text'
        },
        date: {
          caption: 'date'
        },
        votes: {
          caption: 'votes'
        },
        moderated: {
          caption: 'moderated'
        },
        type: {
          caption: 'type',
          name: {
            caption: 'name'
          }
        },
        author: {
          caption: 'author',
          name: {
            caption: 'name'
          }
        },
        files: {
          caption: 'files',
          order: {
            caption: 'order'
          },
          file: {
            caption: 'file'
          }
        },
        comments: {
          caption: 'comments',
          text: {
            caption: 'text'
          },
          votes: {
            caption: 'votes'
          },
          moderated: {
            caption: 'moderated'
          },
          author: {
            caption: 'author',
            name: {
              caption: 'name'
            }
          },
          userVotes: {
            caption: 'userVotes',
            voteType: {
              caption: 'voteType'
            },
            applicationUser: {
              caption: 'applicationUser',
              name: {
                caption: 'name'
              }
            }
          }
        },
        userVotes: {
          caption: 'userVotes',
          voteType: {
            caption: 'voteType'
          },
          applicationUser: {
            caption: 'applicationUser',
            name: {
              caption: 'name'
            }
          }
        }
      },
      SuggestionE: {
        address: {
          caption: 'address'
        },
        text: {
          caption: 'text'
        },
        date: {
          caption: 'date'
        },
        votes: {
          caption: 'votes'
        },
        moderated: {
          caption: 'moderated'
        },
        type: {
          caption: 'type',
          name: {
            caption: 'name'
          }
        },
        author: {
          caption: 'author',
          name: {
            caption: 'name'
          }
        },
        editor1: {
          caption: 'editor1',
          name: {
            caption: 'name'
          }
        },
        createTime: {
          caption: 'createTime'
        },
        creator: {
          caption: 'creator'
        },
        editTime: {
          caption: 'editTime'
        },
        editor: {
          caption: 'editor'
        },
        files: {
          caption: 'files',
          order: {
            caption: 'order'
          },
          file: {
            caption: 'file'
          },
          suggestion: {
            caption: 'suggestion'
          }
        },
        userVotes: {
          caption: 'userVotes',
          voteType: {
            caption: 'voteType'
          },
          applicationUser: {
            caption: 'applicationUser',
            name: {
              caption: 'name'
            }
          },
          suggestion: {
            caption: 'suggestion'
          }
        },
        comments: {
          caption: 'comments',
          text: {
            caption: 'text'
          },
          votes: {
            caption: 'votes'
          },
          moderated: {
            caption: 'moderated'
          },
          author: {
            caption: 'author',
            name: {
              caption: 'name'
            }
          }
        }
      },
      SuggestionL: {
        address: {
          caption: 'address'
        },
        text: {
          caption: 'text'
        },
        date: {
          caption: 'date'
        },
        votes: {
          caption: 'votes'
        },
        moderated: {
          caption: 'moderated'
        },
        type: {
          caption: 'type',
          name: {
            caption: 'name'
          }
        },
        author: {
          caption: 'author',
          name: {
            caption: 'name'
          }
        },
        editor1: {
          caption: 'editor1',
          name: {
            caption: 'name'
          }
        },
        createTime: {
          caption: 'createTime'
        },
        creator: {
          caption: 'creator'
        },
        editTime: {
          caption: 'editTime'
        },
        editor: {
          caption: 'editor'
        }
      }
    }
  };
});
define("dummy/locales/en/models/ember-flexberry-dummy-test-poly-base", ["exports"], function (exports) {
  exports["default"] = {
    projections: {}
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-test-poly-child', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      TestPolyChildEdit: {
        pole: {
          caption: 'pole'
        },
        childPole: {
          caption: 'childPole'
        }
      },
      TestPolyChildList: {
        pole: {
          caption: 'pole'
        },
        childPole: {
          caption: 'childPole'
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-test-poly', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      TestPolyEdit: {
        selfPole: {
          caption: 'selfPole'
        },
        relation: {
          caption: 'relation',
          pole: {
            caption: 'pole'
          }
        }
      },
      TestPolyList: {
        selfPole: {
          caption: 'selfPole'
        },
        relation: {
          caption: 'relation',
          pole: {
            caption: 'pole'
          }
        }
      }
    }
  };
});
define('dummy/locales/en/models/ember-flexberry-dummy-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        voteType: {
          caption: 'voteType'
        },
        applicationUser: {
          caption: 'applicationUser',
          name: {
            caption: 'name'
          }
        }
      },
      VoteE: {
        voteType: {
          caption: 'voteType'
        },
        applicationUser: {
          caption: 'applicationUser',
          name: {
            caption: 'name'
          }
        },
        suggestion: {
          caption: 'suggestion'
        }
      }
    }
  };
});
define('dummy/locales/en/translations', ['exports', 'ember', 'ember-flexberry/locales/en/translations', 'ember-flexberry-security/locales/en/translations', 'dummy/locales/en/forms/ember-flexberry-dummy-application-user-list', 'dummy/locales/en/forms/ember-flexberry-dummy-localization-list', 'dummy/locales/en/forms/ember-flexberry-dummy-suggestion-list', 'dummy/locales/en/forms/ember-flexberry-dummy-suggestion-type-list', 'dummy/locales/en/forms/ember-flexberry-dummy-test-poly-child-list', 'dummy/locales/en/forms/ember-flexberry-dummy-test-poly-list', 'dummy/locales/en/forms/ember-flexberry-dummy-application-user-edit', 'dummy/locales/en/forms/ember-flexberry-dummy-comment-edit', 'dummy/locales/en/forms/ember-flexberry-dummy-localization-edit', 'dummy/locales/en/forms/ember-flexberry-dummy-suggestion-edit', 'dummy/locales/en/forms/ember-flexberry-dummy-suggestion-type-edit', 'dummy/locales/en/forms/ember-flexberry-dummy-test-poly-child-edit', 'dummy/locales/en/forms/ember-flexberry-dummy-test-poly-edit', 'dummy/locales/en/models/ember-flexberry-dummy-application-user', 'dummy/locales/en/models/ember-flexberry-dummy-comment-vote', 'dummy/locales/en/models/ember-flexberry-dummy-comment', 'dummy/locales/en/models/ember-flexberry-dummy-localization', 'dummy/locales/en/models/ember-flexberry-dummy-localized-suggestion-type', 'dummy/locales/en/models/ember-flexberry-dummy-suggestion-file', 'dummy/locales/en/models/ember-flexberry-dummy-suggestion-type', 'dummy/locales/en/models/ember-flexberry-dummy-suggestion', 'dummy/locales/en/models/ember-flexberry-dummy-test-poly-base', 'dummy/locales/en/models/ember-flexberry-dummy-test-poly-child', 'dummy/locales/en/models/ember-flexberry-dummy-test-poly', 'dummy/locales/en/models/ember-flexberry-dummy-vote'], function (exports, _ember, _emberFlexberryLocalesEnTranslations, _emberFlexberrySecurityLocalesEnTranslations, _dummyLocalesEnFormsEmberFlexberryDummyApplicationUserList, _dummyLocalesEnFormsEmberFlexberryDummyLocalizationList, _dummyLocalesEnFormsEmberFlexberryDummySuggestionList, _dummyLocalesEnFormsEmberFlexberryDummySuggestionTypeList, _dummyLocalesEnFormsEmberFlexberryDummyTestPolyChildList, _dummyLocalesEnFormsEmberFlexberryDummyTestPolyList, _dummyLocalesEnFormsEmberFlexberryDummyApplicationUserEdit, _dummyLocalesEnFormsEmberFlexberryDummyCommentEdit, _dummyLocalesEnFormsEmberFlexberryDummyLocalizationEdit, _dummyLocalesEnFormsEmberFlexberryDummySuggestionEdit, _dummyLocalesEnFormsEmberFlexberryDummySuggestionTypeEdit, _dummyLocalesEnFormsEmberFlexberryDummyTestPolyChildEdit, _dummyLocalesEnFormsEmberFlexberryDummyTestPolyEdit, _dummyLocalesEnModelsEmberFlexberryDummyApplicationUser, _dummyLocalesEnModelsEmberFlexberryDummyCommentVote, _dummyLocalesEnModelsEmberFlexberryDummyComment, _dummyLocalesEnModelsEmberFlexberryDummyLocalization, _dummyLocalesEnModelsEmberFlexberryDummyLocalizedSuggestionType, _dummyLocalesEnModelsEmberFlexberryDummySuggestionFile, _dummyLocalesEnModelsEmberFlexberryDummySuggestionType, _dummyLocalesEnModelsEmberFlexberryDummySuggestion, _dummyLocalesEnModelsEmberFlexberryDummyTestPolyBase, _dummyLocalesEnModelsEmberFlexberryDummyTestPolyChild, _dummyLocalesEnModelsEmberFlexberryDummyTestPoly, _dummyLocalesEnModelsEmberFlexberryDummyVote) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesEnTranslations['default'], _emberFlexberrySecurityLocalesEnTranslations['default']);

  _ember['default'].$.extend(true, translations, {
    models: {
      'ember-flexberry-dummy-application-user': _dummyLocalesEnModelsEmberFlexberryDummyApplicationUser['default'],
      'ember-flexberry-dummy-comment-vote': _dummyLocalesEnModelsEmberFlexberryDummyCommentVote['default'],
      'ember-flexberry-dummy-comment': _dummyLocalesEnModelsEmberFlexberryDummyComment['default'],
      'ember-flexberry-dummy-localization': _dummyLocalesEnModelsEmberFlexberryDummyLocalization['default'],
      'ember-flexberry-dummy-localized-suggestion-type': _dummyLocalesEnModelsEmberFlexberryDummyLocalizedSuggestionType['default'],
      'ember-flexberry-dummy-suggestion-file': _dummyLocalesEnModelsEmberFlexberryDummySuggestionFile['default'],
      'ember-flexberry-dummy-suggestion-type': _dummyLocalesEnModelsEmberFlexberryDummySuggestionType['default'],
      'ember-flexberry-dummy-suggestion': _dummyLocalesEnModelsEmberFlexberryDummySuggestion['default'],
      'ember-flexberry-dummy-test-poly-base': _dummyLocalesEnModelsEmberFlexberryDummyTestPolyBase['default'],
      'ember-flexberry-dummy-test-poly-child': _dummyLocalesEnModelsEmberFlexberryDummyTestPolyChild['default'],
      'ember-flexberry-dummy-test-poly': _dummyLocalesEnModelsEmberFlexberryDummyTestPoly['default'],
      'ember-flexberry-dummy-vote': _dummyLocalesEnModelsEmberFlexberryDummyVote['default']
    },

    'application-name': 'Application caption',

    forms: {
      loading: {
        'spinner-caption': 'Loading stuff, please wait...'
      },
      index: {
        greeting: 'Welcome to ember-flexberry-security dummy application!'
      },

      login: {
        caption: 'Login',
        logout: 'Logout',
        back: 'Back',
        login: 'Login',
        password: 'Password',
        'you-logged-as': 'You logged as: "{{login}}".',
        errors: {
          'empty-login': 'Login can not be empty.',
          'empty-password': 'Password can not be empty.',
          'server-error': 'Not response from server.',
          'incorrect-auth-data': 'Wrong login or password.',
          'login-please': 'Please, login.',
          'unknown-error': 'Oh, something went wrong...'
        }
      },

      application: {
        'sync-up': 'Sync up',
        header: {
          menu: {
            'sitemap-button': {
              caption: '',
              title: 'Menu'
            },
            'user-settings-service-checkbox': {
              caption: 'Use service to save user settings'
            },
            'language-dropdown': {
              caption: 'Application language',
              placeholder: 'Choose language'
            }
          }
        },

        footer: {
          'application-name': 'Application caption',
          'application-version': {
            caption: 'Addon version {{version}}',
            title: 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          }
        },

        sitemap: {
          'application-name': {
            caption: 'Application caption',
            title: 'Application title'
          },
          'application-version': {
            caption: 'Addon version {{version}}',
            title: 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          },
          index: {
            caption: 'Home',
            title: ''
          },
          application: {
            caption: 'application',
            title: 'application',
            'ember-flexberry-dummy-application-user-list': {
              caption: 'ember-flexberry-dummy-application-user-list',
              title: 'ember-flexberry-dummy-application-user-list'

            },
            'ember-flexberry-dummy-localization-list': {
              caption: 'ember-flexberry-dummy-localization-list',
              title: 'ember-flexberry-dummy-localization-list'

            },
            'ember-flexberry-dummy-suggestion-list': {
              caption: 'ember-flexberry-dummy-suggestion-list',
              title: 'ember-flexberry-dummy-suggestion-list'

            },
            'ember-flexberry-dummy-suggestion-type-list': {
              caption: 'ember-flexberry-dummy-suggestion-type-list',
              title: 'ember-flexberry-dummy-suggestion-type-list'

            },
            'ember-flexberry-dummy-test-poly-child-list': {
              caption: 'ember-flexberry-dummy-test-poly-child-list',
              title: 'ember-flexberry-dummy-test-poly-child-list'

            },
            'ember-flexberry-dummy-test-poly-list': {
              caption: 'ember-flexberry-dummy-test-poly-list',
              title: 'ember-flexberry-dummy-test-poly-list'

            }
          }
        }
      },
      audit: {
        'show-audit-button-text': 'Audit'
      },

      'ember-flexberry-dummy-application-user-list': _dummyLocalesEnFormsEmberFlexberryDummyApplicationUserList['default'],
      'ember-flexberry-dummy-localization-list': _dummyLocalesEnFormsEmberFlexberryDummyLocalizationList['default'],
      'ember-flexberry-dummy-suggestion-list': _dummyLocalesEnFormsEmberFlexberryDummySuggestionList['default'],
      'ember-flexberry-dummy-suggestion-type-list': _dummyLocalesEnFormsEmberFlexberryDummySuggestionTypeList['default'],
      'ember-flexberry-dummy-test-poly-child-list': _dummyLocalesEnFormsEmberFlexberryDummyTestPolyChildList['default'],
      'ember-flexberry-dummy-test-poly-list': _dummyLocalesEnFormsEmberFlexberryDummyTestPolyList['default'],
      'ember-flexberry-dummy-application-user-edit': _dummyLocalesEnFormsEmberFlexberryDummyApplicationUserEdit['default'],
      'ember-flexberry-dummy-comment-edit': _dummyLocalesEnFormsEmberFlexberryDummyCommentEdit['default'],
      'ember-flexberry-dummy-localization-edit': _dummyLocalesEnFormsEmberFlexberryDummyLocalizationEdit['default'],
      'ember-flexberry-dummy-suggestion-edit': _dummyLocalesEnFormsEmberFlexberryDummySuggestionEdit['default'],
      'ember-flexberry-dummy-suggestion-type-edit': _dummyLocalesEnFormsEmberFlexberryDummySuggestionTypeEdit['default'],
      'ember-flexberry-dummy-test-poly-child-edit': _dummyLocalesEnFormsEmberFlexberryDummyTestPolyChildEdit['default'],
      'ember-flexberry-dummy-test-poly-edit': _dummyLocalesEnFormsEmberFlexberryDummyTestPolyEdit['default']
    }

  });

  exports['default'] = translations;
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-application-user-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Application user',
    'name-caption': 'Name',
    'eMail-caption': 'E-mail',
    'phone1-caption': 'Phone1',
    'phone2-caption': 'Phone2',
    'phone3-caption': 'Phone3',
    'activated-caption': 'Activated',
    'vK-caption': 'VK',
    'facebook-caption': 'Facebook',
    'twitter-caption': 'Twitter',
    'birthday-caption': 'Birthday',
    'gender-caption': 'Gender',
    'vip-caption': 'Vip',
    'karma-caption': 'Karma',
    'audit-button-text': 'Аудит'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-application-user-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Application users'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-comment-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Comment edit',
    'text-caption': 'Text',
    'votes-caption': 'Votes',
    'moderated-caption': 'Moderated',
    'suggestion-caption': 'Address',
    'author-caption': 'Author',
    'userVotes-caption': 'User votes'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-localization-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Localization',
    'name-caption': 'Name'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-localization-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Localization'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion',
    'address-caption': 'Address',
    'text-caption': 'Text',
    'date-caption': 'Date',
    'votes-caption': 'Votes',
    'moderated-caption': 'Moderated',
    'createTime-caption': '',
    'creator-caption': '',
    'editTime-caption': '',
    'editor-caption': '',
    'type-caption': 'Type',
    'author-caption': 'Author',
    'editor1-caption': 'Editor1',
    'files-caption': 'Files',
    'userVotes-caption': 'User votes',
    'comments-caption': 'Comments'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestions'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-type-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion type',
    'name-caption': 'Name',
    'moderated-caption': 'Moderated',
    'parent-caption': 'Parent',
    'localizedTypes-caption': 'Localized types'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-type-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion types'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-child-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Test polymorphic child class',
    'pole-caption': '',
    'childPole-caption': ''
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-child-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Test polymorphic child class'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-edit', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Test polymorphic class',
    'selfPole-caption': 'Self Pole',
    'relation-caption': 'Relation'
  };
});
define('dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-list', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Test polymorphic class'
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-application-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      ApplicationUserE: {
        name: {
          caption: 'Name'
        },
        eMail: {
          caption: 'E-mail'
        },
        phone1: {
          caption: 'Phone1'
        },
        phone2: {
          caption: 'Phone2'
        },
        phone3: {
          caption: 'Phone3'
        },
        activated: {
          caption: 'Activated'
        },
        vK: {
          caption: 'VK'
        },
        facebook: {
          caption: 'Facebook'
        },
        twitter: {
          caption: 'Twitter'
        },
        birthday: {
          caption: 'Birthday'
        },
        gender: {
          caption: 'Gender'
        },
        vip: {
          caption: 'Vip'
        },
        karma: {
          caption: 'Karma'
        }
      },
      ApplicationUserL: {
        name: {
          caption: 'Name'
        },
        eMail: {
          caption: 'E-mail'
        },
        activated: {
          caption: 'Activated'
        },
        birthday: {
          caption: 'Birthday'
        },
        gender: {
          caption: 'Gender'
        },
        karma: {
          caption: 'Karma'
        }
      },
      AuditView: {
        name: {
          caption: 'Name'
        },
        eMail: {
          caption: 'E mail'
        },
        phone1: {
          caption: 'Phone1'
        },
        phone2: {
          caption: 'Phone2'
        },
        phone3: {
          caption: 'Phone3'
        },
        activated: {
          caption: 'Activated'
        },
        vK: {
          caption: 'VK'
        },
        facebook: {
          caption: 'Facebook'
        },
        twitter: {
          caption: 'Twitter'
        },
        birthday: {
          caption: 'Birthday'
        },
        gender: {
          caption: 'Gender'
        },
        vip: {
          caption: 'Vip'
        },
        karma: {
          caption: 'Karma'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-comment-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        voteType: {
          caption: 'Vote type'
        },
        applicationUser: {
          caption: 'Application user',
          name: {
            caption: 'Name'
          }
        }
      },
      CommentVoteE: {
        voteType: {
          caption: 'Vote type'
        },
        applicationUser: {
          caption: 'Application user',
          name: {
            caption: 'Name'
          }
        },
        comment: {
          caption: ''
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-comment', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        text: {
          caption: 'Text'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        },
        userVotes: {
          caption: 'User votes',
          voteType: {
            caption: 'Vote type'
          },
          applicationUser: {
            caption: 'Application user',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      CommentD: {
        text: {
          caption: 'Text'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        }
      },
      CommentE: {
        suggestion: {
          caption: 'Address',
          address: {
            caption: ''
          }
        },
        text: {
          caption: 'Text'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          },
          phone1: {
            caption: 'Phone 1'
          }
        },
        userVotes: {
          caption: 'User votes',
          voteType: {
            caption: 'Vote type'
          },
          applicationUser: {
            caption: 'Application user',
            name: {
              caption: 'Name'
            }
          },
          comment: {
            caption: ''
          }
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-localization', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        name: {
          caption: 'Name'
        }
      },
      LocalizationE: {
        name: {
          caption: 'Name'
        }
      },
      LocalizationL: {
        name: {
          caption: 'Name'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-localized-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        name: {
          caption: 'Name'
        },
        localization: {
          caption: 'Localization',
          name: {
            caption: 'Name'
          }
        }
      },
      LocalizedSuggestionTypeE: {
        name: {
          caption: 'Name'
        },
        localization: {
          caption: 'Localization',
          name: {
            caption: 'Name'
          }
        },
        suggestionType: {
          caption: ''
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-suggestion-file', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        order: {
          caption: 'Order'
        },
        file: {
          caption: 'File'
        }
      },
      SuggestionFileE: {
        order: {
          caption: 'Order'
        },
        file: {
          caption: 'File'
        },
        suggestion: {
          caption: ''
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        name: {
          caption: 'Name'
        },
        moderated: {
          caption: 'Moderated'
        },
        parent: {
          caption: 'Parent',
          name: {
            caption: 'Name'
          }
        },
        localizedTypes: {
          caption: 'Localized types',
          name: {
            caption: 'Name'
          },
          localization: {
            caption: 'Localization',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionTypeE: {
        name: {
          caption: 'Name'
        },
        moderated: {
          caption: 'Moderated'
        },
        parent: {
          caption: 'Parent',
          name: {
            caption: 'Name'
          }
        },
        localizedTypes: {
          caption: 'Localized types',
          name: {
            caption: 'Name'
          },
          localization: {
            caption: 'Localization',
            name: {
              caption: 'Name'
            }
          },
          suggestionType: {
            caption: ''
          }
        }
      },
      SuggestionTypeL: {
        name: {
          caption: 'Name'
        },
        moderated: {
          caption: 'Moderated'
        },
        parent: {
          caption: 'Parent',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-suggestion', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        address: {
          caption: 'Address'
        },
        text: {
          caption: 'Text'
        },
        date: {
          caption: 'Date'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        type: {
          caption: 'Type',
          name: {
            caption: 'Name'
          }
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        },
        files: {
          caption: 'Files',
          order: {
            caption: 'Order'
          },
          file: {
            caption: 'File'
          }
        },
        comments: {
          caption: 'Comments',
          text: {
            caption: 'Text'
          },
          votes: {
            caption: 'Votes'
          },
          moderated: {
            caption: 'Moderated'
          },
          author: {
            caption: 'Author',
            name: {
              caption: 'Name'
            }
          },
          userVotes: {
            caption: 'User votes',
            voteType: {
              caption: 'Vote type'
            },
            applicationUser: {
              caption: 'Application user',
              name: {
                caption: 'Name'
              }
            }
          }
        },
        userVotes: {
          caption: 'User votes',
          voteType: {
            caption: 'Vote type'
          },
          applicationUser: {
            caption: 'Application user',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionE: {
        address: {
          caption: 'Address'
        },
        text: {
          caption: 'Text'
        },
        date: {
          caption: 'Date'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        type: {
          caption: 'Type',
          name: {
            caption: 'Name'
          }
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        },
        editor1: {
          caption: 'Editor1',
          name: {
            caption: 'Name'
          }
        },
        createTime: {
          caption: ''
        },
        creator: {
          caption: ''
        },
        editTime: {
          caption: ''
        },
        editor: {
          caption: ''
        },
        files: {
          caption: 'Files',
          order: {
            caption: 'Order'
          },
          file: {
            caption: 'File'
          },
          suggestion: {
            caption: ''
          }
        },
        userVotes: {
          caption: 'User votes',
          voteType: {
            caption: 'Vote type'
          },
          applicationUser: {
            caption: 'Application user',
            name: {
              caption: 'Name'
            }
          },
          suggestion: {
            caption: ''
          }
        },
        comments: {
          caption: 'Comments',
          text: {
            caption: 'Text'
          },
          votes: {
            caption: 'Votes'
          },
          moderated: {
            caption: 'Moderated'
          },
          author: {
            caption: 'Author',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionL: {
        address: {
          caption: 'Address'
        },
        text: {
          caption: 'Text'
        },
        date: {
          caption: 'Date'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        type: {
          caption: '',
          name: {
            caption: 'Name'
          }
        },
        author: {
          caption: '',
          name: {
            caption: 'Name'
          }
        },
        editor1: {
          caption: '',
          name: {
            caption: 'Name'
          }
        },
        createTime: {
          caption: ''
        },
        creator: {
          caption: ''
        },
        editTime: {
          caption: ''
        },
        editor: {
          caption: ''
        }
      }
    }
  };
});
define("dummy/locales/ru/models/ember-flexberry-dummy-test-poly-base", ["exports"], function (exports) {
  exports["default"] = {
    projections: {}
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-test-poly-child', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      TestPolyChildEdit: {
        pole: {
          caption: ''
        },
        childPole: {
          caption: ''
        }
      },
      TestPolyChildList: {
        pole: {
          caption: 'Pole'
        },
        childPole: {
          caption: 'ChildPole'
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-test-poly', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      TestPolyEdit: {
        selfPole: {
          caption: 'Self Pole'
        },
        relation: {
          caption: 'Relation',
          pole: {
            caption: 'Pole'
          }
        }
      },
      TestPolyList: {
        selfPole: {
          caption: 'SelfPole'
        },
        relation: {
          caption: '',
          pole: {
            caption: 'Pole'
          }
        }
      }
    }
  };
});
define('dummy/locales/ru/models/ember-flexberry-dummy-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      AuditView: {
        voteType: {
          caption: 'Vote type'
        },
        applicationUser: {
          caption: 'Application user',
          name: {
            caption: 'Name'
          }
        }
      },
      VoteE: {
        voteType: {
          caption: 'Vote type'
        },
        applicationUser: {
          caption: 'Application user',
          name: {
            caption: 'Name'
          }
        },
        suggestion: {
          caption: ''
        }
      }
    }
  };
});
define('dummy/locales/ru/translations', ['exports', 'ember', 'ember-flexberry/locales/ru/translations', 'ember-flexberry-security/locales/ru/translations', 'dummy/locales/ru/forms/ember-flexberry-dummy-application-user-list', 'dummy/locales/ru/forms/ember-flexberry-dummy-localization-list', 'dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-list', 'dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-type-list', 'dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-child-list', 'dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-list', 'dummy/locales/ru/forms/ember-flexberry-dummy-application-user-edit', 'dummy/locales/ru/forms/ember-flexberry-dummy-comment-edit', 'dummy/locales/ru/forms/ember-flexberry-dummy-localization-edit', 'dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-edit', 'dummy/locales/ru/forms/ember-flexberry-dummy-suggestion-type-edit', 'dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-child-edit', 'dummy/locales/ru/forms/ember-flexberry-dummy-test-poly-edit', 'dummy/locales/ru/models/ember-flexberry-dummy-application-user', 'dummy/locales/ru/models/ember-flexberry-dummy-comment-vote', 'dummy/locales/ru/models/ember-flexberry-dummy-comment', 'dummy/locales/ru/models/ember-flexberry-dummy-localization', 'dummy/locales/ru/models/ember-flexberry-dummy-localized-suggestion-type', 'dummy/locales/ru/models/ember-flexberry-dummy-suggestion-file', 'dummy/locales/ru/models/ember-flexberry-dummy-suggestion-type', 'dummy/locales/ru/models/ember-flexberry-dummy-suggestion', 'dummy/locales/ru/models/ember-flexberry-dummy-test-poly-base', 'dummy/locales/ru/models/ember-flexberry-dummy-test-poly-child', 'dummy/locales/ru/models/ember-flexberry-dummy-test-poly', 'dummy/locales/ru/models/ember-flexberry-dummy-vote'], function (exports, _ember, _emberFlexberryLocalesRuTranslations, _emberFlexberrySecurityLocalesRuTranslations, _dummyLocalesRuFormsEmberFlexberryDummyApplicationUserList, _dummyLocalesRuFormsEmberFlexberryDummyLocalizationList, _dummyLocalesRuFormsEmberFlexberryDummySuggestionList, _dummyLocalesRuFormsEmberFlexberryDummySuggestionTypeList, _dummyLocalesRuFormsEmberFlexberryDummyTestPolyChildList, _dummyLocalesRuFormsEmberFlexberryDummyTestPolyList, _dummyLocalesRuFormsEmberFlexberryDummyApplicationUserEdit, _dummyLocalesRuFormsEmberFlexberryDummyCommentEdit, _dummyLocalesRuFormsEmberFlexberryDummyLocalizationEdit, _dummyLocalesRuFormsEmberFlexberryDummySuggestionEdit, _dummyLocalesRuFormsEmberFlexberryDummySuggestionTypeEdit, _dummyLocalesRuFormsEmberFlexberryDummyTestPolyChildEdit, _dummyLocalesRuFormsEmberFlexberryDummyTestPolyEdit, _dummyLocalesRuModelsEmberFlexberryDummyApplicationUser, _dummyLocalesRuModelsEmberFlexberryDummyCommentVote, _dummyLocalesRuModelsEmberFlexberryDummyComment, _dummyLocalesRuModelsEmberFlexberryDummyLocalization, _dummyLocalesRuModelsEmberFlexberryDummyLocalizedSuggestionType, _dummyLocalesRuModelsEmberFlexberryDummySuggestionFile, _dummyLocalesRuModelsEmberFlexberryDummySuggestionType, _dummyLocalesRuModelsEmberFlexberryDummySuggestion, _dummyLocalesRuModelsEmberFlexberryDummyTestPolyBase, _dummyLocalesRuModelsEmberFlexberryDummyTestPolyChild, _dummyLocalesRuModelsEmberFlexberryDummyTestPoly, _dummyLocalesRuModelsEmberFlexberryDummyVote) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesRuTranslations['default'], _emberFlexberrySecurityLocalesRuTranslations['default']);

  _ember['default'].$.extend(true, translations, {
    models: {
      'ember-flexberry-dummy-application-user': _dummyLocalesRuModelsEmberFlexberryDummyApplicationUser['default'],
      'ember-flexberry-dummy-comment-vote': _dummyLocalesRuModelsEmberFlexberryDummyCommentVote['default'],
      'ember-flexberry-dummy-comment': _dummyLocalesRuModelsEmberFlexberryDummyComment['default'],
      'ember-flexberry-dummy-localization': _dummyLocalesRuModelsEmberFlexberryDummyLocalization['default'],
      'ember-flexberry-dummy-localized-suggestion-type': _dummyLocalesRuModelsEmberFlexberryDummyLocalizedSuggestionType['default'],
      'ember-flexberry-dummy-suggestion-file': _dummyLocalesRuModelsEmberFlexberryDummySuggestionFile['default'],
      'ember-flexberry-dummy-suggestion-type': _dummyLocalesRuModelsEmberFlexberryDummySuggestionType['default'],
      'ember-flexberry-dummy-suggestion': _dummyLocalesRuModelsEmberFlexberryDummySuggestion['default'],
      'ember-flexberry-dummy-test-poly-base': _dummyLocalesRuModelsEmberFlexberryDummyTestPolyBase['default'],
      'ember-flexberry-dummy-test-poly-child': _dummyLocalesRuModelsEmberFlexberryDummyTestPolyChild['default'],
      'ember-flexberry-dummy-test-poly': _dummyLocalesRuModelsEmberFlexberryDummyTestPoly['default'],
      'ember-flexberry-dummy-vote': _dummyLocalesRuModelsEmberFlexberryDummyVote['default']
    },

    'application-name': 'Dummy',

    forms: {
      loading: {
        'spinner-caption': 'Данные загружаются, пожалуйста подождите...'
      },
      index: {
        greeting: 'Добро пожаловать на тестовый стенд ember-flexberry!'
      },

      login: {
        caption: 'Войти',
        logout: 'Выйти',
        back: 'Назад',
        login: 'Логин',
        password: 'Пароль',
        'you-logged-as': 'Вы вошли как: "{{login}}".',
        errors: {
          'empty-login': 'Логин не может быть пустым.',
          'empty-password': 'Пароль не может быть пустым.',
          'server-error': 'Не удалось получить ответ от сервера.',
          'incorrect-auth-data': 'Неверный логин или пароль.',
          'login-please': 'Пожалуйста, войдите.',
          'unknown-error': 'Ой, что то пошло не так...'
        }
      },

      application: {
        'sync-up': 'Выполнить синхронизацию',
        header: {
          menu: {
            'sitemap-button': {
              caption: '',
              title: 'Меню'
            },
            'user-settings-service-checkbox': {
              caption: 'Использовать сервис сохранения пользовательских настроек'
            },
            'language-dropdown': {
              caption: 'Язык приложения',
              placeholder: 'Выберите язык'
            }
          }
        },

        footer: {
          'application-name': 'Dummy',
          'application-version': {
            caption: 'Версия аддона {{version}}',
            title: 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          }
        },

        sitemap: {
          'application-name': {
            caption: 'Dummy',
            title: 'Dummy'
          },
          'application-version': {
            caption: 'Версия аддона {{version}}',
            title: 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          },
          index: {
            caption: 'Главная',
            title: ''
          },
          application: {
            caption: 'Application',
            title: 'Application',
            'ember-flexberry-dummy-application-user-list': {
              caption: 'Application Users',
              title: ''

            },
            'ember-flexberry-dummy-localization-list': {
              caption: 'Localizations',
              title: ''

            },
            'ember-flexberry-dummy-suggestion-list': {
              caption: 'Suggestions',
              title: ''

            },
            'ember-flexberry-dummy-suggestion-type-list': {
              caption: 'Suggestion types',
              title: ''

            },
            'ember-flexberry-dummy-test-poly-child-list': {
              caption: 'TestPolyChildList',
              title: ''

            },
            'ember-flexberry-dummy-test-poly-list': {
              caption: 'TestPolyList',
              title: ''

            }
          }
        }
      },
      audit: {
        'show-audit-button-text': 'Аудит'
      },

      'ember-flexberry-dummy-application-user-list': _dummyLocalesRuFormsEmberFlexberryDummyApplicationUserList['default'],
      'ember-flexberry-dummy-localization-list': _dummyLocalesRuFormsEmberFlexberryDummyLocalizationList['default'],
      'ember-flexberry-dummy-suggestion-list': _dummyLocalesRuFormsEmberFlexberryDummySuggestionList['default'],
      'ember-flexberry-dummy-suggestion-type-list': _dummyLocalesRuFormsEmberFlexberryDummySuggestionTypeList['default'],
      'ember-flexberry-dummy-test-poly-child-list': _dummyLocalesRuFormsEmberFlexberryDummyTestPolyChildList['default'],
      'ember-flexberry-dummy-test-poly-list': _dummyLocalesRuFormsEmberFlexberryDummyTestPolyList['default'],
      'ember-flexberry-dummy-application-user-edit': _dummyLocalesRuFormsEmberFlexberryDummyApplicationUserEdit['default'],
      'ember-flexberry-dummy-comment-edit': _dummyLocalesRuFormsEmberFlexberryDummyCommentEdit['default'],
      'ember-flexberry-dummy-localization-edit': _dummyLocalesRuFormsEmberFlexberryDummyLocalizationEdit['default'],
      'ember-flexberry-dummy-suggestion-edit': _dummyLocalesRuFormsEmberFlexberryDummySuggestionEdit['default'],
      'ember-flexberry-dummy-suggestion-type-edit': _dummyLocalesRuFormsEmberFlexberryDummySuggestionTypeEdit['default'],
      'ember-flexberry-dummy-test-poly-child-edit': _dummyLocalesRuFormsEmberFlexberryDummyTestPolyChildEdit['default'],
      'ember-flexberry-dummy-test-poly-edit': _dummyLocalesRuFormsEmberFlexberryDummyTestPolyEdit['default']
    }

  });

  exports['default'] = translations;
});
define('dummy/mixins/link-action', ['exports', 'ember-link-action/mixins/link-action'], function (exports, _emberLinkActionMixinsLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionMixinsLinkAction['default'];
    }
  });
});
define('dummy/mixins/offline-schema', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    init: function init() {
      this.set('offlineSchema', {
        'ember-flexberry-data': {
          'ember-flexberry-dummy-application-user': 'id,name,eMail,phone1,phone2,phone3,activated,vK,facebook,twitter,birthday,gender,vip,karma,createTime,creator,editTime,editor',
          'ember-flexberry-dummy-comment-vote': 'id,voteType,createTime,creator,editTime,editor,applicationUser,comment',
          'ember-flexberry-dummy-comment': 'id,text,votes,moderated,createTime,creator,editTime,editor,author,suggestion,*userVotes',
          'ember-flexberry-dummy-localization': 'id,name,createTime,creator,editTime,editor',
          'ember-flexberry-dummy-localized-suggestion-type': 'id,name,createTime,creator,editTime,editor,localization,suggestionType',
          'ember-flexberry-dummy-suggestion-file': 'id,order,file,createTime,creator,editTime,editor,suggestion',
          'ember-flexberry-dummy-suggestion-type': 'id,name,moderated,createTime,creator,editTime,editor,parent,*localizedTypes',
          'ember-flexberry-dummy-suggestion': 'id,address,text,date,votes,moderated,createTime,creator,editTime,editor,type,editor1,author,*userVotes,*files,*comments',
          'ember-flexberry-dummy-test-poly-base': 'id,pole',
          'ember-flexberry-dummy-test-poly-child': 'id,childPole',
          'ember-flexberry-dummy-test-poly': 'id,selfPole,relation',
          'ember-flexberry-dummy-vote': 'id,voteType,createTime,creator,editTime,editor,applicationUser,suggestion'
        }
      });
      return this._super.apply(this, arguments);
    }
  });
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-application-user', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    eMail: _emberData['default'].attr('string'),
    phone1: _emberData['default'].attr('string'),
    phone2: _emberData['default'].attr('string'),
    phone3: _emberData['default'].attr('string'),
    activated: _emberData['default'].attr('boolean'),
    vK: _emberData['default'].attr('string'),
    facebook: _emberData['default'].attr('string'),
    twitter: _emberData['default'].attr('string'),
    birthday: _emberData['default'].attr('date'),
    gender: _emberData['default'].attr('ember-flexberry-dummy-gender'),
    vip: _emberData['default'].attr('boolean'),
    karma: _emberData['default'].attr('decimal'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    validations: {
      name: { presence: true },
      eMail: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('ApplicationUserE', 'ember-flexberry-dummy-application-user', {
      name: _emberFlexberryData.Projection.attr('Name'),
      eMail: _emberFlexberryData.Projection.attr('E-mail'),
      phone1: _emberFlexberryData.Projection.attr('Phone1'),
      phone2: _emberFlexberryData.Projection.attr('Phone2'),
      phone3: _emberFlexberryData.Projection.attr('Phone3'),
      activated: _emberFlexberryData.Projection.attr('Activated'),
      vK: _emberFlexberryData.Projection.attr('VK'),
      facebook: _emberFlexberryData.Projection.attr('Facebook'),
      twitter: _emberFlexberryData.Projection.attr('Twitter'),
      birthday: _emberFlexberryData.Projection.attr('Birthday'),
      gender: _emberFlexberryData.Projection.attr('Gender'),
      vip: _emberFlexberryData.Projection.attr('Vip'),
      karma: _emberFlexberryData.Projection.attr('Karma')
    });
    model.defineProjection('ApplicationUserL', 'ember-flexberry-dummy-application-user', {
      name: _emberFlexberryData.Projection.attr('Name'),
      eMail: _emberFlexberryData.Projection.attr('E-mail'),
      activated: _emberFlexberryData.Projection.attr('Activated'),
      birthday: _emberFlexberryData.Projection.attr('Birthday'),
      gender: _emberFlexberryData.Projection.attr('Gender'),
      karma: _emberFlexberryData.Projection.attr('Karma')
    });
    model.defineProjection('AuditView', 'ember-flexberry-dummy-application-user', {
      name: _emberFlexberryData.Projection.attr('Name'),
      eMail: _emberFlexberryData.Projection.attr('E mail'),
      phone1: _emberFlexberryData.Projection.attr('Phone1'),
      phone2: _emberFlexberryData.Projection.attr('Phone2'),
      phone3: _emberFlexberryData.Projection.attr('Phone3'),
      activated: _emberFlexberryData.Projection.attr('Activated'),
      vK: _emberFlexberryData.Projection.attr('VK'),
      facebook: _emberFlexberryData.Projection.attr('Facebook'),
      twitter: _emberFlexberryData.Projection.attr('Twitter'),
      birthday: _emberFlexberryData.Projection.attr('Birthday'),
      gender: _emberFlexberryData.Projection.attr('Gender'),
      vip: _emberFlexberryData.Projection.attr('Vip'),
      karma: _emberFlexberryData.Projection.attr('Karma')
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-comment-vote', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    voteType: _emberData['default'].attr('ember-flexberry-dummy-vote-type'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    applicationUser: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', { inverse: null, async: false }),
    comment: _emberData['default'].belongsTo('ember-flexberry-dummy-comment', { inverse: 'userVotes', async: false }),
    validations: {
      applicationUser: { presence: true },
      comment: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-comment-vote', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
    model.defineProjection('CommentVoteE', 'ember-flexberry-dummy-comment-vote', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      comment: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-comment', '', {})
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-comment', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    text: _emberData['default'].attr('string'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', { inverse: null, async: false }),
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', { inverse: 'comments', async: false }),
    userVotes: _emberData['default'].hasMany('ember-flexberry-dummy-comment-vote', { inverse: 'comment', async: false }),
    validations: {
      author: { presence: true },
      suggestion: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-comment', {
      text: _emberFlexberryData.Projection.attr('Text'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment-vote', 'User votes', {
        voteType: _emberFlexberryData.Projection.attr('Vote type'),
        applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
    model.defineProjection('CommentD', 'ember-flexberry-dummy-comment', {
      text: _emberFlexberryData.Projection.attr('Text'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
    model.defineProjection('CommentE', 'ember-flexberry-dummy-comment', {
      suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', 'Address', {
        address: _emberFlexberryData.Projection.attr('', { hidden: true })
      }),
      text: _emberFlexberryData.Projection.attr('Text'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true }),
        phone1: _emberFlexberryData.Projection.attr('Phone 1', { hidden: true })
      }, { displayMemberPath: 'name' }),
      userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment-vote', 'User votes', {
        voteType: _emberFlexberryData.Projection.attr('Vote type'),
        applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' }),
        comment: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-comment', '', {})
      })
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-localization', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    validations: {
      name: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-localization', {
      name: _emberFlexberryData.Projection.attr('Name')
    });
    model.defineProjection('LocalizationE', 'ember-flexberry-dummy-localization', {
      name: _emberFlexberryData.Projection.attr('Name')
    });
    model.defineProjection('LocalizationL', 'ember-flexberry-dummy-localization', {
      name: _emberFlexberryData.Projection.attr('Name')
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    localization: _emberData['default'].belongsTo('ember-flexberry-dummy-localization', { inverse: null, async: false }),
    suggestionType: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', { inverse: 'localizedTypes', async: false }),
    validations: {
      name: { presence: true },
      localization: { presence: true },
      suggestionType: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-localized-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Name'),
      localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
    model.defineProjection('LocalizedSuggestionTypeE', 'ember-flexberry-dummy-localized-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Name'),
      localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      suggestionType: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', '', {})
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-suggestion-file', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    order: _emberData['default'].attr('number'),
    file: _emberData['default'].attr('file'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', { inverse: 'files', async: false }),
    validations: {
      suggestion: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-suggestion-file', {
      order: _emberFlexberryData.Projection.attr('Order'),
      file: _emberFlexberryData.Projection.attr('File')
    });
    model.defineProjection('SuggestionFileE', 'ember-flexberry-dummy-suggestion-file', {
      order: _emberFlexberryData.Projection.attr('Order'),
      file: _emberFlexberryData.Projection.attr('File'),
      suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', '', {})
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-suggestion-type', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    moderated: _emberData['default'].attr('boolean'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    parent: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', { inverse: null, async: false }),
    localizedTypes: _emberData['default'].hasMany('ember-flexberry-dummy-localized-suggestion-type', { inverse: 'suggestionType', async: false }),
    validations: {
      name: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Name'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
        name: _emberFlexberryData.Projection.attr('Name')
      }),
      localizedTypes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-localized-suggestion-type', 'Localized types', {
        name: _emberFlexberryData.Projection.attr('Name'),
        localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
    model.defineProjection('SuggestionTypeE', 'ember-flexberry-dummy-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Name'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      localizedTypes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-localized-suggestion-type', 'Localized types', {
        name: _emberFlexberryData.Projection.attr('Name'),
        localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' }),
        suggestionType: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', '', {})
      })
    });
    model.defineProjection('SuggestionTypeL', 'ember-flexberry-dummy-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Name'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-suggestion', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    address: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    type: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', { inverse: null, async: false }),
    editor1: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', { inverse: null, async: false }),
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', { inverse: null, async: false }),
    userVotes: _emberData['default'].hasMany('ember-flexberry-dummy-vote', { inverse: 'suggestion', async: false }),
    files: _emberData['default'].hasMany('ember-flexberry-dummy-suggestion-file', { inverse: 'suggestion', async: false }),
    comments: _emberData['default'].hasMany('ember-flexberry-dummy-comment', { inverse: 'suggestion', async: false }),
    validations: {
      type: { presence: true },
      editor1: { presence: true },
      author: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-suggestion', {
      address: _emberFlexberryData.Projection.attr('Address'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
        name: _emberFlexberryData.Projection.attr('Name')
      }),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name')
      }),
      files: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-suggestion-file', 'Files', {
        order: _emberFlexberryData.Projection.attr('Order'),
        file: _emberFlexberryData.Projection.attr('File')
      }),
      comments: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment', 'Comments', {
        text: _emberFlexberryData.Projection.attr('Text'),
        votes: _emberFlexberryData.Projection.attr('Votes'),
        moderated: _emberFlexberryData.Projection.attr('Moderated'),
        author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' }),
        userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment-vote', 'User votes', {
          voteType: _emberFlexberryData.Projection.attr('Vote type'),
          applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
            name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
          }, { displayMemberPath: 'name' })
        })
      }),
      userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-vote', 'User votes', {
        voteType: _emberFlexberryData.Projection.attr('Vote type'),
        applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
    model.defineProjection('SuggestionE', 'ember-flexberry-dummy-suggestion', {
      address: _emberFlexberryData.Projection.attr('Address'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor1', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }),
      createTime: _emberFlexberryData.Projection.attr('', { hidden: true }),
      creator: _emberFlexberryData.Projection.attr('', { hidden: true }),
      editTime: _emberFlexberryData.Projection.attr('', { hidden: true }),
      editor: _emberFlexberryData.Projection.attr('', { hidden: true }),
      files: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-suggestion-file', 'Files', {
        order: _emberFlexberryData.Projection.attr('Order'),
        file: _emberFlexberryData.Projection.attr('File'),
        suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', '', {})
      }),
      userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-vote', 'User votes', {
        voteType: _emberFlexberryData.Projection.attr('Vote type'),
        applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' }),
        suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', '', {})
      }),
      comments: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment', 'Comments', {
        text: _emberFlexberryData.Projection.attr('Text'),
        votes: _emberFlexberryData.Projection.attr('Votes'),
        moderated: _emberFlexberryData.Projection.attr('Moderated'),
        author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
    model.defineProjection('SuggestionL', 'ember-flexberry-dummy-suggestion', {
      address: _emberFlexberryData.Projection.attr('Address'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', '', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', '', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', '', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      createTime: _emberFlexberryData.Projection.attr('', { hidden: true }),
      creator: _emberFlexberryData.Projection.attr('', { hidden: true }),
      editTime: _emberFlexberryData.Projection.attr('', { hidden: true }),
      editor: _emberFlexberryData.Projection.attr('', { hidden: true })
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-test-poly-base', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var Model = _ember['default'].Mixin.create({
    pole: _emberData['default'].attr('string'),
    validations: {}

  });
  exports.Model = Model;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-test-poly-child', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    childPole: _emberData['default'].attr('number'),
    validations: {}

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('TestPolyChildEdit', 'ember-flexberry-dummy-test-poly-child', {
      pole: _emberFlexberryData.Projection.attr(''),
      childPole: _emberFlexberryData.Projection.attr('')
    });
    model.defineProjection('TestPolyChildList', 'ember-flexberry-dummy-test-poly-child', {
      pole: _emberFlexberryData.Projection.attr('Pole'),
      childPole: _emberFlexberryData.Projection.attr('ChildPole')
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-test-poly', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    selfPole: _emberData['default'].attr('string'),
    relation: _emberData['default'].belongsTo('ember-flexberry-dummy-test-poly-base', { inverse: null, async: false, polymorphic: true }),
    validations: {
      relation: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('TestPolyEdit', 'ember-flexberry-dummy-test-poly', {
      selfPole: _emberFlexberryData.Projection.attr('Self Pole'),
      relation: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-test-poly-base', 'Relation', {
        pole: _emberFlexberryData.Projection.attr('Pole', { hidden: true })
      }, { displayMemberPath: 'pole' })
    });
    model.defineProjection('TestPolyList', 'ember-flexberry-dummy-test-poly', {
      selfPole: _emberFlexberryData.Projection.attr('SelfPole'),
      relation: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-test-poly-base', '', {
        pole: _emberFlexberryData.Projection.attr('Pole', { hidden: true })
      }, { displayMemberPath: 'pole' })
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/models/ember-flexberry-dummy-vote', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    voteType: _emberData['default'].attr('ember-flexberry-dummy-vote-type'),
    createTime: _emberData['default'].attr('date'),
    creator: _emberData['default'].attr('string'),
    editTime: _emberData['default'].attr('date'),
    editor: _emberData['default'].attr('string'),
    applicationUser: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', { inverse: null, async: false }),
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', { inverse: 'userVotes', async: false }),
    validations: {
      applicationUser: { presence: true },
      suggestion: { presence: true }
    }

  });
  exports.Model = Model;
  var defineProjections = function defineProjections(model) {
    model.defineProjection('AuditView', 'ember-flexberry-dummy-vote', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
    model.defineProjection('VoteE', 'ember-flexberry-dummy-vote', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', '', {})
    });
  };
  exports.defineProjections = defineProjections;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-application-user', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {},
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-comment-vote', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      applicationUser: { serialize: 'odata-id', deserialize: 'records' },
      comment: { serialize: 'odata-id', deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-comment', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      author: { serialize: 'odata-id', deserialize: 'records' },
      suggestion: { serialize: 'odata-id', deserialize: 'records' },
      userVotes: { serialize: false, deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-localization', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {},
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      localization: { serialize: 'odata-id', deserialize: 'records' },
      suggestionType: { serialize: 'odata-id', deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-suggestion-file', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      suggestion: { serialize: 'odata-id', deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-suggestion-type', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      parent: { serialize: 'odata-id', deserialize: 'records' },
      localizedTypes: { serialize: false, deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-suggestion', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      type: { serialize: 'odata-id', deserialize: 'records' },
      editor1: { serialize: 'odata-id', deserialize: 'records' },
      author: { serialize: 'odata-id', deserialize: 'records' },
      userVotes: { serialize: false, deserialize: 'records' },
      files: { serialize: false, deserialize: 'records' },
      comments: { serialize: false, deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-test-poly-base', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {},
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-test-poly-child', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {},
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-test-poly', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      relation: { serialize: 'odata-id', deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/mixins/regenerated/serializers/ember-flexberry-dummy-vote', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    attrs: {
      applicationUser: { serialize: 'odata-id', deserialize: 'records' },
      suggestion: { serialize: 'odata-id', deserialize: 'records' }
    },
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
  exports.Serializer = Serializer;
});
define('dummy/models/base', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, {});
});
define('dummy/models/custom-inflector-rules', ['exports', 'ember-inflector'], function (exports, _emberInflector) {

  var inflector = _emberInflector['default'].inflector;

  inflector.irregular('entity', 'entitys');
  inflector.irregular('field', 'fields');

  inflector.irregular('access', 'accesss');
  inflector.irregular('agent', 'agents');
  inflector.irregular('filter', 'filters');
  inflector.irregular('impersonalization', 'impersonalizations');
  inflector.irregular('attribute', 'attributes');
  inflector.irregular('group', 'groups');
  inflector.irregular('operation', 'operations');
  inflector.irregular('role', 'roles');
  inflector.irregular('view', 'views');
  inflector.irregular('permition', 'permitions');
  inflector.irregular('session', 'sessions');
  inflector.irregular('subject', 'subjects');

  inflector.irregular('user', 'users');
  inflector.irregular('vote', 'votes');
  inflector.irregular('comment', 'comments');
  inflector.irregular('localization', 'localizations');
  inflector.irregular('file', 'files');
  inflector.irregular('type', 'types');
  inflector.irregular('suggestion', 'suggestions');
  inflector.irregular('base', 'bases');
  inflector.irregular('child', 'childs');
  inflector.irregular('poly', 'polys');
  inflector.irregular('vote', 'votes');

  exports['default'] = {};
});
define('dummy/models/ember-flexberry-dummy-application-user', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-application-user', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyApplicationUser, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyApplicationUser.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyApplicationUser.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-comment-vote', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-comment-vote', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyCommentVote, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyCommentVote.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyCommentVote.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-comment', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-comment', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyComment, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyComment.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyComment.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-localization', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-localization', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyLocalization, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyLocalization.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyLocalization.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-localized-suggestion-type', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyLocalizedSuggestionType, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyLocalizedSuggestionType.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyLocalizedSuggestionType.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion-file', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-suggestion-file', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestionFile, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestionFile.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestionFile.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion-type', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-suggestion-type', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestionType, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestionType.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestionType.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-suggestion', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestion, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestion.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummySuggestion.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-test-poly-base', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-test-poly-base', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPolyBase, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPolyBase.Model, {});

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-test-poly-child', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-test-poly-child', 'dummy/models/ember-flexberry-dummy-test-poly-base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPolyChild, _dummyModelsEmberFlexberryDummyTestPolyBase) {
  var Model = _dummyModelsEmberFlexberryDummyTestPolyBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPolyChild.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPolyChild.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-test-poly', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-test-poly', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPoly, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPoly.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyTestPoly.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-vote', ['exports', 'dummy/mixins/regenerated/models/ember-flexberry-dummy-vote', 'dummy/models/base'], function (exports, _dummyMixinsRegeneratedModelsEmberFlexberryDummyVote, _dummyModelsBase) {
  var Model = _dummyModelsBase['default'].extend(_dummyMixinsRegeneratedModelsEmberFlexberryDummyVote.Model, {});
  (0, _dummyMixinsRegeneratedModelsEmberFlexberryDummyVote.defineProjections)(Model);
  exports['default'] = Model;
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-access'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityAccess) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityAccess['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityFilter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityFilter['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityImpersonalization) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityImpersonalization['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkAttribute) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkAttribute['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkOperation['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkRole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkRole['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkView) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityLinkView['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityPermition) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecurityPermition['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject', ['exports', 'ember-flexberry-security/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject'], function (exports, _emberFlexberrySecurityModelsICSSoftSTORMNETSecuritySubject) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsICSSoftSTORMNETSecuritySubject['default'];
    }
  });
});
define('dummy/models/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('dummy/models/model', ['exports', 'ember-flexberry-data/models/model'], function (exports, _emberFlexberryDataModelsModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsModel['default'];
    }
  });
});
define('dummy/models/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/models/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('dummy/models/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/models/new-platform-flexberry-services-lock'], function (exports, _emberFlexberryModelsNewPlatformFlexberryServicesLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryServicesLock['default'];
    }
  });
});
define('dummy/models/offline-model', ['exports', 'ember-flexberry-data/models/offline-model'], function (exports, _emberFlexberryDataModelsOfflineModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsOfflineModel['default'];
    }
  });
});
define('dummy/models/user-login', ['exports', 'ember-flexberry-security/models/user-login'], function (exports, _emberFlexberrySecurityModelsUserLogin) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityModelsUserLogin['default'];
    }
  });
});
define('dummy/resolver', ['exports', 'ember-flexberry/resolver'], function (exports, _emberFlexberryResolver) {
  exports['default'] = _emberFlexberryResolver['default'];
});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _dummyConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e/new' });

    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l');
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/:id' });
    this.route('i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.new', { path: 'i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new' });

    this.route('ember-flexberry-dummy-application-user-list');
    this.route('ember-flexberry-dummy-application-user-edit', { path: 'ember-flexberry-dummy-application-user-edit/:id' });
    this.route('ember-flexberry-dummy-application-user-edit.new', { path: 'ember-flexberry-dummy-application-user-edit/new' });
    this.route('ember-flexberry-dummy-localization-list');
    this.route('ember-flexberry-dummy-localization-edit', { path: 'ember-flexberry-dummy-localization-edit/:id' });
    this.route('ember-flexberry-dummy-localization-edit.new', { path: 'ember-flexberry-dummy-localization-edit/new' });
    this.route('ember-flexberry-dummy-suggestion-list');
    this.route('ember-flexberry-dummy-suggestion-edit', { path: 'ember-flexberry-dummy-suggestion-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-edit.new', { path: 'ember-flexberry-dummy-suggestion-edit/new' });
    this.route('ember-flexberry-dummy-suggestion-type-list');
    this.route('ember-flexberry-dummy-suggestion-type-edit', { path: 'ember-flexberry-dummy-suggestion-type-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-type-edit.new', { path: 'ember-flexberry-dummy-suggestion-type-edit/new' });
    this.route('ember-flexberry-dummy-test-poly-child-list');
    this.route('ember-flexberry-dummy-test-poly-child-edit', { path: 'ember-flexberry-dummy-test-poly-child-edit/:id' });
    this.route('ember-flexberry-dummy-test-poly-child-edit.new', { path: 'ember-flexberry-dummy-test-poly-child-edit/new' });
    this.route('ember-flexberry-dummy-test-poly-list');
    this.route('ember-flexberry-dummy-test-poly-edit', { path: 'ember-flexberry-dummy-test-poly-edit/:id' });
    this.route('ember-flexberry-dummy-test-poly-edit.new', { path: 'ember-flexberry-dummy-test-poly-edit/new' });
    this.route('login');
  });

  exports['default'] = Router;
});
define('dummy/routes/application', ['exports', 'ember', 'dummy/config/environment', 'ember-i18n', 'ember-flexberry/mixins/modal-application-route'], function (exports, _ember, _dummyConfigEnvironment, _emberI18n, _emberFlexberryMixinsModalApplicationRoute) {
  exports['default'] = _ember['default'].Route.extend(_emberFlexberryMixinsModalApplicationRoute['default'], {
    /**
    */
    activate: function activate() {
      var _this = this;
      var controller = _this.controllerFor('application');
      if (!controller.get('login')) {
        _ember['default'].$.ajax({
          type: 'GET',
          xhrFields: { withCredentials: true },
          url: _dummyConfigEnvironment['default'].APP.backendUrls.api + '/GetAuthenticatedUser()',
          success: function success(result) {
            if (result.value) {
              controller.set('login', result.value);
            }
          }
        });
      }
    },

    actions: {
      /**
      */
      willTransition: function willTransition(transition) {
        var _this = this;
        var login = _this.controller.get('login');
        if (!login && transition.targetName !== 'login' && transition.targetName !== 'index') {
          transition.abort();
          _ember['default'].$.ajax({
            type: 'GET',
            xhrFields: { withCredentials: true },
            url: _dummyConfigEnvironment['default'].APP.backendUrls.api + '/GetAuthenticatedUser()',
            success: function success(result) {
              if (result.value) {
                _this.controller.set('login', result.value);
                transition.retry();
              } else {
                _this.controller.set('errorMessage', (0, _emberI18n.translationMacro)('forms.login.errors.login-please'));
                _this.transitionTo('login');
              }
            },
            error: function error() {
              _this.controller.set('errorMessage', (0, _emberI18n.translationMacro)('forms.login.errors.unknown-error'));
              _this.transitionTo('index');
            }
          });
        }
      }
    }
  });
});
define('dummy/routes/edit-form', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesEditForm['default'];
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'ApplicationUserE',
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'ApplicationUserE',
    modelName: 'ember-flexberry-dummy-application-user',
    templateName: 'ember-flexberry-dummy-application-user-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
    */
    modelProjection: 'ApplicationUserL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-application-user',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { EmberFlexberryDummyApplicationUserList: {} }
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'CommentE',
    modelName: 'ember-flexberry-dummy-comment'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'CommentE',
    modelName: 'ember-flexberry-dummy-comment',
    templateName: 'ember-flexberry-dummy-comment-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'LocalizationE',
    modelName: 'ember-flexberry-dummy-localization'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'LocalizationE',
    modelName: 'ember-flexberry-dummy-localization',
    templateName: 'ember-flexberry-dummy-localization-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationL'
    */
    modelProjection: 'LocalizationL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
    */
    modelName: 'ember-flexberry-dummy-localization',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { EmberFlexberryDummyLocalizationList: {} }
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'SuggestionE',
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'SuggestionE',
    modelName: 'ember-flexberry-dummy-suggestion',
    templateName: 'ember-flexberry-dummy-suggestion-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
    */
    modelProjection: 'SuggestionL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { EmberFlexberryDummySuggestionList: {} }
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'SuggestionTypeE',
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'SuggestionTypeE',
    modelName: 'ember-flexberry-dummy-suggestion-type',
    templateName: 'ember-flexberry-dummy-suggestion-type-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { EmberFlexberryDummySuggestionTypeList: {} }
  });
});
define('dummy/routes/ember-flexberry-dummy-test-poly-child-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'TestPolyChildEdit',
    modelName: 'ember-flexberry-dummy-test-poly-child'
  });
});
define('dummy/routes/ember-flexberry-dummy-test-poly-child-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'TestPolyChildEdit',
    modelName: 'ember-flexberry-dummy-test-poly-child',
    templateName: 'ember-flexberry-dummy-test-poly-child-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-test-poly-child-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'TestPolyChildList'
    */
    modelProjection: 'TestPolyChildList',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-test-poly-child'
    */
    modelName: 'ember-flexberry-dummy-test-poly-child',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { EmberFlexberryDummyTestPolyChildList: {} }
  });
});
define('dummy/routes/ember-flexberry-dummy-test-poly-edit', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    modelProjection: 'TestPolyEdit',
    modelName: 'ember-flexberry-dummy-test-poly'
  });
});
define('dummy/routes/ember-flexberry-dummy-test-poly-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'TestPolyEdit',
    modelName: 'ember-flexberry-dummy-test-poly',
    templateName: 'ember-flexberry-dummy-test-poly-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-test-poly-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'TestPolyList'
    */
    modelProjection: 'TestPolyList',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-test-poly'
    */
    modelName: 'ember-flexberry-dummy-test-poly',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { EmberFlexberryDummyTestPolyList: {} }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETBusinessAuditObjectsAuditEntityE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETBusinessAuditObjectsAuditEntityE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETBusinessAuditObjectsAuditEntityL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETBusinessAuditObjectsAuditEntityL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityAccessE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityAccessE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityAccessENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityAccessENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityAccessL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityAccessL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityClassE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityClassE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityClassENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityClassENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityClassL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityClassL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityGroupE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityGroupE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityGroupENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityGroupENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityGroupL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityGroupL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkGroupE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkGroupE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkGroupENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkGroupENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkGroupL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkGroupL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkRoleE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkRoleE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkRoleENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkRoleENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkRoleL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityLinkRoleL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityOperationE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityOperationE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityOperationENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityOperationENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityOperationL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityOperationL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityPermitionE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityPermitionE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityPermitionENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityPermitionENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityPermitionL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityPermitionL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityRoleE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityRoleE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityRoleENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityRoleENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityRoleL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityRoleL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityUserE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityUserE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityUserENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityUserENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityUserL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityUserL['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityViewE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityViewE['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e/new'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityViewENew) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityViewENew['default'];
    }
  });
});
define('dummy/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l', ['exports', 'ember-flexberry-security/routes/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l'], function (exports, _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityViewL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityRoutesICSSoftSTORMNETSecurityViewL['default'];
    }
  });
});
define('dummy/routes/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('dummy/routes/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('dummy/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
    */
    controllerName: 'application'
  });
});
define('dummy/routes/list-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesListForm['default'];
    }
  });
});
define('dummy/routes/login', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
    */
    controllerName: 'application'
  });
});
define('dummy/routes/new-platform-flexberry-services-lock-edit', ['exports', 'ember-flexberry/routes/new-platform-flexberry-services-lock-edit'], function (exports, _emberFlexberryRoutesNewPlatformFlexberryServicesLockEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesNewPlatformFlexberryServicesLockEdit['default'];
    }
  });
});
define('dummy/routes/new-platform-flexberry-services-lock-list', ['exports', 'ember-flexberry/routes/new-platform-flexberry-services-lock-list'], function (exports, _emberFlexberryRoutesNewPlatformFlexberryServicesLockList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesNewPlatformFlexberryServicesLockList['default'];
    }
  });
});
define('dummy/serializers/application-offline', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Offline.extend(_emberData['default'].EmbeddedRecordsMixin, {});
});
define('dummy/serializers/application', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Odata.extend({});
});
define('dummy/serializers/base', ['exports', 'ember-flexberry-data/serializers/base'], function (exports, _emberFlexberryDataSerializersBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersBase['default'];
    }
  });
});
define('dummy/serializers/ember-flexberry-dummy-application-user-offline', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Offline.extend(_emberData['default'].EmbeddedRecordsMixin, {});
});
define('dummy/serializers/ember-flexberry-dummy-application-user', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-application-user', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyApplicationUser, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyApplicationUser.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-comment-vote', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-comment-vote', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyCommentVote, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyCommentVote.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-comment', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-comment', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyComment, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyComment.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-localization', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-localization', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyLocalization, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyLocalization.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-localized-suggestion-type', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyLocalizedSuggestionType, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyLocalizedSuggestionType.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-suggestion-file', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-suggestion-file', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummySuggestionFile, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummySuggestionFile.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-suggestion-type', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-suggestion-type', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummySuggestionType, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummySuggestionType.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-suggestion', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-suggestion', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummySuggestion, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummySuggestion.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-test-poly-base', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-test-poly-base', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyTestPolyBase, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyTestPolyBase.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-test-poly-child', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-test-poly-child', 'dummy/serializers/ember-flexberry-dummy-test-poly-base'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyTestPolyChild, _dummySerializersEmberFlexberryDummyTestPolyBase) {
  exports['default'] = _dummySerializersEmberFlexberryDummyTestPolyBase['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyTestPolyChild.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-test-poly', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-test-poly', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyTestPoly, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyTestPoly.Serializer, {});
});
define('dummy/serializers/ember-flexberry-dummy-vote', ['exports', 'dummy/mixins/regenerated/serializers/ember-flexberry-dummy-vote', 'dummy/serializers/application'], function (exports, _dummyMixinsRegeneratedSerializersEmberFlexberryDummyVote, _dummySerializersApplication) {
  exports['default'] = _dummySerializersApplication['default'].extend(_dummyMixinsRegeneratedSerializersEmberFlexberryDummyVote.Serializer, {});
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-access'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityAccess) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityAccess['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-filter'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityFilter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityFilter['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityImpersonalization) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityImpersonalization['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkAttribute) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkAttribute['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkOperation['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkRole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkRole['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkView) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityLinkView['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityPermition) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecurityPermition['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject', ['exports', 'ember-flexberry-security/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-subject'], function (exports, _emberFlexberrySecuritySerializersICSSoftSTORMNETSecuritySubject) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecuritySerializersICSSoftSTORMNETSecuritySubject['default'];
    }
  });
});
define('dummy/serializers/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('dummy/serializers/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('dummy/serializers/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-services-lock'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryServicesLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryServicesLock['default'];
    }
  });
});
define('dummy/serializers/odata', ['exports', 'ember-flexberry-data/serializers/odata'], function (exports, _emberFlexberryDataSerializersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOdata['default'];
    }
  });
});
define('dummy/serializers/offline', ['exports', 'ember-flexberry-data/serializers/offline'], function (exports, _emberFlexberryDataSerializersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOffline['default'];
    }
  });
});
define('dummy/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('dummy/services/cols-config-menu', ['exports', 'ember-flexberry/services/cols-config-menu', 'dummy/config/environment'], function (exports, _emberFlexberryServicesColsConfigMenu, _dummyConfigEnvironment) {
  var environment = Ember.get(_dummyConfigEnvironment['default'], 'environment');
  _emberFlexberryServicesColsConfigMenu['default'].reopen({
    environment: environment
  });

  exports['default'] = _emberFlexberryServicesColsConfigMenu['default'];

  // export { default } from 'ember-flexberry/services/cols-config-menu';
});
define('dummy/services/detail-interaction', ['exports', 'ember-flexberry/services/detail-interaction'], function (exports, _emberFlexberryServicesDetailInteraction) {
  exports['default'] = _emberFlexberryServicesDetailInteraction['default'];
});
define('dummy/services/device', ['exports', 'ember-flexberry/services/device'], function (exports, _emberFlexberryServicesDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesDevice['default'];
    }
  });
});
define('dummy/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('dummy/services/log', ['exports', 'ember', 'ember-flexberry/services/log', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesLog, _dummyConfigEnvironment) {

  var enabled = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.log.enabled');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      enabled: enabled
    });
  }

  exports['default'] = _emberFlexberryServicesLog['default'];
});
define('dummy/services/moment', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/services/moment'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentServicesMoment) {
  exports['default'] = _emberMomentServicesMoment['default'].extend({
    defaultFormat: _ember['default'].get(_dummyConfigEnvironment['default'], 'moment.outputFormat')
  });
});
define('dummy/services/objectlistview-events', ['exports', 'ember-flexberry/services/objectlistview-events'], function (exports, _emberFlexberryServicesObjectlistviewEvents) {
  exports['default'] = _emberFlexberryServicesObjectlistviewEvents['default'];
});
define('dummy/services/offline-globals', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Offline.GlobalsService.extend({
    isSyncDownWhenOnlineEnabled: true
  });
});
define('dummy/services/store', ['exports', 'ember-flexberry-data', 'dummy/mixins/offline-schema', 'ember-flexberry-security/mixins/offline-schema'], function (exports, _emberFlexberryData, _dummyMixinsOfflineSchema, _emberFlexberrySecurityMixinsOfflineSchema) {
  exports['default'] = _emberFlexberryData.Offline.Store.reopen(_emberFlexberryData.Projection.StoreMixin, _dummyMixinsOfflineSchema['default'], _emberFlexberrySecurityMixinsOfflineSchema['default']);
});
define('dummy/services/syncer', ['exports', 'ember-flexberry-data/services/syncer'], function (exports, _emberFlexberryDataServicesSyncer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesSyncer['default'];
    }
  });
});
define('dummy/services/user-settings', ['exports', 'ember', 'ember-flexberry/services/user-settings', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesUserSettings, _dummyConfigEnvironment) {

  var enabled = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.useUserSettingsService');
  var appName = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.name');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesUserSettings['default'].reopen({
      isUserSettingsServiceEnabled: enabled,
      appName: appName
    });
  }

  exports['default'] = _emberFlexberryServicesUserSettings['default'];
});
define('dummy/services/user', ['exports', 'ember-flexberry-data/services/user'], function (exports, _emberFlexberryDataServicesUser) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesUser['default'];
    }
  });
});
define('dummy/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define("dummy/templates/application-with-submenu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application-with-submenu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "brand");
          dom.setAttribute(el2, "href", "#");
          var el3 = dom.createTextNode("Flexberry Ember Demo");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [5, 21], [5, 28]]]]], [], ["loc", [null, [5, 2], [5, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application-with-submenu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example-with-submenu");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui fixed main menu");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "launch icon item");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "sidebar icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "right menu");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui main container segment flexberry-content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui close left rail");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ui sticky transition visible");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "flexberry-submenu ui large violet pointing secondary vertical following fluid menu");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var element1 = dom.childAt(element0, [1, 1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        morphs[4] = dom.createMorphAt(element2, 5, 5);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical menu"], 0, null, ["loc", [null, [1, 0], [6, 15]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [11, 11], [11, 39]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [20, 31], [20, 38]]]]], [], ["loc", [null, [20, 12], [20, 40]]]], ["content", "outlet", ["loc", [null, [24, 6], [24, 16]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [25, 6], [25, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "brand");
          dom.setAttribute(el2, "href", "#");
          var el3 = dom.createTextNode("Flexberry Ember Security");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [5, 21], [5, 28]]]]], [], ["loc", [null, [5, 2], [5, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui top attached");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui attached menu");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ui container");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "title", "Menu");
        dom.setAttribute(el6, "class", "launch icon item");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "sidebar icon");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "right menu");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "style", "margin:0.65em;");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "style", "margin:0.5em;");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "class", "ui basic button mini");
        dom.setAttribute(el7, "style", "margin:0.5em;");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-content ui attached segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui main container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "stackable grid container");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui vertical footer segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui text menu");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "brand item");
        dom.setAttribute(el5, "href", "#");
        var el6 = dom.createTextNode("Flexberry PLATFORM");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "right menu");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var element1 = dom.childAt(element0, [1, 1, 1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element3, [5]);
        var element6 = dom.childAt(element0, [3, 1, 1]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[3] = dom.createAttrMorph(element4, 'class');
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical menu", "dimPage", false], 0, null, ["loc", [null, [1, 0], [6, 15]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [12, 13], [12, 41]]]], ["inline", "ui-checkbox", [], ["checked", ["subexpr", "@mut", [["get", "onlineStatus", ["loc", [null, [16, 24], [16, 36]]]]], [], []], "label", ["subexpr", "if", [["get", "onlineStatus", ["loc", [null, [17, 26], [17, 38]]]], "Online", "Offline"], [], ["loc", [null, [17, 22], [17, 58]]]], "class", "toggle"], ["loc", [null, [15, 14], [19, 16]]]], ["attribute", "class", ["concat", ["ui basic button mini ", ["subexpr", "unless", [["subexpr", "and", [["get", "onlineStatus", ["loc", [null, [21, 62], [21, 74]]]], ["subexpr", "not", [["get", "synchronizes", ["loc", [null, [21, 80], [21, 92]]]]], [], ["loc", [null, [21, 75], [21, 93]]]]], [], ["loc", [null, [21, 57], [21, 94]]]], "disabled"], [], ["loc", [null, [21, 48], [21, 107]]]], " ", ["subexpr", "if", [["get", "synchronizes", ["loc", [null, [21, 113], [21, 125]]]], "loading"], [], ["loc", [null, [21, 108], [21, 137]]]]]]], ["element", "action", ["syncUp"], [], ["loc", [null, [21, 139], [21, 158]]]], ["inline", "t", ["forms.application.sync-up"], [], ["loc", [null, [22, 14], [22, 47]]]], ["element", "action", [["subexpr", "if", [["get", "login", ["loc", [null, [24, 62], [24, 67]]]], "logout", "goToLoginForm"], [], ["loc", [null, [24, 58], [24, 93]]]]], [], ["loc", [null, [24, 49], [24, 95]]]], ["inline", "t", [["subexpr", "if", [["get", "login", ["loc", [null, [25, 22], [25, 27]]]], "forms.login.logout", "forms.login.caption"], [], ["loc", [null, [25, 18], [25, 71]]]]], [], ["loc", [null, [25, 14], [25, 73]]]], ["content", "outlet", ["loc", [null, [34, 12], [34, 22]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [35, 12], [35, 30]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "colsconfig-dialog-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "close", "sortByColumnsConfig"], ["loc", [null, [1, 0], [4, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/colsconfig-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/colsconfig-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [9, 2], [9, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/colsconfig-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", "small", "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "colsConfigHidden", "false");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui icon tiny button");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron up icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui icon tiny button no-margin");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron down icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("select");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "0");
          var el5 = dom.createTextNode("-");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "1");
          var el5 = dom.createTextNode("▲");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "-1");
          var el5 = dom.createTextNode("▼");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "size", "2");
          dom.setAttribute(el4, "type", "input");
          dom.setAttribute(el4, "style", "");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "size", "2");
          dom.setAttribute(el4, "class", "columnWidth");
          dom.setAttribute(el4, "type", "input");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [0, 0]);
          var element2 = dom.childAt(element0, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [2]);
          var element5 = dom.childAt(element0, [2]);
          var element6 = dom.childAt(element0, [3, 0]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element6, [3]);
          var element9 = dom.childAt(element6, [5]);
          var element10 = dom.childAt(element0, [4]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element0, [5]);
          var element14 = dom.childAt(element13, [1]);
          var element15 = dom.childAt(element14, [1]);
          var morphs = new Array(32);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'propName');
          morphs[2] = dom.createAttrMorph(element1, 'id');
          morphs[3] = dom.createAttrMorph(element1, 'class');
          morphs[4] = dom.createElementMorph(element1);
          morphs[5] = dom.createAttrMorph(element2, 'class');
          morphs[6] = dom.createAttrMorph(element3, 'id');
          morphs[7] = dom.createElementMorph(element3);
          morphs[8] = dom.createAttrMorph(element4, 'id');
          morphs[9] = dom.createElementMorph(element4);
          morphs[10] = dom.createAttrMorph(element5, 'class');
          morphs[11] = dom.createMorphAt(element5, 0, 0);
          morphs[12] = dom.createAttrMorph(element6, 'class');
          morphs[13] = dom.createAttrMorph(element6, 'id');
          morphs[14] = dom.createAttrMorph(element6, 'name');
          morphs[15] = dom.createElementMorph(element6);
          morphs[16] = dom.createAttrMorph(element7, 'selected');
          morphs[17] = dom.createAttrMorph(element8, 'selected');
          morphs[18] = dom.createAttrMorph(element9, 'selected');
          morphs[19] = dom.createAttrMorph(element10, 'class');
          morphs[20] = dom.createAttrMorph(element11, 'class');
          morphs[21] = dom.createAttrMorph(element12, 'id');
          morphs[22] = dom.createAttrMorph(element12, 'class');
          morphs[23] = dom.createAttrMorph(element12, 'disabled');
          morphs[24] = dom.createAttrMorph(element12, 'value');
          morphs[25] = dom.createAttrMorph(element12, 'prevValue');
          morphs[26] = dom.createElementMorph(element12);
          morphs[27] = dom.createAttrMorph(element13, 'class');
          morphs[28] = dom.createAttrMorph(element14, 'class');
          morphs[29] = dom.createAttrMorph(element15, 'id');
          morphs[30] = dom.createAttrMorph(element15, 'value');
          morphs[31] = dom.createElementMorph(element15);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "colDesc.trId", ["loc", [null, [17, 20], [17, 32]]]]]]], ["attribute", "propName", ["concat", [["get", "colDesc.propName", ["loc", [null, [17, 48], [17, 64]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.hideId", ["loc", [null, [18, 26], [18, 40]]]]]]], ["attribute", "class", ["concat", ["large ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [18, 62], [18, 74]]]], "hide", "unhide"], [], ["loc", [null, [18, 57], [18, 92]]]], " icon"]]], ["element", "action", ["invertVisibility", ["get", "n", ["loc", [null, [18, 150], [18, 151]]]]], [], ["loc", [null, [18, 122], [18, 153]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [19, 29], [19, 41]]]], "disabled", ""], [], ["loc", [null, [19, 24], [19, 57]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.rowUpId", ["loc", [null, [20, 49], [20, 64]]]]]]], ["element", "action", ["rowUp", ["get", "n", ["loc", [null, [20, 39], [20, 40]]]]], [], ["loc", [null, [20, 22], [20, 42]]]], ["attribute", "id", ["concat", [["get", "colDesc.rowDownId", ["loc", [null, [23, 53], [23, 70]]]]]]], ["element", "action", ["rowDown", ["get", "n", ["loc", [null, [23, 42], [23, 43]]]]], [], ["loc", [null, [23, 23], [23, 45]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [27, 29], [27, 41]]]], "disabled", ""], [], ["loc", [null, [27, 24], [27, 57]]]]]]], ["content", "colDesc.name", ["loc", [null, [27, 59], [27, 75]]]], ["attribute", "class", ["concat", ["ui compact dropdown selection icon button ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [29, 77], [29, 89]]]], "disabled", ""], [], ["loc", [null, [29, 72], [29, 105]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.sortOrderId", ["loc", [null, [29, 114], [29, 133]]]]]]], ["attribute", "name", ["concat", ["sortorder[", ["get", "colDesc.name", ["loc", [null, [29, 155], [29, 167]]]], "]"]]], ["element", "action", ["setSortOrder", ["get", "n", ["loc", [null, [29, 196], [29, 197]]]]], [], ["loc", [null, [29, 172], [29, 199]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderNot", ["loc", [null, [30, 36], [30, 56]]]]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderAsc", ["loc", [null, [31, 36], [31, 56]]]]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderDesc", ["loc", [null, [32, 36], [32, 57]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [35, 29], [35, 41]]]], "disabled", ""], [], ["loc", [null, [35, 24], [35, 57]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [36, 40], [36, 52]]]], "disabled", ""], [], ["loc", [null, [36, 35], [36, 68]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.sortPriorityId", ["loc", [null, [37, 29], [37, 51]]]]]]], ["attribute", "class", ["concat", ["sortPriority ", ["subexpr", "if", [["get", "colDesc.sortOrder", ["loc", [null, [37, 89], [37, 106]]]], "", "hidden"], [], ["loc", [null, [37, 84], [37, 120]]]]]]], ["attribute", "disabled", ["concat", [["subexpr", "if", [["get", "colDesc.sortOrder", ["loc", [null, [37, 137], [37, 154]]]], "", "disabled"], [], ["loc", [null, [37, 132], [37, 170]]]]]]], ["attribute", "value", ["concat", [["get", "colDesc.sortPriority", ["loc", [null, [37, 181], [37, 201]]]]]]], ["attribute", "prevValue", ["concat", [["get", "colDesc.sortPriority", ["loc", [null, [38, 76], [38, 96]]]]]]], ["element", "action", ["setSortPriority", ["get", "n", ["loc", [null, [38, 45], [38, 46]]]]], ["on", "focusOut"], ["loc", [null, [38, 18], [38, 62]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [41, 29], [41, 41]]]], "disabled", ""], [], ["loc", [null, [41, 24], [41, 57]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["subexpr", "or", [["get", "colDesc.hide", ["loc", [null, [42, 42], [42, 54]]]], ["subexpr", "not", [["get", "saveColWidthState", ["loc", [null, [42, 60], [42, 77]]]]], [], ["loc", [null, [42, 55], [42, 78]]]]], [], ["loc", [null, [42, 38], [42, 79]]]], "disabled", ""], [], ["loc", [null, [42, 33], [42, 95]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.columnWidthId", ["loc", [null, [43, 25], [43, 46]]]]]]], ["attribute", "value", ["concat", [["get", "colDesc.columnWidth", ["loc", [null, [43, 88], [43, 107]]]]]]], ["element", "action", ["widthChanged"], ["on", "focusOut"], ["loc", [null, [43, 124], [43, 164]]]]],
        locals: ["colDesc", "n"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-colsconfig content");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "class", "ui unstackable fixed selectable celled table");
        var el3 = dom.createElement("thead");
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "show-columns");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large hide icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "columns-order");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large sort icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "sort-direction");
        var el6 = dom.createElement("nobr");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort content ascending icon");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort content descending icon");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "sort-priority");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large ordered list icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "column-width");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large text width icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        dom.setAttribute(el3, "id", "colsConfigtableRows");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tfoot");
        dom.setAttribute(el3, "class", "full-width");
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "colspan", "5");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ui action input");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "id", "columnConfigurtionSettingName");
        dom.setAttribute(el7, "type", "input");
        dom.setAttribute(el7, "name", "configName");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "id", "columnConfigurtionButtonSave");
        dom.setAttribute(el7, "class", "ui small button disabled");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "columnConfigurtionButtonUse");
        dom.setAttribute(el6, "class", "ui right floated button disabled");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element16 = dom.childAt(fragment, [0, 1]);
        var element17 = dom.childAt(element16, [0, 0]);
        var element18 = dom.childAt(element17, [0]);
        var element19 = dom.childAt(element17, [1, 0]);
        var element20 = dom.childAt(element17, [2]);
        var element21 = dom.childAt(element17, [3]);
        var element22 = dom.childAt(element17, [4]);
        var element23 = dom.childAt(element17, [5]);
        var element24 = dom.childAt(element16, [2, 0]);
        var element25 = dom.childAt(element24, [0]);
        var element26 = dom.childAt(element25, [1]);
        var element27 = dom.childAt(element26, [1]);
        var element28 = dom.childAt(element26, [3]);
        var element29 = dom.childAt(element25, [3]);
        var morphs = new Array(16);
        morphs[0] = dom.createAttrMorph(element18, 'title');
        morphs[1] = dom.createAttrMorph(element19, 'title');
        morphs[2] = dom.createAttrMorph(element20, 'title');
        morphs[3] = dom.createMorphAt(element20, 0, 0);
        morphs[4] = dom.createAttrMorph(element21, 'title');
        morphs[5] = dom.createAttrMorph(element22, 'title');
        morphs[6] = dom.createAttrMorph(element23, 'title');
        morphs[7] = dom.createMorphAt(dom.childAt(element16, [1]), 1, 1);
        morphs[8] = dom.createAttrMorph(element27, 'placeholder');
        morphs[9] = dom.createAttrMorph(element27, 'value');
        morphs[10] = dom.createElementMorph(element27);
        morphs[11] = dom.createElementMorph(element28);
        morphs[12] = dom.createMorphAt(element28, 1, 1);
        morphs[13] = dom.createElementMorph(element29);
        morphs[14] = dom.createMorphAt(element29, 0, 0);
        morphs[15] = dom.createMorphAt(dom.childAt(element24, [1]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.dont-show-columns"], [], ["loc", [null, [5, 43], [5, 105]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.columns-order"], [], ["loc", [null, [6, 71], [6, 129]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [7, 22], [7, 78]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [7, 80], [7, 136]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-direction"], [], ["loc", [null, [8, 45], [8, 104]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-priority"], [], ["loc", [null, [9, 44], [9, 102]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-width"], [], ["loc", [null, [10, 43], [10, 100]]]]]]], ["block", "each", [["get", "modelForDOM", ["loc", [null, [14, 16], [14, 27]]]]], [], 0, null, ["loc", [null, [14, 8], [48, 9]]]], ["attribute", "placeholder", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.enter-setting-name"], [], ["loc", [null, [55, 27], [55, 90]]]]]]], ["attribute", "value", ["concat", [["get", "settingName", ["loc", [null, [55, 101], [55, 112]]]]]]], ["element", "action", ["setConfigName", ["get", "n", ["loc", [null, [56, 39], [56, 40]]]]], ["on", "focusOut"], ["loc", [null, [56, 14], [56, 56]]]], ["element", "action", ["saveColsSetting"], [], ["loc", [null, [57, 84], [57, 112]]]], ["inline", "t", ["components.colsconfig-dialog-content.save"], [], ["loc", [null, [58, 14], [58, 63]]]], ["element", "action", ["apply"], [], ["loc", [null, [61, 91], [61, 109]]]], ["inline", "t", ["components.colsconfig-dialog-content.use"], [], ["loc", [null, [61, 110], [61, 158]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "saveColWidthState", ["loc", [null, [66, 18], [66, 35]]]]], [], []]], ["loc", [null, [64, 10], [67, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        dom.setAttribute(el1, "class", "flexberry-checkbox-label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "flexberry-checkbox-input", "type", "checkbox", "checked", ["subexpr", "get", [["get", "this", ["loc", [null, [4, 15], [4, 19]]]], "value"], [], ["loc", [null, [4, 10], [4, 28]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["content", "label", ["loc", [null, [7, 2], [7, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-datepicker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-datepicker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "classes", ["loc", [null, [3, 8], [3, 15]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]]]], [], []]], ["loc", [null, [1, 0], [7, 2]]]], ["attribute", "class", ["concat", ["calendar ", ["subexpr", "unless", [["get", "readonly", ["loc", [null, [8, 28], [8, 36]]]], "link"], [], ["loc", [null, [8, 19], [8, 45]]]], " icon"]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.setAttribute(el1, "readonly", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "default text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [17, 30], [17, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "text", ["loc", [null, [19, 22], [19, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'data-value');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "data-value", ["concat", [["get", "value", ["loc", [null, [24, 40], [24, 45]]]]]]], ["content", "value", ["loc", [null, [24, 49], [24, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 6
                },
                "end": {
                  "line": 27,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              dom.setAttribute(el1, "data-value", "_");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "value", ["loc", [null, [26, 41], [26, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "value", ["loc", [null, [23, 12], [23, 17]]]]], [], 0, 1, ["loc", [null, [23, 6], [27, 13]]]]],
          locals: ["key", "value"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "dropdown icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "and", [["get", "isSearch", ["loc", [null, [7, 13], [7, 21]]]], ["get", "isSearchReadOnly", ["loc", [null, [7, 22], [7, 38]]]]], [], ["loc", [null, [7, 8], [7, 39]]]]], [], 0, null, ["loc", [null, [7, 2], [9, 9]]]], ["block", "if", [["subexpr", "and", [["get", "isSearch", ["loc", [null, [11, 13], [11, 21]]]], ["subexpr", "not", [["get", "isSearchReadOnly", ["loc", [null, [11, 27], [11, 43]]]]], [], ["loc", [null, [11, 22], [11, 44]]]]], [], ["loc", [null, [11, 8], [11, 45]]]]], [], 1, null, ["loc", [null, [11, 2], [13, 9]]]], ["block", "if", [["get", "showPlaceholder", ["loc", [null, [16, 8], [16, 23]]]]], [], 2, 3, ["loc", [null, [16, 2], [20, 9]]]], ["block", "each-in", [["get", "_items", ["loc", [null, [22, 15], [22, 21]]]]], [], 4, null, ["loc", [null, [22, 4], [28, 16]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-dropdown", [], ["class", ["subexpr", "concat", ["flexberry-dropdown ", ["get", "class", ["loc", [null, [2, 38], [2, 43]]]], " selection", ["subexpr", "if", [["get", "readonly", ["loc", [null, [2, 61], [2, 69]]]], " disabled", ""], [], ["loc", [null, [2, 57], [2, 85]]]]], [], ["loc", [null, [2, 8], [2, 86]]]], "onChange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [3, 11], [3, 30]]]], "onHide", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [4, 9], [4, 30]]]], "onShow", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [5, 9], [5, 30]]]]], 0, null, ["loc", [null, [1, 0], [30, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-field.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "label", ["loc", [null, [1, 6], [1, 11]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "flexberry-textbox", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [5, 7], [5, 11]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 8], [6, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [7, 15], [7, 23]]]], "readonly"], [], ["loc", [null, [7, 11], [7, 35]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [9, 14], [9, 25]]]]], [], []]], ["loc", [null, [4, 0], [10, 2]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "add outline square icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createAttrMorph(element6, 'title');
            morphs[2] = dom.createAttrMorph(element6, 'for');
            morphs[3] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [14, 51], [14, 62]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [14, 74], [14, 93]]]], "disabled"], [], ["loc", [null, [14, 65], [14, 106]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [15, 14], [15, 64]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [16, 14], [16, 26]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [17, 8], [17, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            morphs[1] = dom.createAttrMorph(element5, 'title');
            morphs[2] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-remove-button ui icon ", ["get", "buttonClass", ["loc", [null, [23, 54], [23, 65]]]], " ", ["subexpr", "unless", [["get", "_removeButtonIsEnabled", ["loc", [null, [23, 77], [23, 99]]]], "disabled"], [], ["loc", [null, [23, 68], [23, 112]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.remove-button-title"], [], ["loc", [null, [24, 14], [24, 67]]]]], ["element", "action", ["removeButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [25, 8], [25, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 36,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "upload outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            morphs[1] = dom.createAttrMorph(element4, 'title');
            morphs[2] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-upload-button ui icon ", ["get", "buttonClass", ["loc", [null, [31, 54], [31, 65]]]], " ", ["subexpr", "unless", [["get", "_uploadButtonIsEnabled", ["loc", [null, [31, 77], [31, 99]]]], "disabled"], [], ["loc", [null, [31, 68], [31, 112]]]], " ", ["subexpr", "if", [["get", "_uploadIsInProgress", ["loc", [null, [31, 118], [31, 137]]]], "loading"], [], ["loc", [null, [31, 113], [31, 149]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.upload-button-title"], [], ["loc", [null, [32, 14], [32, 67]]]]], ["element", "action", ["uploadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [33, 8], [33, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_addButtonIsVisible", ["loc", [null, [12, 10], [12, 29]]]]], [], 0, null, ["loc", [null, [12, 4], [20, 11]]]], ["block", "if", [["get", "_removeButtonIsVisible", ["loc", [null, [21, 10], [21, 32]]]]], [], 1, null, ["loc", [null, [21, 4], [28, 11]]]], ["block", "if", [["get", "_uploadButtonIsVisible", ["loc", [null, [29, 10], [29, 32]]]]], [], 2, null, ["loc", [null, [29, 4], [36, 11]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "download outline icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'title');
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["flexberry-file-download-button ui icon ", ["get", "buttonClass", ["loc", [null, [40, 54], [40, 65]]]], " ", ["subexpr", "unless", [["get", "_downloadButtonIsEnabled", ["loc", [null, [40, 77], [40, 101]]]], "disabled"], [], ["loc", [null, [40, 68], [40, 114]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.download-button-title"], [], ["loc", [null, [41, 12], [41, 67]]]]], ["element", "action", ["downloadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [42, 6], [42, 70]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 54,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview ui small centered image");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createAttrMorph(element0, 'alt');
            return morphs;
          },
          statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [52, 16], [52, 43]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [53, 14], [53, 78]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui segment");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'class');
          return morphs;
        },
        statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [48, 65], [48, 93]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [49, 16], [49, 44]]]]], [], 0, null, ["loc", [null, [49, 6], [54, 17]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [55, 26], [55, 54]]]], "active", ""], [], ["loc", [null, [55, 21], [55, 68]]]], " loader"]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "file icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(fragment, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element7, 'class');
        morphs[1] = dom.createAttrMorph(element8, 'id');
        morphs[2] = dom.createMorphAt(element7, 4, 4);
        morphs[3] = dom.createMorphAt(element7, 6, 6);
        morphs[4] = dom.createMorphAt(element7, 7, 7);
        morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [1]), 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui ", ["get", "inputClass", ["loc", [null, [1, 17], [1, 27]]]], " action input"]]], ["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["inline", "input", [], ["type", "text", "class", "flexberry-file-filename-input", "readonly", "readonly", "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [8, 16], [8, 27]]]]], [], []], "value", ["subexpr", "get", [["get", "this", ["loc", [null, [9, 15], [9, 19]]]], "_fileName"], [], ["loc", [null, [9, 10], [9, 32]]]]], ["loc", [null, [4, 2], [10, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [11, 12], [11, 20]]]]], [], 0, null, ["loc", [null, [11, 2], [37, 13]]]], ["block", "if", [["get", "_downloadButtonIsVisible", ["loc", [null, [38, 8], [38, 32]]]]], [], 1, null, ["loc", [null, [38, 2], [45, 9]]]], ["block", "if", [["subexpr", "and", [["get", "showPreview", ["loc", [null, [47, 11], [47, 22]]]], ["get", "_hasFile", ["loc", [null, [47, 23], [47, 31]]]]], [], ["loc", [null, [47, 6], [47, 32]]]]], [], 2, null, ["loc", [null, [47, 0], [57, 7]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [64, 4], [64, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [68, 6], [68, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [75, 8], [75, 72]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/flexberry-groupedit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-groupedit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "groupedit-toolbar", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [4, 14], [4, 25]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [7, 20], [7, 37]]]]], [], []]], ["loc", [null, [1, 0], [8, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 14], [10, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 11], [11, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [12, 14], [12, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [14, 19], [14, 35]]]]], [], []], "headerCellComponent", ["subexpr", "@mut", [["get", "headerCellComponent", ["loc", [null, [15, 22], [15, 41]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [16, 16], [16, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [17, 28], [17, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [18, 26], [18, 49]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [19, 20], [19, 37]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [20, 20], [20, 37]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [21, 24], [21, 45]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [22, 24], [22, 45]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [23, 26], [23, 49]]]]], [], []], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [24, 27], [24, 51]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [25, 15], [25, 27]]]]], [], []], "headerClickable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [26, 18], [26, 27]]]]], [], []], "editOnSeparateRoute", ["subexpr", "@mut", [["get", "editOnSeparateRoute", ["loc", [null, [27, 22], [27, 41]]]]], [], []], "saveBeforeRouteLeave", ["subexpr", "@mut", [["get", "saveBeforeRouteLeave", ["loc", [null, [28, 23], [28, 43]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [29, 10], [29, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [30, 12], [30, 21]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "mainModelProjection", ["loc", [null, [31, 22], [31, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [32, 18], [32, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [33, 10], [33, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [34, 27], [34, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [34, 51], [34, 74]]]], "sortByColumn"], [], ["loc", [null, [34, 23], [34, 90]]]]], [], ["loc", [null, [34, 15], [34, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [35, 33], [35, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [35, 63], [35, 92]]]], "addColumnToSorting"], [], ["loc", [null, [35, 29], [35, 114]]]]], [], ["loc", [null, [35, 21], [35, 115]]]], "action", "groupEditRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [37, 16], [37, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [38, 20], [38, 37]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [39, 17], [39, 42]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [40, 19], [40, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [41, 21], [41, 39]]]]], [], []], "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [42, 25], [42, 47]]]]], [], []], "immediateDelete", false, "notUseUserSettings", true], ["loc", [null, [9, 0], [45, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", "search", "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true, "isSearchReadOnly", ["subexpr", "@mut", [["get", "dropdownIsSearch", ["loc", [null, [9, 21], [9, 37]]]]], [], []]], ["loc", [null, [2, 2], [10, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui fluid action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createUnsafeMorphAt(element1, 0, 0);
          morphs[4] = dom.createAttrMorph(element2, 'class');
          morphs[5] = dom.createElementMorph(element2);
          morphs[6] = dom.createUnsafeMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", ["subexpr", "concat", ["lookup-field ", ["subexpr", "if", [["get", "autocomplete", ["loc", [null, [15, 40], [15, 52]]]], "prompt"], [], ["loc", [null, [15, 36], [15, 62]]]]], [], ["loc", [null, [15, 12], [15, 63]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [16, 18], [16, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [17, 12], [17, 24]]]]], [], []], "readonly", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [18, 23], [18, 31]]]], ["subexpr", "not", [["get", "autocomplete", ["loc", [null, [18, 37], [18, 49]]]]], [], ["loc", [null, [18, 32], [18, 50]]]]], [], ["loc", [null, [18, 19], [18, 51]]]], "readonly"], [], ["loc", [null, [18, 15], [18, 63]]]]], ["loc", [null, [13, 4], [19, 6]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [20, 27], [20, 35]]]], " read-only"], [], ["loc", [null, [20, 22], [20, 50]]]], " ", ["get", "chooseButtonClass", ["loc", [null, [20, 53], [20, 70]]]], " button"]]], ["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [20, 99], [20, 109]]]]], [], ["loc", [null, [20, 81], [20, 111]]]], ["content", "chooseText", ["loc", [null, [20, 112], [20, 128]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [21, 27], [21, 35]]]], " read-only"], [], ["loc", [null, [21, 22], [21, 50]]]], " ", ["get", "removeButtonClass", ["loc", [null, [21, 53], [21, 70]]]], " button"]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [21, 99], [21, 109]]]]], [], ["loc", [null, [21, 81], [21, 111]]]], ["content", "removeText", ["loc", [null, [21, 112], [21, 128]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "results");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [23, 7]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [24, 16], [24, 24]]]]], [], ["loc", [null, [24, 11], [24, 25]]]], ["get", "autocomplete", ["loc", [null, [24, 26], [24, 38]]]]], [], ["loc", [null, [24, 6], [24, 39]]]]], [], 2, null, ["loc", [null, [24, 0], [26, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/flexberry-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menu.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-menuitem", [], ["tagName", "", "item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [2, 39], [2, 43]]]]], [], []]], ["loc", [null, [2, 2], [2, 45]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "items", ["loc", [null, [1, 8], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]], ["content", "yield", ["loc", [null, [4, 0], [4, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-menuitem", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "item.title", ["loc", [null, [2, 8], [2, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "item.icon", ["loc", [null, [5, 14], [5, 23]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "item.title", ["loc", [null, [8, 8], [8, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menuitem", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [13, 32], [13, 36]]]]], [], []]], ["loc", [null, [13, 6], [13, 38]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "item.itemsAlignment", ["loc", [null, [11, 19], [11, 38]]]], ["get", "item.itemsAlignment", ["loc", [null, [11, 39], [11, 58]]]]], [], ["loc", [null, [11, 14], [11, 60]]]], " menu"]]], ["block", "each", [["get", "item.items", ["loc", [null, [12, 12], [12, 22]]]]], [], 0, null, ["loc", [null, [12, 4], [14, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "and", [["get", "titleIsBeforeIcon", ["loc", [null, [1, 11], [1, 28]]]], ["get", "item.title", ["loc", [null, [1, 29], [1, 39]]]]], [], ["loc", [null, [1, 6], [1, 40]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "item.icon", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "titleIsBeforeIcon", ["loc", [null, [7, 16], [7, 33]]]]], [], ["loc", [null, [7, 11], [7, 34]]]], ["get", "item.title", ["loc", [null, [7, 35], [7, 45]]]]], [], ["loc", [null, [7, 6], [7, 46]]]]], [], 2, null, ["loc", [null, [7, 0], [9, 7]]]], ["block", "if", [["get", "hasSubitems", ["loc", [null, [10, 6], [10, 17]]]]], [], 3, null, ["loc", [null, [10, 0], [16, 7]]]], ["content", "yield", ["loc", [null, [17, 0], [17, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/flexberry-objectlistview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 79,
                  "column": 5
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  		  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "ui button");
              var el2 = dom.createTextNode("...");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 82,
                    "column": 4
                  },
                  "end": {
                    "line": 84,
                    "column": 4
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("  			");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "ui active button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "page.number", ["loc", [null, [83, 38], [83, 53]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 4
                  },
                  "end": {
                    "line": 86,
                    "column": 4
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("  			");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "ui button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["element", "action", [["subexpr", "if", [["get", "this.attrs.gotoPage", ["loc", [null, [85, 44], [85, 63]]]], ["get", "this.attrs.gotoPage", ["loc", [null, [85, 64], [85, 83]]]], "gotoPage"], [], ["loc", [null, [85, 40], [85, 95]]]], ["get", "page.number", ["loc", [null, [85, 96], [85, 107]]]]], [], ["loc", [null, [85, 31], [85, 109]]]], ["content", "page.number", ["loc", [null, [85, 110], [85, 125]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 81,
                  "column": 5
                },
                "end": {
                  "line": 87,
                  "column": 5
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "page.isCurrent", ["loc", [null, [82, 10], [82, 24]]]]], [], 0, 1, ["loc", [null, [82, 4], [86, 11]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 78,
                "column": 3
              },
              "end": {
                "line": 88,
                "column": 3
              }
            },
            "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "page.isEllipsis", ["loc", [null, [79, 11], [79, 26]]]]], [], 0, 1, ["loc", [null, [79, 5], [87, 12]]]]],
          locals: ["page"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 0
            },
            "end": {
              "line": 95,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui secondary menu no-margin");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui basic buttons");
          var el3 = dom.createTextNode("\n  	");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          var el4 = dom.createTextNode("«");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  	");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          var el4 = dom.createTextNode("»");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "right menu");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [5]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          morphs[3] = dom.createAttrMorph(element4, 'class');
          morphs[4] = dom.createElementMorph(element4);
          morphs[5] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasPreviousPage", ["loc", [null, [77, 30], [77, 45]]]], "disabled"], [], ["loc", [null, [77, 21], [77, 58]]]], " button"]]], ["element", "action", [["subexpr", "if", [["get", "this.attrs.previousPage", ["loc", [null, [77, 80], [77, 103]]]], ["get", "this.attrs.previousPage", ["loc", [null, [77, 104], [77, 127]]]], "previousPage"], [], ["loc", [null, [77, 76], [77, 143]]]]], [], ["loc", [null, [77, 67], [77, 145]]]], ["block", "each", [["get", "pages", ["loc", [null, [78, 11], [78, 16]]]]], [], 0, null, ["loc", [null, [78, 3], [88, 12]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasNextPage", ["loc", [null, [89, 30], [89, 41]]]], "disabled"], [], ["loc", [null, [89, 21], [89, 54]]]], " button"]]], ["element", "action", [["subexpr", "if", [["get", "this.attrs.nextPage", ["loc", [null, [89, 76], [89, 95]]]], ["get", "this.attrs.nextPage", ["loc", [null, [89, 96], [89, 115]]]], "nextPage"], [], ["loc", [null, [89, 72], [89, 127]]]]], [], ["loc", [null, [89, 63], [89, 129]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [92, 33], [92, 46]]]]], [], []], "value", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [92, 53], [92, 65]]]]], [], []], "class", "compact selection"], ["loc", [null, [92, 6], [92, 93]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 96,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "olv-toolbar", [], ["class", "ui secondary menu no-margin", "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [3, 18], [3, 33]]]]], [], []], "enableCreateNewButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [4, 29], [4, 37]]]]], [], ["loc", [null, [4, 24], [4, 38]]]], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [8, 16], [8, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [9, 14], [9, 26]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [10, 10], [10, 17]]]]], [], []], "toggleStateFilters", ["subexpr", "action", ["toggleStateFilters"], [], ["loc", [null, [11, 21], [11, 50]]]], "resetFilters", ["subexpr", "action", [["subexpr", "if", [["get", "resetFilters", ["loc", [null, [12, 29], [12, 41]]]], ["get", "resetFilters", ["loc", [null, [12, 42], [12, 54]]]], "resetFilters"], [], ["loc", [null, [12, 25], [12, 70]]]]], [], ["loc", [null, [12, 17], [12, 71]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "filterText", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [14, 13], [14, 23]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [15, 14], [15, 25]]]]], [], []], "enableDeleteButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [16, 26], [16, 34]]]]], [], ["loc", [null, [16, 21], [16, 35]]]], "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [17, 16], [17, 29]]]]], [], []], "modelController", ["subexpr", "@mut", [["get", "currentController", ["loc", [null, [18, 18], [18, 35]]]]], [], []], "customButtonAction", "customButtonAction", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [20, 16], [20, 29]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [21, 16], [21, 29]]]]], [], []], "showConfigDialog", "showConfigDialog", "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [23, 20], [23, 37]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "_inHierarchicalMode", ["loc", [null, [24, 21], [24, 40]]]]], [], []], "availableHierarchicalMode", ["subexpr", "@mut", [["get", "_availableHierarchicalMode", ["loc", [null, [25, 28], [25, 54]]]]], [], []], "switchHierarchicalMode", ["subexpr", "action", ["switchHierarchicalMode"], [], ["loc", [null, [26, 25], [26, 58]]]]], ["loc", [null, [1, 0], [27, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [29, 14], [29, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [30, 11], [30, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [31, 14], [31, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [32, 15], [32, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [33, 19], [33, 35]]]]], [], []], "headerCellComponent", ["subexpr", "@mut", [["get", "headerCellComponent", ["loc", [null, [34, 22], [34, 41]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [35, 16], [35, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [36, 28], [36, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [37, 26], [37, 49]]]]], [], []], "showAsteriskInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [38, 30], [38, 38]]]]], [], ["loc", [null, [38, 25], [38, 39]]]], ["get", "showAsteriskInRow", ["loc", [null, [38, 40], [38, 57]]]]], [], ["loc", [null, [38, 20], [38, 58]]]], "showCheckBoxInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [39, 30], [39, 38]]]]], [], ["loc", [null, [39, 25], [39, 39]]]], ["get", "showCheckBoxInRow", ["loc", [null, [39, 40], [39, 57]]]]], [], ["loc", [null, [39, 20], [39, 58]]]], "showDeleteButtonInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [40, 34], [40, 42]]]]], [], ["loc", [null, [40, 29], [40, 43]]]], ["get", "showDeleteButtonInRow", ["loc", [null, [40, 44], [40, 65]]]]], [], ["loc", [null, [40, 24], [40, 66]]]], "showEditMenuItemInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [41, 34], [41, 42]]]]], [], ["loc", [null, [41, 29], [41, 43]]]], ["get", "showEditMenuItemInRow", ["loc", [null, [41, 44], [41, 65]]]]], [], ["loc", [null, [41, 24], [41, 66]]]], "showDeleteMenuItemInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [42, 36], [42, 44]]]]], [], ["loc", [null, [42, 31], [42, 45]]]], ["get", "showDeleteMenuItemInRow", ["loc", [null, [42, 46], [42, 69]]]]], [], ["loc", [null, [42, 26], [42, 70]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [43, 27], [43, 51]]]]], [], []], "rowClickable", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [44, 25], [44, 33]]]]], [], ["loc", [null, [44, 20], [44, 34]]]], ["get", "rowClickable", ["loc", [null, [44, 35], [44, 47]]]]], [], ["loc", [null, [44, 15], [44, 48]]]], "headerClickable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [45, 18], [45, 27]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [46, 10], [46, 17]]]]], [], []], "immediateDelete", true, "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [48, 12], [48, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [49, 18], [49, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [50, 10], [50, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [51, 27], [51, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [51, 51], [51, 74]]]], "sortByColumn"], [], ["loc", [null, [51, 23], [51, 90]]]]], [], ["loc", [null, [51, 15], [51, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [52, 33], [52, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [52, 63], [52, 92]]]], "addColumnToSorting"], [], ["loc", [null, [52, 29], [52, 114]]]]], [], ["loc", [null, [52, 21], [52, 115]]]], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [53, 16], [53, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [54, 14], [54, 26]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [55, 10], [55, 17]]]]], [], []], "applyFilters", ["subexpr", "action", [["subexpr", "if", [["get", "applyFilters", ["loc", [null, [56, 29], [56, 41]]]], ["get", "applyFilters", ["loc", [null, [56, 42], [56, 54]]]], "applyFilters"], [], ["loc", [null, [56, 25], [56, 70]]]]], [], ["loc", [null, [56, 17], [56, 71]]]], "componentForFilter", ["subexpr", "@mut", [["get", "componentForFilter", ["loc", [null, [57, 21], [57, 39]]]]], [], []], "conditionsByType", ["subexpr", "@mut", [["get", "conditionsByType", ["loc", [null, [58, 19], [58, 35]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.filterByAnyMatch", ["loc", [null, [59, 31], [59, 58]]]], ["get", "this.attrs.filterByAnyMatch", ["loc", [null, [59, 59], [59, 86]]]], "filterByAnyMatch"], [], ["loc", [null, [59, 27], [59, 106]]]]], [], ["loc", [null, [59, 19], [59, 107]]]], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [60, 17], [60, 42]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [61, 19], [61, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [62, 21], [62, 39]]]]], [], []], "action", "objectListViewRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [64, 16], [64, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [65, 20], [65, 37]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "selectedRecord", ["loc", [null, [66, 17], [66, 31]]]]], [], []], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [67, 21], [67, 39]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [68, 21], [68, 39]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "_inHierarchicalMode", ["loc", [null, [69, 21], [69, 40]]]]], [], []], "disableHierarchicalMode", ["subexpr", "if", [["get", "hierarchyByAttribute", ["loc", [null, [70, 30], [70, 50]]]], true, ["get", "disableHierarchicalMode", ["loc", [null, [70, 56], [70, 79]]]]], [], ["loc", [null, [70, 26], [70, 80]]]], "loadRecords", ["subexpr", "action", ["loadRecords"], [], ["loc", [null, [71, 14], [71, 36]]]], "availableHierarchicalMode", ["subexpr", "action", ["availableHierarchicalMode"], [], ["loc", [null, [72, 28], [72, 64]]]]], ["loc", [null, [28, 0], [73, 2]]]], ["block", "unless", [["get", "_inHierarchicalMode", ["loc", [null, [74, 10], [74, 29]]]]], [], 0, null, ["loc", [null, [74, 0], [95, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-simpledatetime", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-simpledatetime.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [1, 13], [1, 17]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonlyAttr", ["loc", [null, [1, 27], [1, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_valueAsString", ["loc", [null, [1, 46], [1, 60]]]]], [], []], "min", ["subexpr", "@mut", [["get", "_minAsString", ["loc", [null, [1, 65], [1, 77]]]]], [], []], "max", ["subexpr", "@mut", [["get", "_maxAsString", ["loc", [null, [1, 82], [1, 94]]]]], [], []]], ["loc", [null, [1, 0], [1, 96]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [3, 15], [3, 23]]]], "readonly"], [], ["loc", [null, [3, 11], [3, 35]]]], "required", ["subexpr", "if", [["get", "required", ["loc", [null, [4, 15], [4, 23]]]], "required"], [], ["loc", [null, [4, 11], [4, 35]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 14], [5, 25]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [6, 7], [6, 11]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [7, 7], [7, 11]]]]], [], []], "disabled", ["subexpr", "if", [["get", "disabled", ["loc", [null, [8, 15], [8, 23]]]], "disabled"], [], ["loc", [null, [8, 11], [8, 35]]]], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [9, 12], [9, 21]]]]], [], []], "selectionEnd", ["subexpr", "@mut", [["get", "selectionEnd", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "selectionStart", ["subexpr", "@mut", [["get", "selectionStart", ["loc", [null, [11, 17], [11, 31]]]]], [], []], "selectionDirection", ["subexpr", "@mut", [["get", "selectionDirection", ["loc", [null, [12, 21], [12, 39]]]]], [], []], "wrap", ["subexpr", "@mut", [["get", "wrap", ["loc", [null, [13, 7], [13, 11]]]]], [], []], "autofocus", ["subexpr", "if", [["get", "autofocus", ["loc", [null, [14, 16], [14, 25]]]], "autofocus"], [], ["loc", [null, [14, 12], [14, 38]]]], "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [15, 13], [15, 23]]]]], [], []]], ["loc", [null, [1, 0], [16, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-textbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-textbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [4, 15], [4, 23]]]], "readonly"], [], ["loc", [null, [4, 11], [4, 35]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]]]], [], []]], ["loc", [null, [1, 0], [7, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-toggler", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-toggler.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "flexberry-toggler-caption");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [2]), 0, 0);
        morphs[3] = dom.createAttrMorph(element2, 'class');
        morphs[4] = dom.createMorphAt(element2, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["title ", ["subexpr", "if", [["get", "expanded", ["loc", [null, [1, 23], [1, 31]]]], "active"], [], ["loc", [null, [1, 18], [1, 42]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "iconClass", ["loc", [null, [2, 17], [2, 26]]]], ["get", "iconClass", ["loc", [null, [2, 27], [2, 36]]]], "dropdown icon"], [], ["loc", [null, [2, 12], [2, 55]]]]]]], ["content", "currentCaption", ["loc", [null, [2, 101], [2, 119]]]], ["attribute", "class", ["concat", ["content flexberry-toggler-content ", ["subexpr", "if", [["get", "expanded", ["loc", [null, [4, 51], [4, 59]]]], "active"], [], ["loc", [null, [4, 46], [4, 70]]]]]]], ["content", "yield", ["loc", [null, [4, 72], [4, 81]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-validationmessage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-validationmessage.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "error", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-validationsummary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-validationsummary.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [3, 8], [3, 19]]]]],
        locals: ["message"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 5
          }
        },
        "moduleName": "dummy/templates/components/flexberry-validationsummary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "list");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "messages", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/groupedit-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "plus icon");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [2, 22], [2, 33]]]], " button"]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [2, 75], [2, 83]]]]], ["element", "action", ["addRow"], [], ["loc", [null, [2, 44], [2, 63]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "minus icon");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'disabled');
          morphs[2] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_isDeleteRowsEnabled", ["loc", [null, [5, 25], [5, 45]]]], "", "disabled"], [], ["loc", [null, [5, 20], [5, 61]]]], " ", ["get", "buttonClass", ["loc", [null, [5, 64], [5, 75]]]], " button"]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [5, 97], [5, 105]]]]], ["element", "action", ["deleteRows"], [], ["loc", [null, [5, 108], [5, 131]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "createNewButton", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [4, 6], [4, 18]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ui centered image");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [9, 8], [9, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "description");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [13, 8], [13, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 23,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui cancel button");
              dom.setAttribute(el1, "data-dismiss", "modal");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["components.modal-dialog.close-button-text"], [], ["loc", [null, [21, 10], [21, 59]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui positive button");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["components.modal-dialog.ok-button-text"], [], ["loc", [null, [26, 10], [26, 56]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "actions");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["block", "if", [["get", "useCloseButton", ["loc", [null, [19, 12], [19, 26]]]]], [], 0, null, ["loc", [null, [19, 6], [23, 13]]]], ["block", "if", [["get", "useOkButton", ["loc", [null, [24, 12], [24, 23]]]]], [], 1, null, ["loc", [null, [24, 6], [28, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [4, 4], [4, 13]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "viewImageContent", ["loc", [null, [6, 19], [6, 35]]]], "image", ""], [], ["loc", [null, [6, 14], [6, 48]]]], " content"]]], ["block", "if", [["get", "viewImageContent", ["loc", [null, [7, 10], [7, 26]]]]], [], 0, 1, ["loc", [null, [7, 4], [15, 11]]]], ["block", "if", [["get", "toolbarVisible", ["loc", [null, [17, 8], [17, 22]]]]], [], 2, null, ["loc", [null, [17, 2], [30, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-modal", [], ["class", ["subexpr", "concat", ["flexberry-modal ", ["get", "sizeClass", ["loc", [null, [1, 45], [1, 54]]]]], [], ["loc", [null, [1, 18], [1, 55]]]]], 0, null, ["loc", [null, [1, 0], [31, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/object-list-view-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "formattedValue", ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/object-list-view-header-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", [["get", "column.keyLocale", ["loc", [null, [4, 8], [4, 24]]]]], [], ["loc", [null, [4, 4], [4, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "column.header", ["loc", [null, [6, 4], [6, 21]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "title", "Order ascending");
            var el2 = dom.createTextNode("\n        ▲");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "column.sortNumber", ["loc", [null, [13, 9], [13, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "title", "Order descending");
            var el2 = dom.createTextNode("\n        ▼");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "column.sortNumber", ["loc", [null, [17, 9], [17, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "float:right;");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "column.sortAscending", ["loc", [null, [11, 12], [11, 32]]]]], [], 0, 1, ["loc", [null, [11, 6], [19, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "title", "Click to change ordering, Ctrl+Click to append ordering for this column");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'data-olv-header-property-name');
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["attribute", "data-olv-header-property-name", ["get", "column.propName", ["loc", [null, [1, 37], [1, 52]]]]], ["block", "if", [["get", "column.keyLocale", ["loc", [null, [3, 8], [3, 24]]]]], [], 0, 1, ["loc", [null, [3, 2], [7, 9]]]], ["block", "if", [["get", "column.sorted", ["loc", [null, [9, 8], [9, 21]]]]], [], 2, null, ["loc", [null, [9, 2], [21, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [8, 55], [8, 85]]]], "transparent"], [], ["loc", [null, [8, 46], [8, 101]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeSelected", ["loc", [null, [14, 41], [14, 71]]]]], [], ["loc", [null, [14, 36], [14, 72]]]]], [], ["loc", [null, [14, 23], [14, 73]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [15, 31], [15, 40]]]], ["get", "record", ["loc", [null, [15, 41], [15, 47]]]]], [], ["loc", [null, [15, 23], [15, 48]]]]], ["loc", [null, [13, 12], [16, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "minus icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            morphs[1] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [21, 32], [21, 43]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [21, 55], [21, 63]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [21, 69], [21, 98]]]]], [], ["loc", [null, [21, 64], [21, 99]]]]], [], ["loc", [null, [21, 51], [21, 100]]]], "disabled"], [], ["loc", [null, [21, 46], [21, 113]]]], " button"]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [21, 131], [21, 140]]]], ["get", "record", ["loc", [null, [21, 141], [21, 147]]]]], [], ["loc", [null, [21, 122], [21, 149]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element5, 1, 1);
          morphs[1] = dom.createMorphAt(element5, 2, 2);
          morphs[2] = dom.createMorphAt(element5, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [6, 14], [6, 31]]]]], [], 0, null, ["loc", [null, [6, 8], [10, 15]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [11, 14], [11, 31]]]]], [], 1, null, ["loc", [null, [11, 8], [18, 15]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [19, 14], [19, 35]]]]], [], 2, null, ["loc", [null, [19, 8], [25, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 8
                },
                "end": {
                  "line": 37,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createAttrMorph(element1, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui button icon mini ", ["get", "buttonClass", ["loc", [null, [34, 47], [34, 58]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [34, 62], [34, 95]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [35, 27], [35, 36]]]], "minus", "plus"], [], ["loc", [null, [35, 22], [35, 53]]]], " icon"]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 6
              },
              "end": {
                "line": 38,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "hierarchicalIndent", ["loc", [null, [32, 8], [32, 30]]]], ["block", "if", [["get", "hasRecords", ["loc", [null, [33, 14], [33, 24]]]]], [], 0, null, ["loc", [null, [33, 8], [37, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["element", "action", [["get", "rowClick", ["loc", [null, [30, 17], [30, 25]]]], ["get", "record", ["loc", [null, [30, 26], [30, 32]]]]], ["preventDefault", false], ["loc", [null, [30, 8], [30, 55]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [31, 22], [31, 27]]]]], [], ["loc", [null, [31, 17], [31, 28]]]], ["get", "inHierarchicalMode", ["loc", [null, [31, 29], [31, 47]]]]], [], ["loc", [null, [31, 12], [31, 48]]]]], [], 0, null, ["loc", [null, [31, 6], [38, 13]]]], ["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [39, 18], [39, 52]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [40, 26], [40, 66]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [41, 21], [41, 32]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "record.data", ["loc", [null, [42, 24], [42, 35]]]], ["get", "column.propName", ["loc", [null, [42, 36], [42, 51]]]]], [], ["loc", [null, [42, 19], [42, 52]]]]], [], ["loc", [null, [42, 14], [42, 53]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 17], [43, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [44, 17], [44, 25]]]]], [], []]], ["loc", [null, [39, 6], [45, 8]]]]],
        locals: ["column", "index"],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "object-list-view-menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "basic right pointing", "callItemsOnClickCallbacks", false, "configurateItems", ["subexpr", "action", [["get", "menuInRowConfigurateItems", ["loc", [null, [53, 33], [53, 58]]]], ["get", "record", ["loc", [null, [53, 59], [53, 65]]]]], [], ["loc", [null, [53, 25], [53, 66]]]], "onItemClick", ["subexpr", "action", [["get", "menuInRowItemClick", ["loc", [null, [54, 28], [54, 46]]]], ["get", "record", ["loc", [null, [54, 47], [54, 53]]]]], [], ["loc", [null, [54, 20], [54, 54]]]]], ["loc", [null, [50, 6], [55, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 82,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [62, 13], [62, 19]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [63, 14], [63, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 15], [64, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [65, 15], [65, 23]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [66, 21], [66, 35]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [67, 23], [67, 39]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [68, 23], [68, 39]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [69, 24], [69, 41]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [70, 24], [70, 41]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [71, 28], [71, 49]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [72, 25], [72, 43]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [73, 18], [73, 29]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [74, 15], [74, 23]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [75, 16], [75, 25]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [76, 16], [76, 25]]]]], [], []], "menuInRowItemClick", ["subexpr", "@mut", [["get", "menuInRowItemClick", ["loc", [null, [77, 25], [77, 43]]]]], [], []], "menuInRowConfigurateItems", ["subexpr", "@mut", [["get", "menuInRowConfigurateItems", ["loc", [null, [78, 32], [78, 57]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [79, 20], [79, 33]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [80, 25], [80, 44]]]]], [], []]], ["loc", [null, [61, 4], [81, 6]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "records", ["loc", [null, [60, 10], [60, 17]]]]], ["key", "key"], 0, null, ["loc", [null, [60, 2], [82, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "hidden");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element6, 'class');
        morphs[1] = dom.createAttrMorph(element7, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element7, 3, 3);
        morphs[4] = dom.createMorphAt(element6, 3, 3);
        morphs[5] = dom.createMorphAt(element6, 4, 4);
        morphs[6] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "record.rowConfig.customClass", ["loc", [null, [1, 13], [1, 41]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [2, 53], [2, 69]]]], "hidden"], [], ["loc", [null, [2, 44], [2, 80]]]]]]], ["content", "record.key", ["loc", [null, [3, 24], [3, 38]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 10], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [27, 11]]]], ["block", "each", [["get", "columns", ["loc", [null, [29, 10], [29, 17]]]]], [], 1, null, ["loc", [null, [29, 2], [47, 11]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [48, 8], [48, 22]]]]], [], 2, null, ["loc", [null, [48, 2], [57, 9]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [59, 11], [59, 20]]]], ["get", "inHierarchicalMode", ["loc", [null, [59, 21], [59, 39]]]]], [], ["loc", [null, [59, 6], [59, 40]]]]], [], 3, null, ["loc", [null, [59, 0], [83, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/object-list-view-single-column-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(":");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["inline fields ", ["subexpr", "if", [["subexpr", "not", [["get", "hasEditableValues", ["loc", [null, [2, 38], [2, 55]]]]], [], ["loc", [null, [2, 33], [2, 56]]]], "readonly"], [], ["loc", [null, [2, 28], [2, 69]]]]]]], ["content", "column.header", ["loc", [null, [3, 11], [3, 28]]]], ["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [4, 16], [4, 50]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [5, 24], [5, 64]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "model", ["loc", [null, [7, 22], [7, 27]]]], ["get", "column.propName", ["loc", [null, [7, 28], [7, 43]]]]], [], ["loc", [null, [7, 17], [7, 44]]]]], [], ["loc", [null, [7, 12], [7, 45]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [8, 15], [8, 23]]]]], [], []]], ["loc", [null, [4, 4], [9, 6]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "columns", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [3, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [2, 10], [2, 23]]]]], [], 0, null, ["loc", [null, [2, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "headerCellComponent.componentName", ["loc", [null, [17, 22], [17, 55]]]]], ["column", ["subexpr", "@mut", [["get", "column", ["loc", [null, [18, 19], [18, 25]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "headerCellComponent.componentProperties", ["loc", [null, [19, 30], [19, 69]]]]], [], []]], ["loc", [null, [17, 10], [20, 12]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
          dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 12
                },
                "end": {
                  "line": 41,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", ["flexberry-dropdown"], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [35, 22], [35, 45]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [36, 22], [36, 46]]]]], [], []], "class", "compact fluid", "placeholder", "", "needChecksOnValue", false], ["loc", [null, [34, 14], [40, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 8
              },
              "end": {
                "line": 43,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "column.filter.conditions", ["loc", [null, [33, 18], [33, 42]]]]], [], 0, null, ["loc", [null, [33, 12], [41, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 8
              },
              "end": {
                "line": 46,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "2");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 12
                },
                "end": {
                  "line": 56,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [52, 26], [52, 54]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [53, 22], [53, 43]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [54, 34], [54, 68]]]]], [], []]], ["loc", [null, [52, 14], [55, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 8
              },
              "end": {
                "line": 58,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "column.filter.component.name", ["loc", [null, [51, 18], [51, 46]]]]], [], 0, null, ["loc", [null, [51, 12], [56, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "rowspan", "2");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          morphs[2] = dom.createMorphAt(element1, 4, 4);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["subexpr", "and", [["get", "showHelperColumn", ["loc", [null, [30, 45], [30, 61]]]], ["get", "hasContent", ["loc", [null, [30, 62], [30, 72]]]]], [], ["loc", [null, [30, 40], [30, 73]]]], "hidden"], [], ["loc", [null, [30, 31], [30, 84]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [31, 16], [31, 23]]]]], [], 0, null, ["loc", [null, [31, 8], [43, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [44, 14], [44, 28]]]]], [], 1, null, ["loc", [null, [44, 8], [46, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [49, 16], [49, 23]]]]], [], 2, null, ["loc", [null, [49, 8], [58, 17]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'colspan');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [63, 23], [63, 30]]]]]]], ["content", "placeholder", ["loc", [null, [63, 61], [63, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [68, 15], [68, 21]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [69, 16], [69, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 17], [70, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [71, 17], [71, 25]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [72, 23], [72, 37]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [73, 25], [73, 41]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [74, 25], [74, 41]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [75, 26], [75, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [76, 26], [76, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [77, 30], [77, 51]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [78, 27], [78, 45]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [79, 27], [79, 45]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [80, 20], [80, 31]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [81, 17], [81, 36]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [82, 18], [82, 38]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [83, 18], [83, 38]]]], "menuInRowItemClick", ["subexpr", "action", ["menuInRowItemClick"], [], ["loc", [null, [84, 27], [84, 56]]]], "menuInRowConfigurateItems", ["subexpr", "action", ["menuInRowConfigurateItems"], [], ["loc", [null, [85, 34], [85, 70]]]]], ["loc", [null, [67, 6], [86, 8]]]]],
        locals: ["record"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        dom.setAttribute(el4, "data-olv-header-property-name", "OlvRowToolbar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [1]);
        var element4 = dom.childAt(element3, [1, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element3, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createAttrMorph(element5, 'class');
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 4, 4);
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createMorphAt(element6, 2, 2);
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [12, 58], [12, 66]]]], "readonly"], [], ["loc", [null, [12, 53], [12, 79]]]], " ", ["get", "tableClass", ["loc", [null, [12, 82], [12, 92]]]], " table"]]], ["attribute", "class", ["concat", ["object-list-view-operations collapsing ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [15, 65], [15, 81]]]], "hidden"], [], ["loc", [null, [15, 56], [15, 92]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [16, 16], [16, 23]]]]], [], 1, null, ["loc", [null, [16, 8], [21, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [22, 12], [22, 26]]]]], [], 2, null, ["loc", [null, [22, 6], [24, 13]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [28, 10], [28, 21]]]]], [], 3, null, ["loc", [null, [28, 4], [60, 11]]]], ["block", "unless", [["get", "hasContent", ["loc", [null, [61, 14], [61, 24]]]]], [], 4, null, ["loc", [null, [61, 4], [65, 15]]]], ["block", "each", [["get", "contentWithKeys", ["loc", [null, [66, 12], [66, 27]]]]], ["key", "key"], 5, null, ["loc", [null, [66, 4], [87, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("dummy/templates/components/olv-setconfigdialogbutton", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/olv-setconfigdialogbutton.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "large setting icon");
        dom.setAttribute(el2, "title", "customize column views");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [1, 44], [1, 54]]]]], [], ["loc", [null, [1, 26], [1, 56]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/olv-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element12, 'class');
          morphs[1] = dom.createElementMorph(element12);
          morphs[2] = dom.createMorphAt(element12, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [2, 22], [2, 33]]]], " button"]]], ["element", "action", ["refresh"], [], ["loc", [null, [2, 44], [2, 64]]]], ["inline", "t", ["components.olv-toolbar.refresh-button-text"], [], ["loc", [null, [3, 4], [3, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element11, 'class');
          morphs[1] = dom.createElementMorph(element11);
          morphs[2] = dom.createMorphAt(element11, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [7, 22], [7, 33]]]], " ", ["subexpr", "if", [["get", "enableCreateNewButton", ["loc", [null, [7, 41], [7, 62]]]], "", "disabled"], [], ["loc", [null, [7, 36], [7, 78]]]], " button"]]], ["element", "action", ["createNew"], [], ["loc", [null, [7, 87], [7, 109]]]], ["inline", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [8, 4], [8, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element10, 'class');
          morphs[1] = dom.createElementMorph(element10);
          morphs[2] = dom.createMorphAt(element10, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [12, 22], [12, 33]]]], " ", ["subexpr", "if", [["get", "isDeleteButtonEnabled", ["loc", [null, [12, 41], [12, 62]]]], "", "disabled"], [], ["loc", [null, [12, 36], [12, 78]]]], " button"]]], ["element", "action", ["delete"], [], ["loc", [null, [12, 87], [12, 106]]]], ["inline", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [13, 4], [13, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "sitemap icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element9, 'class');
          morphs[1] = dom.createElementMorph(element9);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon ", ["get", "buttonClass", ["loc", [null, [17, 34], [17, 45]]]], " ", ["subexpr", "if", [["get", "inHierarchicalMode", ["loc", [null, [17, 53], [17, 71]]]], "active"], [], ["loc", [null, [17, 48], [17, 82]]]]]]], ["element", "action", [["get", "switchHierarchicalMode", ["loc", [null, [17, 93], [17, 115]]]]], [], ["loc", [null, [17, 84], [17, 117]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "or");
            dom.setAttribute(el1, "data-text", "•");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui button ", ["get", "buttonClass", ["loc", [null, [28, 33], [28, 44]]]]]]], ["element", "action", [["get", "resetFilters", ["loc", [null, [28, 57], [28, 69]]]]], [], ["loc", [null, [28, 48], [28, 71]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 33,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui icon input buttons");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "filter icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var element8 = dom.childAt(element7, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element8, 'class');
          morphs[1] = dom.createElementMorph(element8);
          morphs[2] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button ", ["get", "buttonClass", ["loc", [null, [23, 31], [23, 42]]]], " ", ["subexpr", "if", [["get", "showFilters", ["loc", [null, [23, 50], [23, 61]]]], "active"], [], ["loc", [null, [23, 45], [23, 72]]]]]]], ["element", "action", [["get", "toggleStateFilters", ["loc", [null, [23, 83], [23, 101]]]]], [], ["loc", [null, [23, 74], [23, 103]]]], ["block", "if", [["get", "filters", ["loc", [null, [26, 10], [26, 17]]]]], [], 0, null, ["loc", [null, [26, 4], [31, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "search icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "remove icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element3, [5]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createAttrMorph(element4, 'class');
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createAttrMorph(element5, 'class');
          morphs[4] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "placeholder", ["subexpr", "t", ["components.olv-toolbar.filter-by-any-match-placeholder"], [], ["loc", [null, [38, 18], [38, 78]]]], "value", ["subexpr", "@mut", [["get", "filterByAnyMatchText", ["loc", [null, [39, 12], [39, 32]]]]], [], []], "enter", "filterByAnyMatch"], ["loc", [null, [36, 4], [40, 6]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [41, 24], [41, 35]]]], " icon button"]]], ["element", "action", ["filterByAnyMatch"], [], ["loc", [null, [41, 51], [41, 80]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [44, 24], [44, 35]]]], " icon button"]]], ["element", "action", ["removeFilter"], [], ["loc", [null, [44, 51], [44, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 54,
                "column": 4
              },
              "end": {
                "line": 59,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "colsSettingsItems", ["loc", [null, [56, 14], [56, 31]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [57, 20], [57, 46]]]]], ["loc", [null, [55, 6], [58, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 61,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "ui icon button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large table icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["showConfigDialog"], [], ["loc", [null, [51, 35], [51, 64]]]], ["block", "if", [["get", "colsSettingsItems", ["loc", [null, [54, 10], [54, 27]]]]], [], 0, null, ["loc", [null, [54, 4], [59, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "customButton.buttonClasses", ["loc", [null, [64, 19], [64, 45]]]], ["get", "customButton.buttonClasses", ["loc", [null, [64, 46], [64, 72]]]], ""], [], ["loc", [null, [64, 14], [64, 77]]]], " button"]]], ["element", "action", ["customButtonAction", ["get", "customButton.buttonAction", ["loc", [null, [65, 34], [65, 59]]]]], [], ["loc", [null, [65, 4], [65, 61]]]], ["inline", "if", [["get", "customButton.buttonName", ["loc", [null, [66, 9], [66, 32]]]], ["get", "customButton.buttonName", ["loc", [null, [66, 33], [66, 56]]]], ["subexpr", "t", ["components.olv-toolbar.custom-button-text"], [], ["loc", [null, [66, 57], [66, 104]]]]], [], ["loc", [null, [66, 4], [66, 106]]]]],
        locals: ["customButton"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/olv-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "olv-toolbar-info-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "olvt icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui icon button");
        dom.setAttribute(el3, "id", "OLVToolbarInfoCopyButton");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "copy icon");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "olv-toolbar-info-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "remove icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui form");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "olv-toolbar-info-modal-dialog-content center aligned ui field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("textarea");
        dom.setAttribute(el4, "id", "OLVToolbarInfoContent");
        dom.setAttribute(el4, "cols", "80");
        dom.setAttribute(el4, "rows", "20");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element13 = dom.childAt(fragment, [8]);
        var element14 = dom.childAt(element13, [3]);
        var element15 = dom.childAt(element14, [1]);
        var morphs = new Array(13);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[8] = dom.createMorphAt(dom.childAt(element13, [1]), 3, 3);
        morphs[9] = dom.createElementMorph(element15);
        morphs[10] = dom.createMorphAt(element15, 3, 3);
        morphs[11] = dom.createMorphAt(dom.childAt(element14, [3, 1]), 3, 3);
        morphs[12] = dom.createMorphAt(dom.childAt(element13, [5, 1, 1]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "refreshButton", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["block", "if", [["get", "createNewButton", ["loc", [null, [6, 6], [6, 21]]]]], [], 1, null, ["loc", [null, [6, 0], [10, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [11, 6], [11, 18]]]]], [], 2, null, ["loc", [null, [11, 0], [15, 7]]]], ["block", "if", [["get", "availableHierarchicalMode", ["loc", [null, [16, 6], [16, 31]]]]], [], 3, null, ["loc", [null, [16, 0], [20, 7]]]], ["block", "if", [["get", "enableFilters", ["loc", [null, [21, 6], [21, 19]]]]], [], 4, null, ["loc", [null, [21, 0], [33, 7]]]], ["block", "if", [["get", "filterButton", ["loc", [null, [34, 6], [34, 18]]]]], [], 5, null, ["loc", [null, [34, 0], [48, 7]]]], ["block", "if", [["get", "colsConfigButton", ["loc", [null, [49, 6], [49, 22]]]]], [], 6, null, ["loc", [null, [49, 0], [61, 7]]]], ["block", "each", [["get", "customButtons", ["loc", [null, [62, 8], [62, 21]]]]], [], 7, null, ["loc", [null, [62, 0], [68, 9]]]], ["content", "_infoModalDialogCaption", ["loc", [null, [72, 4], [72, 31]]]], ["element", "action", ["copyJSONContent"], [], ["loc", [null, [75, 33], [75, 61]]]], ["inline", "t", ["components.olv-toolbar.copy"], [], ["loc", [null, [77, 6], [77, 41]]]], ["inline", "t", ["components.olv-toolbar.close"], [], ["loc", [null, [82, 8], [82, 44]]]], ["content", "_infoModalDialogContent", ["loc", [null, [88, 63], [88, 90]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("dummy/templates/components/security-assign", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 8,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/security-assign.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "column", ["loc", [null, [6, 10], [6, 20]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/security-assign.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'colspan');
          morphs[1] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [14, 23], [14, 30]]]]]]], ["content", "placeholder", ["loc", [null, [14, 61], [14, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/security-assign.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [26, 29], [26, 37]]]], ["get", "column.readonly", ["loc", [null, [26, 38], [26, 53]]]]], [], ["loc", [null, [26, 25], [26, 54]]]], "true"], [], ["loc", [null, [26, 21], [26, 62]]]], "value", ["subexpr", "@mut", [["get", "column.checked", ["loc", [null, [27, 18], [27, 32]]]]], [], []]], ["loc", [null, [24, 10], [28, 12]]]]],
          locals: ["column"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/security-assign.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["content", "row.name", ["loc", [null, [20, 8], [20, 20]]]], ["block", "each", [["get", "row.columns", ["loc", [null, [22, 16], [22, 27]]]]], [], 0, null, ["loc", [null, [22, 8], [30, 17]]]]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 8
          }
        },
        "moduleName": "dummy/templates/components/security-assign.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 2, 2);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [1, 58], [1, 66]]]], "readonly"], [], ["loc", [null, [1, 53], [1, 79]]]], " table"]]], ["block", "each", [["get", "value.headers", ["loc", [null, [4, 14], [4, 27]]]]], [], 0, null, ["loc", [null, [4, 6], [8, 15]]]], ["block", "unless", [["get", "value.hasContent", ["loc", [null, [12, 14], [12, 30]]]]], [], 1, null, ["loc", [null, [12, 4], [16, 15]]]], ["block", "each", [["get", "value.rows", ["loc", [null, [17, 12], [17, 22]]]]], [], 2, null, ["loc", [null, [17, 4], [32, 13]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/ui-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-message-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "caption", ["loc", [null, [2, 22], [2, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [5, 5], [5, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-message-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "caption", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "message", ["loc", [null, [4, 6], [4, 13]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/ui-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "icon", ["loc", [null, [2, 14], [2, 18]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [9, 4], [9, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [12, 2], [12, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "icon", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "closeable", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["block", "if", [["get", "icon", ["loc", [null, [7, 6], [7, 10]]]]], [], 2, 3, ["loc", [null, [7, 0], [13, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/ui-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-radio", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-radio.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["showAudit"], [], ["loc", [null, [36, 46], [36, 68]]]], ["inline", "t", ["forms.audit.show-audit-button-text"], [], ["loc", [null, [37, 8], [37, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [46, 4], [46, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.eMail", ["loc", [null, [64, 4], [64, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.phone1", ["loc", [null, [82, 4], [82, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.phone2", ["loc", [null, [100, 4], [100, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 116,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.phone3", ["loc", [null, [118, 4], [118, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 137,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.activated", ["loc", [null, [136, 26], [136, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 143,
              "column": 2
            },
            "end": {
              "line": 147,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.vK", ["loc", [null, [145, 4], [145, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 165,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.facebook", ["loc", [null, [163, 4], [163, 29]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.twitter", ["loc", [null, [181, 4], [181, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 198,
              "column": 2
            },
            "end": {
              "line": 200,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.birthday", ["loc", [null, [199, 26], [199, 51]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.gender", ["loc", [null, [214, 26], [214, 49]]]]],
        locals: [],
        templates: []
      };
    })();
    var child14 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 222,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vip", ["loc", [null, [223, 26], [223, 46]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 239,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var element8 = dom.childAt(element3, [9]);
        var element9 = dom.childAt(element3, [11]);
        var element10 = dom.childAt(element3, [13]);
        var element11 = dom.childAt(element3, [15]);
        var element12 = dom.childAt(element3, [17]);
        var element13 = dom.childAt(element3, [19]);
        var element14 = dom.childAt(element3, [21]);
        var element15 = dom.childAt(element3, [23]);
        var element16 = dom.childAt(element3, [25]);
        var element17 = dom.childAt(element3, [27]);
        var element18 = dom.childAt(element3, [29]);
        var morphs = new Array(50);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 5, 5);
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        morphs[13] = dom.createMorphAt(element8, 1, 1);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element8, 5, 5);
        morphs[16] = dom.createMorphAt(element9, 1, 1);
        morphs[17] = dom.createMorphAt(element9, 3, 3);
        morphs[18] = dom.createMorphAt(element9, 5, 5);
        morphs[19] = dom.createMorphAt(element10, 1, 1);
        morphs[20] = dom.createMorphAt(element10, 3, 3);
        morphs[21] = dom.createMorphAt(element10, 5, 5);
        morphs[22] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element11, 3, 3);
        morphs[24] = dom.createMorphAt(element11, 5, 5);
        morphs[25] = dom.createMorphAt(element11, 7, 7);
        morphs[26] = dom.createMorphAt(element12, 1, 1);
        morphs[27] = dom.createMorphAt(element12, 3, 3);
        morphs[28] = dom.createMorphAt(element12, 5, 5);
        morphs[29] = dom.createMorphAt(element13, 1, 1);
        morphs[30] = dom.createMorphAt(element13, 3, 3);
        morphs[31] = dom.createMorphAt(element13, 5, 5);
        morphs[32] = dom.createMorphAt(element14, 1, 1);
        morphs[33] = dom.createMorphAt(element14, 3, 3);
        morphs[34] = dom.createMorphAt(element14, 5, 5);
        morphs[35] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[36] = dom.createMorphAt(element15, 3, 3);
        morphs[37] = dom.createMorphAt(element15, 5, 5);
        morphs[38] = dom.createMorphAt(element15, 7, 7);
        morphs[39] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[40] = dom.createMorphAt(element16, 3, 3);
        morphs[41] = dom.createMorphAt(element16, 5, 5);
        morphs[42] = dom.createMorphAt(element16, 7, 7);
        morphs[43] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[44] = dom.createMorphAt(element17, 3, 3);
        morphs[45] = dom.createMorphAt(element17, 5, 5);
        morphs[46] = dom.createMorphAt(element17, 7, 7);
        morphs[47] = dom.createAttrMorph(element18, 'class');
        morphs[48] = dom.createMorphAt(element18, 1, 1);
        morphs[49] = dom.createMorphAt(element18, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [35, 16], [35, 27]]]]], [], 2, null, ["loc", [null, [35, 6], [39, 17]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [44, 8], [44, 25]]]]], [], 3, null, ["loc", [null, [44, 2], [48, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [51, 14], [51, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [52, 11], [52, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [54, 8], [54, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [55, 12], [55, 29]]]], "error", ""], [], ["loc", [null, [55, 8], [55, 41]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [56, 8], [56, 76]]]]], ["loc", [null, [49, 2], [57, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [58, 38], [58, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [58, 2], [58, 77]]]], ["block", "if", [["get", "model.errors.eMail", ["loc", [null, [62, 8], [62, 26]]]]], [], 4, null, ["loc", [null, [62, 2], [66, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [69, 14], [69, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 11], [70, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [72, 8], [72, 19]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [73, 12], [73, 30]]]], "error", ""], [], ["loc", [null, [73, 8], [73, 42]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [74, 8], [74, 77]]]]], ["loc", [null, [67, 2], [75, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.eMail", ["loc", [null, [76, 38], [76, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [76, 2], [76, 78]]]], ["block", "if", [["get", "model.errors.phone1", ["loc", [null, [80, 8], [80, 27]]]]], [], 5, null, ["loc", [null, [80, 2], [84, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [87, 14], [87, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [88, 11], [88, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [90, 8], [90, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [91, 12], [91, 31]]]], "error", ""], [], ["loc", [null, [91, 8], [91, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [92, 8], [92, 78]]]]], ["loc", [null, [85, 2], [93, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone1", ["loc", [null, [94, 38], [94, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [94, 2], [94, 79]]]], ["block", "if", [["get", "model.errors.phone2", ["loc", [null, [98, 8], [98, 27]]]]], [], 6, null, ["loc", [null, [98, 2], [102, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [105, 14], [105, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [106, 11], [106, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [108, 8], [108, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [109, 12], [109, 31]]]], "error", ""], [], ["loc", [null, [109, 8], [109, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [110, 8], [110, 78]]]]], ["loc", [null, [103, 2], [111, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone2", ["loc", [null, [112, 38], [112, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [112, 2], [112, 79]]]], ["block", "if", [["get", "model.errors.phone3", ["loc", [null, [116, 8], [116, 27]]]]], [], 7, null, ["loc", [null, [116, 2], [120, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [123, 14], [123, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [124, 11], [124, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [126, 8], [126, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [127, 12], [127, 31]]]], "error", ""], [], ["loc", [null, [127, 8], [127, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [128, 8], [128, 78]]]]], ["loc", [null, [121, 2], [129, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone3", ["loc", [null, [130, 38], [130, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [130, 2], [130, 79]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [134, 9], [134, 84]]]], ["block", "if", [["get", "model.errors.activated", ["loc", [null, [135, 8], [135, 30]]]]], [], 8, null, ["loc", [null, [135, 2], [137, 9]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [138, 32], [138, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [138, 47], [138, 62]]]]], [], []]], ["loc", [null, [138, 2], [138, 64]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.activated", ["loc", [null, [139, 38], [139, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [139, 2], [139, 82]]]], ["block", "if", [["get", "model.errors.vK", ["loc", [null, [143, 8], [143, 23]]]]], [], 9, null, ["loc", [null, [143, 2], [147, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [150, 14], [150, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [151, 11], [151, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [153, 8], [153, 16]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [154, 12], [154, 27]]]], "error", ""], [], ["loc", [null, [154, 8], [154, 39]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [155, 8], [155, 74]]]]], ["loc", [null, [148, 2], [156, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vK", ["loc", [null, [157, 38], [157, 53]]]]], [], []], "pointing", "pointing"], ["loc", [null, [157, 2], [157, 75]]]], ["block", "if", [["get", "model.errors.facebook", ["loc", [null, [161, 8], [161, 29]]]]], [], 10, null, ["loc", [null, [161, 2], [165, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [168, 14], [168, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [169, 11], [169, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [171, 8], [171, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [172, 12], [172, 33]]]], "error", ""], [], ["loc", [null, [172, 8], [172, 45]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [173, 8], [173, 80]]]]], ["loc", [null, [166, 2], [174, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.facebook", ["loc", [null, [175, 38], [175, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [175, 2], [175, 81]]]], ["block", "if", [["get", "model.errors.twitter", ["loc", [null, [179, 8], [179, 28]]]]], [], 11, null, ["loc", [null, [179, 2], [183, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [186, 14], [186, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [187, 11], [187, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [189, 8], [189, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [190, 12], [190, 32]]]], "error", ""], [], ["loc", [null, [190, 8], [190, 44]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [191, 8], [191, 79]]]]], ["loc", [null, [184, 2], [192, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.twitter", ["loc", [null, [193, 38], [193, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [193, 2], [193, 80]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [197, 9], [197, 83]]]], ["block", "if", [["get", "model.errors.birthday", ["loc", [null, [198, 8], [198, 29]]]]], [], 12, null, ["loc", [null, [198, 2], [200, 9]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [204, 13], [204, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [205, 10], [205, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [206, 14], [206, 35]]]], "error", ""], [], ["loc", [null, [206, 10], [206, 47]]]]], ["loc", [null, [201, 2], [207, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.birthday", ["loc", [null, [208, 38], [208, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [208, 2], [208, 81]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [212, 9], [212, 81]]]], ["block", "if", [["get", "model.errors.gender", ["loc", [null, [213, 8], [213, 27]]]]], [], 13, null, ["loc", [null, [213, 2], [215, 9]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [216, 29], [216, 76]]]], "value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [216, 83], [216, 95]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [216, 105], [216, 113]]]]], [], []]], ["loc", [null, [216, 2], [216, 115]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.gender", ["loc", [null, [217, 38], [217, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [217, 2], [217, 79]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [221, 9], [221, 78]]]], ["block", "if", [["get", "model.errors.vip", ["loc", [null, [222, 8], [222, 24]]]]], [], 14, null, ["loc", [null, [222, 2], [224, 9]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [225, 32], [225, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [225, 47], [225, 56]]]]], [], []]], ["loc", [null, [225, 2], [225, 58]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vip", ["loc", [null, [226, 38], [226, 54]]]]], [], []], "pointing", "pointing"], ["loc", [null, [226, 2], [226, 76]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [229, 23], [229, 41]]]], "error", ""], [], ["loc", [null, [229, 18], [229, 54]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [231, 10], [231, 21]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [232, 10], [232, 79]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [233, 13], [233, 21]]]]], [], []]], ["loc", [null, [230, 2], [234, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.karma", ["loc", [null, [235, 38], [235, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [235, 2], [235, 78]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-list.caption"], [], ["loc", [null, [1, 4], [1, 69]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "EmberFlexberryDummyApplicationUserList"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-comment-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.text", ["loc", [null, [40, 4], [40, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.votes", ["loc", [null, [58, 4], [58, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.moderated", ["loc", [null, [76, 26], [76, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.author", ["loc", [null, [85, 30], [85, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 103,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.userVotes", ["loc", [null, [104, 28], [104, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 118,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var morphs = new Array(24);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element6, 5, 5);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(element7, 5, 5);
        morphs[15] = dom.createMorphAt(element7, 7, 7);
        morphs[16] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element8, 3, 3);
        morphs[18] = dom.createMorphAt(element8, 5, 5);
        morphs[19] = dom.createMorphAt(element8, 7, 7);
        morphs[20] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[21] = dom.createMorphAt(element9, 3, 3);
        morphs[22] = dom.createMorphAt(element9, 5, 5);
        morphs[23] = dom.createMorphAt(element9, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.caption"], [], ["loc", [null, [1, 22], [1, 78]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "if", [["get", "model.errors.text", ["loc", [null, [38, 8], [38, 25]]]]], [], 2, null, ["loc", [null, [38, 2], [42, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [45, 14], [45, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 11], [46, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [48, 8], [48, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [49, 12], [49, 29]]]], "error", ""], [], ["loc", [null, [49, 8], [49, 41]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.text-caption"], [], ["loc", [null, [50, 8], [50, 67]]]]], ["loc", [null, [43, 2], [51, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [52, 38], [52, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [52, 2], [52, 77]]]], ["block", "if", [["get", "model.errors.votes", ["loc", [null, [56, 8], [56, 26]]]]], [], 3, null, ["loc", [null, [56, 2], [60, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [63, 14], [63, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 11], [64, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [66, 8], [66, 19]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [67, 12], [67, 30]]]], "error", ""], [], ["loc", [null, [67, 8], [67, 42]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.votes-caption"], [], ["loc", [null, [68, 8], [68, 68]]]]], ["loc", [null, [61, 2], [69, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [70, 38], [70, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [70, 2], [70, 78]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.moderated-caption"], [], ["loc", [null, [74, 9], [74, 75]]]], ["block", "if", [["get", "model.errors.moderated", ["loc", [null, [75, 8], [75, 30]]]]], [], 4, null, ["loc", [null, [75, 2], [77, 9]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 32], [78, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [78, 47], [78, 62]]]]], [], []]], ["loc", [null, [78, 2], [78, 64]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [79, 38], [79, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [79, 2], [79, 82]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.author-caption"], [], ["loc", [null, [83, 11], [83, 74]]]], ["block", "if", [["get", "model.errors.author", ["loc", [null, [84, 8], [84, 27]]]]], [], 5, null, ["loc", [null, [84, 2], [86, 9]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [91, 8], [91, 20]]]]], [], []], "displayAttributeName", "name", "relationName", "author", "projection", "ApplicationUserL", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.author-caption"], [], ["loc", [null, [95, 8], [95, 69]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [96, 11], [96, 19]]]]], [], []]], ["loc", [null, [87, 2], [97, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [98, 38], [98, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [98, 2], [98, 79]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.userVotes-caption"], [], ["loc", [null, [102, 9], [102, 75]]]], ["block", "if", [["get", "model.errors.userVotes", ["loc", [null, [103, 8], [103, 30]]]]], [], 6, null, ["loc", [null, [103, 2], [105, 9]]]], ["inline", "flexberry-groupedit", [], ["componentName", "userVotesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [108, 20], [108, 56]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [109, 12], [109, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [110, 13], [110, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [112, 14], [112, 36]]]], "error", ""], [], ["loc", [null, [112, 10], [112, 48]]]]], ["loc", [null, [106, 2], [113, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [114, 38], [114, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [114, 2], [114, 82]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["showAudit"], [], ["loc", [null, [36, 46], [36, 68]]]], ["inline", "t", ["forms.audit.show-audit-button-text"], [], ["loc", [null, [37, 8], [37, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [45, 4], [45, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [5]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-localization-edit.caption"], [], ["loc", [null, [1, 22], [1, 83]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [35, 16], [35, 27]]]]], [], 2, null, ["loc", [null, [35, 6], [39, 17]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [43, 8], [43, 25]]]]], [], 3, null, ["loc", [null, [43, 2], [47, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [50, 14], [50, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 11], [51, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [53, 8], [53, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [54, 12], [54, 29]]]], "error", ""], [], ["loc", [null, [54, 8], [54, 41]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-localization-edit.name-caption"], [], ["loc", [null, [55, 8], [55, 72]]]]], ["loc", [null, [48, 2], [56, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [57, 38], [57, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 77]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-localization-list.caption"], [], ["loc", [null, [1, 4], [1, 65]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-localization", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "EmberFlexberryDummyLocalizationList"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["showAudit"], [], ["loc", [null, [36, 46], [36, 68]]]], ["inline", "t", ["forms.audit.show-audit-button-text"], [], ["loc", [null, [37, 8], [37, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.address", ["loc", [null, [45, 4], [45, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 65,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.text", ["loc", [null, [63, 4], [63, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.date", ["loc", [null, [81, 26], [81, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.votes", ["loc", [null, [96, 4], [96, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.moderated", ["loc", [null, [114, 26], [114, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 122,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.type", ["loc", [null, [123, 30], [123, 51]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 141,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.author", ["loc", [null, [142, 30], [142, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.editor1", ["loc", [null, [161, 30], [161, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 181,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.files", ["loc", [null, [180, 28], [180, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 197,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.userVotes", ["loc", [null, [196, 28], [196, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.comments", ["loc", [null, [212, 28], [212, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 226,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var element8 = dom.childAt(element3, [9]);
        var element9 = dom.childAt(element3, [11]);
        var element10 = dom.childAt(element3, [13]);
        var element11 = dom.childAt(element3, [15]);
        var element12 = dom.childAt(element3, [17]);
        var element13 = dom.childAt(element3, [19]);
        var element14 = dom.childAt(element3, [21]);
        var element15 = dom.childAt(element3, [23]);
        var element16 = dom.childAt(element3, [25]);
        var morphs = new Array(48);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 5, 5);
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element8, 5, 5);
        morphs[16] = dom.createMorphAt(element8, 7, 7);
        morphs[17] = dom.createMorphAt(element9, 1, 1);
        morphs[18] = dom.createMorphAt(element9, 3, 3);
        morphs[19] = dom.createMorphAt(element9, 5, 5);
        morphs[20] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[21] = dom.createMorphAt(element10, 3, 3);
        morphs[22] = dom.createMorphAt(element10, 5, 5);
        morphs[23] = dom.createMorphAt(element10, 7, 7);
        morphs[24] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[25] = dom.createMorphAt(element11, 3, 3);
        morphs[26] = dom.createMorphAt(element11, 5, 5);
        morphs[27] = dom.createMorphAt(element11, 7, 7);
        morphs[28] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[29] = dom.createMorphAt(element12, 3, 3);
        morphs[30] = dom.createMorphAt(element12, 5, 5);
        morphs[31] = dom.createMorphAt(element12, 7, 7);
        morphs[32] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[33] = dom.createMorphAt(element13, 3, 3);
        morphs[34] = dom.createMorphAt(element13, 5, 5);
        morphs[35] = dom.createMorphAt(element13, 7, 7);
        morphs[36] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[37] = dom.createMorphAt(element14, 3, 3);
        morphs[38] = dom.createMorphAt(element14, 5, 5);
        morphs[39] = dom.createMorphAt(element14, 7, 7);
        morphs[40] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[41] = dom.createMorphAt(element15, 3, 3);
        morphs[42] = dom.createMorphAt(element15, 5, 5);
        morphs[43] = dom.createMorphAt(element15, 7, 7);
        morphs[44] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[45] = dom.createMorphAt(element16, 3, 3);
        morphs[46] = dom.createMorphAt(element16, 5, 5);
        morphs[47] = dom.createMorphAt(element16, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [35, 16], [35, 27]]]]], [], 2, null, ["loc", [null, [35, 6], [39, 17]]]], ["block", "if", [["get", "model.errors.address", ["loc", [null, [43, 8], [43, 28]]]]], [], 3, null, ["loc", [null, [43, 2], [47, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [50, 14], [50, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 11], [51, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [53, 8], [53, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [54, 12], [54, 32]]]], "error", ""], [], ["loc", [null, [54, 8], [54, 44]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [55, 8], [55, 73]]]]], ["loc", [null, [48, 2], [56, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [57, 38], [57, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 80]]]], ["block", "if", [["get", "model.errors.text", ["loc", [null, [61, 8], [61, 25]]]]], [], 4, null, ["loc", [null, [61, 2], [65, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [68, 14], [68, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 11], [69, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [71, 8], [71, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [72, 12], [72, 29]]]], "error", ""], [], ["loc", [null, [72, 8], [72, 41]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [73, 8], [73, 70]]]]], ["loc", [null, [66, 2], [74, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [75, 38], [75, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [75, 2], [75, 77]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [79, 9], [79, 73]]]], ["block", "if", [["get", "model.errors.date", ["loc", [null, [80, 8], [80, 25]]]]], [], 5, null, ["loc", [null, [80, 2], [82, 9]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [86, 13], [86, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [87, 10], [87, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [88, 14], [88, 31]]]], "error", ""], [], ["loc", [null, [88, 10], [88, 43]]]]], ["loc", [null, [83, 2], [89, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [90, 38], [90, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [90, 2], [90, 77]]]], ["block", "if", [["get", "model.errors.votes", ["loc", [null, [94, 8], [94, 26]]]]], [], 6, null, ["loc", [null, [94, 2], [98, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [101, 14], [101, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [102, 11], [102, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [104, 8], [104, 19]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [105, 12], [105, 30]]]], "error", ""], [], ["loc", [null, [105, 8], [105, 42]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [106, 8], [106, 71]]]]], ["loc", [null, [99, 2], [107, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [108, 38], [108, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [108, 2], [108, 78]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [112, 9], [112, 78]]]], ["block", "if", [["get", "model.errors.moderated", ["loc", [null, [113, 8], [113, 30]]]]], [], 7, null, ["loc", [null, [113, 2], [115, 9]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [116, 32], [116, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [116, 47], [116, 62]]]]], [], []]], ["loc", [null, [116, 2], [116, 64]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [117, 38], [117, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [117, 2], [117, 82]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [121, 11], [121, 75]]]], ["block", "if", [["get", "model.errors.type", ["loc", [null, [122, 8], [122, 25]]]]], [], 8, null, ["loc", [null, [122, 2], [124, 9]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [129, 8], [129, 18]]]]], [], []], "displayAttributeName", "name", "relationName", "type", "projection", "SuggestionTypeL", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [133, 8], [133, 70]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [134, 11], [134, 19]]]]], [], []]], ["loc", [null, [125, 2], [135, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [136, 38], [136, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [136, 2], [136, 77]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [140, 11], [140, 77]]]], ["block", "if", [["get", "model.errors.author", ["loc", [null, [141, 8], [141, 27]]]]], [], 9, null, ["loc", [null, [141, 2], [143, 9]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [148, 8], [148, 20]]]]], [], []], "displayAttributeName", "name", "relationName", "author", "projection", "ApplicationUserL", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [152, 8], [152, 72]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [153, 11], [153, 19]]]]], [], []]], ["loc", [null, [144, 2], [154, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [155, 38], [155, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [155, 2], [155, 79]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [159, 11], [159, 78]]]], ["block", "if", [["get", "model.errors.editor1", ["loc", [null, [160, 8], [160, 28]]]]], [], 10, null, ["loc", [null, [160, 2], [162, 9]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [167, 8], [167, 21]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [171, 8], [171, 73]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [172, 11], [172, 19]]]]], [], []]], ["loc", [null, [163, 2], [173, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [174, 38], [174, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [174, 2], [174, 80]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [178, 9], [178, 74]]]], ["block", "if", [["get", "model.errors.files", ["loc", [null, [179, 8], [179, 26]]]]], [], 11, null, ["loc", [null, [179, 2], [181, 9]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [184, 20], [184, 52]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [185, 12], [185, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [186, 13], [186, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [188, 14], [188, 32]]]], "error", ""], [], ["loc", [null, [188, 10], [188, 44]]]]], ["loc", [null, [182, 2], [189, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [190, 38], [190, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [190, 2], [190, 78]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [194, 9], [194, 78]]]], ["block", "if", [["get", "model.errors.userVotes", ["loc", [null, [195, 8], [195, 30]]]]], [], 12, null, ["loc", [null, [195, 2], [197, 9]]]], ["inline", "flexberry-groupedit", [], ["componentName", "userVotesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [200, 20], [200, 56]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [201, 12], [201, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [202, 13], [202, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [204, 14], [204, 36]]]], "error", ""], [], ["loc", [null, [204, 10], [204, 48]]]]], ["loc", [null, [198, 2], [205, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [206, 38], [206, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [206, 2], [206, 82]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [210, 9], [210, 77]]]], ["block", "if", [["get", "model.errors.comments", ["loc", [null, [211, 8], [211, 29]]]]], [], 13, null, ["loc", [null, [211, 2], [213, 9]]]], ["inline", "flexberry-groupedit", [], ["componentName", "commentsGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [216, 20], [216, 55]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [217, 12], [217, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [218, 13], [218, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [220, 14], [220, 35]]]], "error", ""], [], ["loc", [null, [220, 10], [220, 47]]]]], ["loc", [null, [214, 2], [221, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [222, 38], [222, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [222, 2], [222, 81]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [1, 4], [1, 63]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "EmberFlexberryDummySuggestionList"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["showAudit"], [], ["loc", [null, [36, 46], [36, 68]]]], ["inline", "t", ["forms.audit.show-audit-button-text"], [], ["loc", [null, [37, 8], [37, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [45, 4], [45, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.moderated", ["loc", [null, [63, 26], [63, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 73,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.parent", ["loc", [null, [72, 30], [72, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 92,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.localizedTypes", ["loc", [null, [91, 28], [91, 59]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 105,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var element8 = dom.childAt(element3, [9]);
        var element9 = dom.childAt(element3, [11]);
        var morphs = new Array(22);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 5, 5);
        morphs[10] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        morphs[13] = dom.createMorphAt(element7, 7, 7);
        morphs[14] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(element8, 3, 3);
        morphs[16] = dom.createMorphAt(element8, 5, 5);
        morphs[17] = dom.createMorphAt(element8, 7, 7);
        morphs[18] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[19] = dom.createMorphAt(element9, 3, 3);
        morphs[20] = dom.createMorphAt(element9, 5, 5);
        morphs[21] = dom.createMorphAt(element9, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [35, 16], [35, 27]]]]], [], 2, null, ["loc", [null, [35, 6], [39, 17]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [43, 8], [43, 25]]]]], [], 3, null, ["loc", [null, [43, 2], [47, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [50, 14], [50, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 11], [51, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [53, 8], [53, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [54, 12], [54, 29]]]], "error", ""], [], ["loc", [null, [54, 8], [54, 41]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.name-caption"], [], ["loc", [null, [55, 8], [55, 75]]]]], ["loc", [null, [48, 2], [56, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [57, 38], [57, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 77]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.moderated-caption"], [], ["loc", [null, [61, 9], [61, 83]]]], ["block", "if", [["get", "model.errors.moderated", ["loc", [null, [62, 8], [62, 30]]]]], [], 4, null, ["loc", [null, [62, 2], [64, 9]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [65, 32], [65, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [65, 47], [65, 62]]]]], [], []]], ["loc", [null, [65, 2], [65, 64]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [66, 38], [66, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [66, 2], [66, 82]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [70, 11], [70, 82]]]], ["block", "if", [["get", "model.errors.parent", ["loc", [null, [71, 8], [71, 27]]]]], [], 5, null, ["loc", [null, [71, 2], [73, 9]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.parent", ["loc", [null, [78, 8], [78, 20]]]]], [], []], "displayAttributeName", "name", "relationName", "parent", "projection", "SuggestionTypeL", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [82, 8], [82, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [83, 11], [83, 19]]]]], [], []]], ["loc", [null, [74, 2], [84, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.parent", ["loc", [null, [85, 38], [85, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [85, 2], [85, 79]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.localizedTypes-caption"], [], ["loc", [null, [89, 9], [89, 88]]]], ["block", "if", [["get", "model.errors.localizedTypes", ["loc", [null, [90, 8], [90, 35]]]]], [], 6, null, ["loc", [null, [90, 2], [92, 9]]]], ["inline", "flexberry-groupedit", [], ["componentName", "localizedTypesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.localizedTypes", ["loc", [null, [95, 20], [95, 61]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.localizedTypes", ["loc", [null, [96, 12], [96, 32]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [97, 13], [97, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.localizedTypes", ["loc", [null, [99, 14], [99, 41]]]], "error", ""], [], ["loc", [null, [99, 10], [99, 53]]]]], ["loc", [null, [93, 2], [100, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.localizedTypes", ["loc", [null, [101, 38], [101, 65]]]]], [], []], "pointing", "pointing"], ["loc", [null, [101, 2], [101, 87]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-list.caption"], [], ["loc", [null, [1, 4], [1, 68]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "EmberFlexberryDummySuggestionTypeList"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-test-poly-child-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["showAudit"], [], ["loc", [null, [36, 46], [36, 68]]]], ["inline", "t", ["forms.audit.show-audit-button-text"], [], ["loc", [null, [37, 8], [37, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.pole", ["loc", [null, [45, 4], [45, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 65,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.childPole", ["loc", [null, [63, 4], [63, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 79,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var morphs = new Array(13);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 5, 5);
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-test-poly-child-edit.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [35, 16], [35, 27]]]]], [], 2, null, ["loc", [null, [35, 6], [39, 17]]]], ["block", "if", [["get", "model.errors.pole", ["loc", [null, [43, 8], [43, 25]]]]], [], 3, null, ["loc", [null, [43, 2], [47, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [50, 14], [50, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 11], [51, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.pole", ["loc", [null, [53, 8], [53, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.pole", ["loc", [null, [54, 12], [54, 29]]]], "error", ""], [], ["loc", [null, [54, 8], [54, 41]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-test-poly-child-edit.pole-caption"], [], ["loc", [null, [55, 8], [55, 75]]]]], ["loc", [null, [48, 2], [56, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.pole", ["loc", [null, [57, 38], [57, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 77]]]], ["block", "if", [["get", "model.errors.childPole", ["loc", [null, [61, 8], [61, 30]]]]], [], 4, null, ["loc", [null, [61, 2], [65, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [68, 14], [68, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 11], [69, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.childPole", ["loc", [null, [71, 8], [71, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.childPole", ["loc", [null, [72, 12], [72, 34]]]], "error", ""], [], ["loc", [null, [72, 8], [72, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-test-poly-child-edit.childPole-caption"], [], ["loc", [null, [73, 8], [73, 80]]]]], ["loc", [null, [66, 2], [74, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.childPole", ["loc", [null, [75, 38], [75, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [75, 2], [75, 82]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-test-poly-child-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-test-poly-child-list.caption"], [], ["loc", [null, [1, 4], [1, 68]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-test-poly-child", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "EmberFlexberryDummyTestPolyChildList"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-test-poly-child-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-child-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-test-poly-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["showAudit"], [], ["loc", [null, [36, 46], [36, 68]]]], ["inline", "t", ["forms.audit.show-audit-button-text"], [], ["loc", [null, [37, 8], [37, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.selfPole", ["loc", [null, [45, 4], [45, 29]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.relation", ["loc", [null, [63, 30], [63, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [3, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createElementMorph(element5);
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 5, 5);
        morphs[10] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        morphs[13] = dom.createMorphAt(element7, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-test-poly-edit.caption"], [], ["loc", [null, [1, 22], [1, 80]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [35, 16], [35, 27]]]]], [], 2, null, ["loc", [null, [35, 6], [39, 17]]]], ["block", "if", [["get", "model.errors.selfPole", ["loc", [null, [43, 8], [43, 29]]]]], [], 3, null, ["loc", [null, [43, 2], [47, 9]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [50, 14], [50, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 11], [51, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.selfPole", ["loc", [null, [53, 8], [53, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.selfPole", ["loc", [null, [54, 12], [54, 33]]]], "error", ""], [], ["loc", [null, [54, 8], [54, 45]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-test-poly-edit.selfPole-caption"], [], ["loc", [null, [55, 8], [55, 73]]]]], ["loc", [null, [48, 2], [56, 2]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.selfPole", ["loc", [null, [57, 38], [57, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 81]]]], ["inline", "t", ["forms.ember-flexberry-dummy-test-poly-edit.relation-caption"], [], ["loc", [null, [61, 11], [61, 78]]]], ["block", "if", [["get", "model.errors.relation", ["loc", [null, [62, 8], [62, 29]]]]], [], 4, null, ["loc", [null, [62, 2], [64, 9]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.relation", ["loc", [null, [69, 8], [69, 22]]]]], [], []], "displayAttributeName", "pole", "relationName", "relation", "projection", "", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-test-poly-edit.relation-caption"], [], ["loc", [null, [73, 8], [73, 73]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [74, 11], [74, 19]]]]], [], []]], ["loc", [null, [65, 2], [75, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.relation", ["loc", [null, [76, 38], [76, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [76, 2], [76, 81]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-test-poly-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-test-poly-list.caption"], [], ["loc", [null, [1, 4], [1, 62]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-test-poly", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "EmberFlexberryDummyTestPolyList"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-test-poly-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-test-poly-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/flexberry-file-view-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/flexberry-file-view-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1, "class", "flexberry-file-view-dialog");
          dom.setAttribute(el1, "alt", "LoadedImage");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "imageSrc", ["loc", [null, [8, 49], [8, 57]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/flexberry-file-view-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "useOkButton", false, "close", "removeModalDialog", "created", "createdModalDialog", "viewImageContent", true, "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [7, 12], [7, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 165,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1, 1, 1]);
        var element2 = dom.childAt(element0, [7]);
        var element3 = dom.childAt(element0, [11]);
        var element4 = dom.childAt(element0, [19]);
        var element5 = dom.childAt(element0, [23]);
        var element6 = dom.childAt(element0, [27]);
        var morphs = new Array(21);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[6] = dom.createMorphAt(element2, 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element0, [9]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element3, 3, 3);
        morphs[10] = dom.createMorphAt(dom.childAt(element0, [13]), 1, 1);
        morphs[11] = dom.createMorphAt(dom.childAt(element0, [15]), 1, 1);
        morphs[12] = dom.createMorphAt(dom.childAt(element0, [17]), 1, 1);
        morphs[13] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element4, 3, 3);
        morphs[15] = dom.createMorphAt(dom.childAt(element0, [21]), 1, 1);
        morphs[16] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element5, 3, 3);
        morphs[18] = dom.createMorphAt(dom.childAt(element0, [25]), 1, 1);
        morphs[19] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element6, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.caption"], [], ["loc", [null, [1, 22], [1, 108]]]], ["element", "action", ["close"], [], ["loc", [null, [6, 46], [6, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [7, 8], [7, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [14, 14], [14, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [15, 11], [15, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.objectPrimaryKey", ["loc", [null, [17, 8], [17, 30]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.objectPrimaryKey", ["loc", [null, [18, 12], [18, 41]]]], "error", ""], [], ["loc", [null, [18, 8], [18, 53]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.objectPrimaryKey-caption"], [], ["loc", [null, [19, 8], [19, 109]]]]], ["loc", [null, [12, 2], [20, 2]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [26, 14], [26, 58]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.objectType.name", ["loc", [null, [29, 8], [29, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.objectType.name", ["loc", [null, [30, 12], [30, 40]]]], "error", ""], [], ["loc", [null, [30, 8], [30, 52]]]], "label", "(Тип объекта)"], ["loc", [null, [24, 2], [32, 2]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.operationTime-caption"], [], ["loc", [null, [36, 9], [36, 109]]]], ["inline", "flexberry-datepicker", [], ["hasTimePicker", true, "placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.operationTime", ["loc", [null, [42, 10], [42, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.operationTime", ["loc", [null, [43, 14], [43, 40]]]], "error", ""], [], ["loc", [null, [43, 10], [43, 52]]]]], ["loc", [null, [37, 2], [44, 4]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [50, 14], [50, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 11], [51, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.operationType", ["loc", [null, [53, 8], [53, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.operationType", ["loc", [null, [54, 12], [54, 38]]]], "error", ""], [], ["loc", [null, [54, 8], [54, 50]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.operationType-caption"], [], ["loc", [null, [55, 8], [55, 106]]]]], ["loc", [null, [48, 2], [56, 2]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.executionResult-caption"], [], ["loc", [null, [60, 9], [60, 111]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant"], [], ["loc", [null, [61, 29], [61, 117]]]], "value", ["subexpr", "@mut", [["get", "model.executionResult", ["loc", [null, [61, 124], [61, 145]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [61, 155], [61, 163]]]]], [], []]], ["loc", [null, [61, 2], [61, 165]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [67, 14], [67, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [68, 11], [68, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.source", ["loc", [null, [70, 8], [70, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.source", ["loc", [null, [71, 12], [71, 31]]]], "error", ""], [], ["loc", [null, [71, 8], [71, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.source-caption"], [], ["loc", [null, [72, 8], [72, 99]]]]], ["loc", [null, [65, 2], [73, 2]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [79, 14], [79, 58]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.user.name", ["loc", [null, [82, 8], [82, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.user.name", ["loc", [null, [83, 12], [83, 34]]]], "error", ""], [], ["loc", [null, [83, 8], [83, 46]]]], "label", "(Имя)"], ["loc", [null, [77, 2], [85, 2]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [91, 14], [91, 58]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.user.login", ["loc", [null, [94, 8], [94, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.user.login", ["loc", [null, [95, 12], [95, 35]]]], "error", ""], [], ["loc", [null, [95, 8], [95, 47]]]], "label", "(Логин)"], ["loc", [null, [89, 2], [97, 2]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.createTime-caption"], [], ["loc", [null, [101, 9], [101, 106]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [105, 13], [105, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.createTime", ["loc", [null, [106, 10], [106, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.createTime", ["loc", [null, [107, 14], [107, 37]]]], "error", ""], [], ["loc", [null, [107, 10], [107, 49]]]]], ["loc", [null, [102, 2], [108, 4]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [114, 14], [114, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [115, 11], [115, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.creator", ["loc", [null, [117, 8], [117, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.creator", ["loc", [null, [118, 12], [118, 32]]]], "error", ""], [], ["loc", [null, [118, 8], [118, 44]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.creator-caption"], [], ["loc", [null, [119, 8], [119, 100]]]]], ["loc", [null, [112, 2], [120, 2]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.editTime-caption"], [], ["loc", [null, [124, 9], [124, 104]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [128, 13], [128, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.editTime", ["loc", [null, [129, 10], [129, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.editTime", ["loc", [null, [130, 14], [130, 35]]]], "error", ""], [], ["loc", [null, [130, 10], [130, 47]]]]], ["loc", [null, [125, 2], [131, 4]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [137, 14], [137, 58]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [138, 11], [138, 19]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.editor", ["loc", [null, [140, 8], [140, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.editor", ["loc", [null, [141, 12], [141, 31]]]], "error", ""], [], ["loc", [null, [141, 8], [141, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.editor-caption"], [], ["loc", [null, [142, 8], [142, 99]]]]], ["loc", [null, [135, 2], [143, 2]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-e.auditFields-caption"], [], ["loc", [null, [147, 9], [147, 107]]]], ["inline", "flexberry-groupedit", [], ["componentName", "auditFieldsGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.auditFields", ["loc", [null, [150, 20], [150, 58]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.auditFields", ["loc", [null, [151, 12], [151, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [152, 13], [152, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.auditFields", ["loc", [null, [154, 14], [154, 38]]]], "error", ""], [], ["loc", [null, [154, 10], [154, 50]]]], "showDeleteMenuItemInRow", false, "showEditMenuItemInRow", false, "showDeleteButtonInRow", false, "deleteButton", false, "createNewButton", false, "showCheckBoxInRow", false], ["loc", [null, [148, 2], [161, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l.caption"], [], ["loc", [null, [1, 4], [1, 90]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETBusinessAuditObjectsAuditEntityL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var element10 = dom.childAt(element2, [15]);
        var morphs = new Array(21);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element7, 1, 1);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element8, 5, 5);
        morphs[16] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element9, 3, 3);
        morphs[18] = dom.createMorphAt(element9, 5, 5);
        morphs[19] = dom.createMorphAt(element10, 1, 1);
        morphs[20] = dom.createMorphAt(element10, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.caption"], [], ["loc", [null, [1, 22], [1, 88]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.permition-caption"], [], ["loc", [null, [38, 9], [38, 85]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.permition", ["loc", [null, [43, 10], [43, 25]]]]], [], []], "relationName", "permition", "projection", "Sec_PermitionL", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.permition-caption"], [], ["loc", [null, [47, 10], [47, 84]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [48, 13], [48, 21]]]]], [], []]], ["loc", [null, [39, 2], [49, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.permition", ["loc", [null, [50, 38], [50, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [50, 2], [50, 82]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [56, 16], [56, 60]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.permition.agent.name", ["loc", [null, [59, 10], [59, 36]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.permition.agent.name", ["loc", [null, [60, 14], [60, 47]]]], "error", ""], [], ["loc", [null, [60, 10], [60, 59]]]], "label", ["subexpr", "Агент", [], [], ["loc", [null, [61, 10], [61, 17]]]]], ["loc", [null, [54, 2], [62, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.permition.agent.name", ["loc", [null, [63, 38], [63, 71]]]]], [], []], "pointing", "pointing"], ["loc", [null, [63, 2], [63, 93]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [69, 16], [69, 60]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.permition.subject.name", ["loc", [null, [72, 10], [72, 38]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.permition.subject.name", ["loc", [null, [73, 14], [73, 49]]]], "error", ""], [], ["loc", [null, [73, 10], [73, 61]]]], "label", ["subexpr", "Субъект", [], [], ["loc", [null, [74, 10], [74, 19]]]]], ["loc", [null, [67, 2], [75, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.permition.subject.name", ["loc", [null, [76, 38], [76, 73]]]]], [], []], "pointing", "pointing"], ["loc", [null, [76, 2], [76, 95]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.typeAccess-caption"], [], ["loc", [null, [80, 9], [80, 86]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access"], [], ["loc", [null, [83, 10], [83, 78]]]], "value", ["subexpr", "@mut", [["get", "model.typeAccess", ["loc", [null, [84, 10], [84, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [85, 13], [85, 21]]]]], [], []]], ["loc", [null, [81, 2], [86, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.typeAccess", ["loc", [null, [87, 38], [87, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [87, 2], [87, 83]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.filter-caption"], [], ["loc", [null, [91, 9], [91, 82]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.filter", ["loc", [null, [96, 10], [96, 22]]]]], [], []], "displayAttributeName", "name", "relationName", "filter", "projection", "", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-e.filter-caption"], [], ["loc", [null, [100, 10], [100, 81]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [101, 13], [101, 21]]]]], [], []]], ["loc", [null, [92, 2], [102, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.filter", ["loc", [null, [103, 38], [103, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [103, 2], [103, 79]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [109, 16], [109, 60]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.filter.name", ["loc", [null, [112, 10], [112, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.filter.name", ["loc", [null, [113, 14], [113, 38]]]], "error", ""], [], ["loc", [null, [113, 10], [113, 50]]]], "label", ["subexpr", "Имя", [["get", "фильтра", ["loc", [null, [114, 15], [114, 22]]]]], [], ["loc", [null, [114, 10], [114, 23]]]]], ["loc", [null, [107, 2], [115, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.filter.name", ["loc", [null, [116, 38], [116, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [116, 2], [116, 84]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l.caption"], [], ["loc", [null, [1, 4], [1, 70]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-access", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityAccessL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-access-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-class-e.name-caption"], [], ["loc", [null, [45, 10], [45, 78]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l.caption"], [], ["loc", [null, [1, 4], [1, 69]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-subject", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityClassL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-class-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.name-caption"], [], ["loc", [null, [45, 10], [45, 78]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-group-e.enabled-caption"], [], ["loc", [null, [51, 9], [51, 82]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 13], [54, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.enabled", ["loc", [null, [55, 10], [55, 23]]]]], [], []]], ["loc", [null, [52, 2], [56, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.enabled", ["loc", [null, [57, 38], [57, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 80]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l.caption"], [], ["loc", [null, [1, 4], [1, 69]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-agent", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityGroupL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-group-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 70,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.caption"], [], ["loc", [null, [1, 22], [1, 92]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.user-caption"], [], ["loc", [null, [38, 9], [38, 84]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.user", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "displayAttributeName", "name", "relationName", "user", "projection", "RoleOrGroupL", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.user-caption"], [], ["loc", [null, [47, 10], [47, 83]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [48, 13], [48, 21]]]]], [], []]], ["loc", [null, [39, 2], [49, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.user", ["loc", [null, [50, 38], [50, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [50, 2], [50, 77]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.group-caption"], [], ["loc", [null, [54, 9], [54, 85]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.group", ["loc", [null, [59, 10], [59, 21]]]]], [], []], "displayAttributeName", "name", "relationName", "group", "projection", "RoleOrGroupL", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-e.group-caption"], [], ["loc", [null, [63, 10], [63, 84]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 13], [64, 21]]]]], [], []]], ["loc", [null, [55, 2], [65, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.group", ["loc", [null, [66, 38], [66, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [66, 2], [66, 78]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l.caption"], [], ["loc", [null, [1, 4], [1, 74]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityLinkGroupL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var element10 = dom.childAt(element2, [15]);
        var morphs = new Array(22);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createMorphAt(element7, 5, 5);
        morphs[14] = dom.createMorphAt(element8, 1, 1);
        morphs[15] = dom.createMorphAt(element8, 3, 3);
        morphs[16] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element9, 3, 3);
        morphs[18] = dom.createMorphAt(element9, 5, 5);
        morphs[19] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element10, 3, 3);
        morphs[21] = dom.createMorphAt(element10, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.caption"], [], ["loc", [null, [1, 22], [1, 91]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.role-caption"], [], ["loc", [null, [38, 9], [38, 83]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.role", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "relationName", "role", "projection", "RoleOrGroupL", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.role-caption"], [], ["loc", [null, [47, 10], [47, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [48, 13], [48, 21]]]]], [], []]], ["loc", [null, [39, 2], [49, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.role", ["loc", [null, [50, 38], [50, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [50, 2], [50, 77]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [56, 16], [56, 60]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.role.name", ["loc", [null, [59, 10], [59, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.role.name", ["loc", [null, [60, 14], [60, 36]]]], "error", ""], [], ["loc", [null, [60, 10], [60, 48]]]], "label", ["subexpr", "Роль", [], [], ["loc", [null, [61, 10], [61, 16]]]]], ["loc", [null, [54, 2], [62, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.role.name", ["loc", [null, [63, 38], [63, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [63, 2], [63, 82]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.agent-caption"], [], ["loc", [null, [67, 9], [67, 84]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.agent", ["loc", [null, [72, 10], [72, 21]]]]], [], []], "relationName", "agent", "projection", "RoleOrGroupL", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.agent-caption"], [], ["loc", [null, [76, 10], [76, 83]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [77, 13], [77, 21]]]]], [], []]], ["loc", [null, [68, 2], [78, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.agent", ["loc", [null, [79, 38], [79, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [79, 2], [79, 78]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [85, 16], [85, 60]]]], "readonly", true, "required", true, "value", ["subexpr", "@mut", [["get", "model.agent.name", ["loc", [null, [88, 10], [88, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.agent.name", ["loc", [null, [89, 14], [89, 37]]]], "error", ""], [], ["loc", [null, [89, 10], [89, 49]]]], "label", ["subexpr", "Агент", [], [], ["loc", [null, [90, 10], [90, 17]]]]], ["loc", [null, [83, 2], [91, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.agent.name", ["loc", [null, [92, 38], [92, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [92, 2], [92, 83]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.startDate-caption"], [], ["loc", [null, [96, 9], [96, 88]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [100, 13], [100, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.startDate", ["loc", [null, [101, 10], [101, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.startDate", ["loc", [null, [102, 14], [102, 36]]]], "error", ""], [], ["loc", [null, [102, 10], [102, 48]]]]], ["loc", [null, [97, 2], [103, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.startDate", ["loc", [null, [104, 38], [104, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [104, 2], [104, 82]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-e.endDate-caption"], [], ["loc", [null, [108, 9], [108, 86]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 13], [112, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.endDate", ["loc", [null, [113, 10], [113, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.endDate", ["loc", [null, [114, 14], [114, 34]]]], "error", ""], [], ["loc", [null, [114, 10], [114, 46]]]]], ["loc", [null, [109, 2], [115, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.endDate", ["loc", [null, [116, 38], [116, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [116, 2], [116, 80]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l.caption"], [], ["loc", [null, [1, 4], [1, 73]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityLinkRoleL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 124,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var element10 = dom.childAt(element2, [15]);
        var element11 = dom.childAt(element2, [17]);
        var morphs = new Array(23);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(element7, 5, 5);
        morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element8, 5, 5);
        morphs[16] = dom.createMorphAt(element9, 1, 1);
        morphs[17] = dom.createMorphAt(element9, 3, 3);
        morphs[18] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[19] = dom.createMorphAt(element10, 3, 3);
        morphs[20] = dom.createMorphAt(element10, 5, 5);
        morphs[21] = dom.createMorphAt(element11, 1, 1);
        morphs[22] = dom.createMorphAt(element11, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.caption"], [], ["loc", [null, [1, 22], [1, 91]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.name-caption"], [], ["loc", [null, [45, 10], [45, 82]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [53, 16], [53, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 13], [54, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [56, 10], [56, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [57, 14], [57, 31]]]], "error", ""], [], ["loc", [null, [57, 10], [57, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.type-caption"], [], ["loc", [null, [58, 10], [58, 82]]]]], ["loc", [null, [51, 2], [59, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [60, 38], [60, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [60, 2], [60, 77]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.sharedOper-caption"], [], ["loc", [null, [64, 9], [64, 89]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 13], [67, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.sharedOper", ["loc", [null, [68, 10], [68, 26]]]]], [], []]], ["loc", [null, [65, 2], [69, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.sharedOper", ["loc", [null, [70, 38], [70, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [70, 2], [70, 83]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.createTime-caption"], [], ["loc", [null, [74, 9], [74, 89]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 13], [78, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.createTime", ["loc", [null, [79, 10], [79, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.createTime", ["loc", [null, [80, 14], [80, 37]]]], "error", ""], [], ["loc", [null, [80, 10], [80, 49]]]]], ["loc", [null, [75, 2], [81, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.createTime", ["loc", [null, [82, 38], [82, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [82, 2], [82, 83]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [88, 16], [88, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [89, 13], [89, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.creator", ["loc", [null, [91, 10], [91, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.creator", ["loc", [null, [92, 14], [92, 34]]]], "error", ""], [], ["loc", [null, [92, 10], [92, 46]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.creator-caption"], [], ["loc", [null, [93, 10], [93, 85]]]]], ["loc", [null, [86, 2], [94, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.creator", ["loc", [null, [95, 38], [95, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [95, 2], [95, 80]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.editTime-caption"], [], ["loc", [null, [99, 9], [99, 87]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [103, 13], [103, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.editTime", ["loc", [null, [104, 10], [104, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.editTime", ["loc", [null, [105, 14], [105, 35]]]], "error", ""], [], ["loc", [null, [105, 10], [105, 47]]]]], ["loc", [null, [100, 2], [106, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editTime", ["loc", [null, [107, 38], [107, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [107, 2], [107, 81]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [113, 16], [113, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [114, 13], [114, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.editor", ["loc", [null, [116, 10], [116, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.editor", ["loc", [null, [117, 14], [117, 33]]]], "error", ""], [], ["loc", [null, [117, 10], [117, 45]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-e.editor-caption"], [], ["loc", [null, [118, 10], [118, 84]]]]], ["loc", [null, [111, 2], [119, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor", ["loc", [null, [120, 38], [120, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [120, 2], [120, 79]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l.caption"], [], ["loc", [null, [1, 4], [1, 73]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-subject", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityOperationL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-operation-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element6, 5, 5);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(element7, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.caption"], [], ["loc", [null, [1, 22], [1, 91]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.agent-caption"], [], ["loc", [null, [38, 9], [38, 84]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.agent", ["loc", [null, [43, 10], [43, 21]]]]], [], []], "displayAttributeName", "name", "relationName", "agent", "projection", "RoleOrGroupL", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.agent-caption"], [], ["loc", [null, [47, 10], [47, 83]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [48, 13], [48, 21]]]]], [], []]], ["loc", [null, [39, 2], [49, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.agent", ["loc", [null, [50, 38], [50, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [50, 2], [50, 78]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.subject-caption"], [], ["loc", [null, [54, 9], [54, 86]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.subject", ["loc", [null, [59, 10], [59, 23]]]]], [], []], "displayAttributeName", "name", "relationName", "subject", "projection", "Sec_SubjectE", "title", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.subject-caption"], [], ["loc", [null, [63, 10], [63, 85]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 13], [64, 21]]]]], [], []]], ["loc", [null, [55, 2], [65, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.subject", ["loc", [null, [66, 38], [66, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [66, 2], [66, 80]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-e.access-caption"], [], ["loc", [null, [70, 9], [70, 85]]]], ["inline", "flexberry-groupedit", [], ["componentName", "accessGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.access", ["loc", [null, [74, 20], [74, 53]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.access", ["loc", [null, [75, 12], [75, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [76, 13], [76, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.access", ["loc", [null, [78, 14], [78, 33]]]], "error", ""], [], ["loc", [null, [78, 10], [78, 45]]]]], ["loc", [null, [71, 2], [79, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.access", ["loc", [null, [80, 38], [80, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [80, 2], [80, 79]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l.caption"], [], ["loc", [null, [1, 4], [1, 73]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-permition", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityPermitionL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-permition-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 17], [67, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleRoles", ["loc", [null, [68, 14], [68, 23]]]]], [], []]], ["loc", [null, [65, 6], [69, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 17], [80, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleUsers", ["loc", [null, [81, 14], [81, 23]]]]], [], []]], ["loc", [null, [78, 6], [82, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [93, 17], [93, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleClasses", ["loc", [null, [94, 14], [94, 25]]]]], [], []]], ["loc", [null, [91, 6], [95, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [106, 17], [106, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleOperations", ["loc", [null, [107, 14], [107, 28]]]]], [], []]], ["loc", [null, [104, 6], [108, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 112,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createMorphAt(element6, 5, 5);
        morphs[11] = dom.createMorphAt(dom.childAt(element2, [9]), 1, 1);
        morphs[12] = dom.createMorphAt(dom.childAt(element2, [11]), 1, 1);
        morphs[13] = dom.createMorphAt(dom.childAt(element2, [13]), 1, 1);
        morphs[14] = dom.createMorphAt(dom.childAt(element2, [15]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.name-caption"], [], ["loc", [null, [45, 10], [45, 77]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.enabled-caption"], [], ["loc", [null, [51, 9], [51, 81]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 13], [54, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.enabled", ["loc", [null, [55, 10], [55, 23]]]]], [], []]], ["loc", [null, [52, 2], [56, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.enabled", ["loc", [null, [57, 38], [57, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 80]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.role-roles-caption"], [], ["loc", [null, [62, 14], [62, 87]]]], "class", "styled"], 2, null, ["loc", [null, [61, 4], [70, 26]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.role-users-caption"], [], ["loc", [null, [75, 14], [75, 87]]]], "class", "styled"], 3, null, ["loc", [null, [74, 4], [83, 26]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.role-classes-caption"], [], ["loc", [null, [88, 14], [88, 89]]]], "class", "styled"], 4, null, ["loc", [null, [87, 4], [96, 26]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-e.role-operations-caption"], [], ["loc", [null, [101, 14], [101, 92]]]], "class", "styled"], 5, null, ["loc", [null, [100, 4], [109, 26]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l.caption"], [], ["loc", [null, [1, 4], [1, 68]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-agent", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityRoleL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-role-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [108, 17], [108, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "userRoles", ["loc", [null, [109, 14], [109, 23]]]]], [], []]], ["loc", [null, [106, 6], [110, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [121, 17], [121, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "userGroups", ["loc", [null, [122, 14], [122, 24]]]]], [], []]], ["loc", [null, [119, 6], [123, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [134, 17], [134, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "userClasses", ["loc", [null, [135, 14], [135, 25]]]]], [], []]], ["loc", [null, [132, 6], [136, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "security-assign", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [147, 17], [147, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "userOperations", ["loc", [null, [148, 14], [148, 28]]]]], [], []]], ["loc", [null, [145, 6], [149, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 153,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var morphs = new Array(21);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        morphs[8] = dom.createMorphAt(element6, 1, 1);
        morphs[9] = dom.createMorphAt(element6, 3, 3);
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(element7, 3, 3);
        morphs[12] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element8, 3, 3);
        morphs[14] = dom.createMorphAt(element8, 5, 5);
        morphs[15] = dom.createMorphAt(element9, 1, 1);
        morphs[16] = dom.createMorphAt(element9, 3, 3);
        morphs[17] = dom.createMorphAt(dom.childAt(element2, [15]), 1, 1);
        morphs[18] = dom.createMorphAt(dom.childAt(element2, [17]), 1, 1);
        morphs[19] = dom.createMorphAt(dom.childAt(element2, [19]), 1, 1);
        morphs[20] = dom.createMorphAt(dom.childAt(element2, [21]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 18], [40, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 15], [41, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 12], [43, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 16], [44, 33]]]], "error", ""], [], ["loc", [null, [44, 12], [44, 45]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.name-caption"], [], ["loc", [null, [45, 12], [45, 79]]]]], ["loc", [null, [38, 4], [46, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 40], [47, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 4], [47, 79]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [53, 18], [53, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.login", ["loc", [null, [56, 12], [56, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.login", ["loc", [null, [57, 16], [57, 34]]]], "error", ""], [], ["loc", [null, [57, 12], [57, 46]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.login-caption"], [], ["loc", [null, [58, 12], [58, 80]]]]], ["loc", [null, [51, 4], [59, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.login", ["loc", [null, [60, 40], [60, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [60, 4], [60, 80]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [66, 18], [66, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 15], [67, 23]]]]], [], []], "required", true, "type", "email", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [70, 12], [70, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.email", ["loc", [null, [71, 16], [71, 34]]]], "error", ""], [], ["loc", [null, [71, 12], [71, 46]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.email-caption"], [], ["loc", [null, [72, 12], [72, 80]]]]], ["loc", [null, [64, 4], [73, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.email", ["loc", [null, [74, 40], [74, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [74, 4], [74, 80]]]], ["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.enabled-caption"], [], ["loc", [null, [78, 11], [78, 83]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [81, 15], [81, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.enabled", ["loc", [null, [82, 12], [82, 25]]]]], [], []]], ["loc", [null, [79, 4], [83, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.enabled", ["loc", [null, [84, 40], [84, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [84, 4], [84, 82]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [90, 18], [90, 62]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [91, 15], [91, 23]]]]], [], []], "required", true, "type", "password", "value", ["subexpr", "@mut", [["get", "model.pwd", ["loc", [null, [94, 12], [94, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.pwd", ["loc", [null, [95, 16], [95, 32]]]], "error", ""], [], ["loc", [null, [95, 12], [95, 44]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.pwd-caption"], [], ["loc", [null, [96, 12], [96, 78]]]]], ["loc", [null, [88, 4], [97, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.pwd", ["loc", [null, [98, 40], [98, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [98, 4], [98, 78]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.user-roles-caption"], [], ["loc", [null, [103, 14], [103, 87]]]], "class", "styled"], 2, null, ["loc", [null, [102, 4], [111, 26]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.user-groups-caption"], [], ["loc", [null, [116, 14], [116, 88]]]], "class", "styled"], 3, null, ["loc", [null, [115, 4], [124, 26]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.user-classes-caption"], [], ["loc", [null, [129, 14], [129, 89]]]], "class", "styled"], 4, null, ["loc", [null, [128, 4], [137, 26]]]], ["block", "flexberry-toggler", [], ["caption", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-e.user-operations-caption"], [], ["loc", [null, [142, 14], [142, 92]]]], "class", "styled"], 5, null, ["loc", [null, [141, 4], [150, 26]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l.caption"], [], ["loc", [null, [1, 4], [1, 68]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-agent", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityUserL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-user-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-view-e.name-caption"], [], ["loc", [null, [45, 10], [45, 77]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l.caption"], [], ["loc", [null, [1, 4], [1, 68]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "i-c-s-soft-s-t-o-r-m-n-e-t-security-subject", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "ICSSoftSTORMNETSecurityViewL"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-c-s-soft-s-t-o-r-m-n-e-t-security-view-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [4, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [3, 10], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [18, 59], [18, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [18, 77], [18, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [21, 59], [21, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [21, 85], [21, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [24, 59], [24, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [24, 79], [24, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [17, 23], [17, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [17, 43], [17, 63]]]]], [], ["loc", [null, [17, 38], [17, 64]]]]], [], ["loc", [null, [17, 18], [17, 65]]]]], [], 0, null, ["loc", [null, [17, 8], [19, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [20, 23], [20, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [20, 43], [20, 63]]]]], [], ["loc", [null, [20, 38], [20, 64]]]]], [], ["loc", [null, [20, 18], [20, 65]]]]], [], 1, null, ["loc", [null, [20, 8], [22, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [23, 23], [23, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [23, 44], [23, 58]]]]], [], ["loc", [null, [23, 39], [23, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [23, 65], [23, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [23, 80], [23, 100]]]]], [], ["loc", [null, [23, 60], [23, 101]]]]], [], ["loc", [null, [23, 35], [23, 102]]]]], [], ["loc", [null, [23, 18], [23, 103]]]]], [], 2, null, ["loc", [null, [23, 8], [25, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.category", ["loc", [null, [34, 6], [34, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.eventId", ["loc", [null, [49, 6], [49, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.priority", ["loc", [null, [64, 6], [64, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.severity", ["loc", [null, [79, 6], [79, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.title", ["loc", [null, [94, 6], [94, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.timestamp", ["loc", [null, [109, 28], [109, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.machineName", ["loc", [null, [121, 6], [121, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.appDomainName", ["loc", [null, [136, 6], [136, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processId", ["loc", [null, [151, 6], [151, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processName", ["loc", [null, [166, 6], [166, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.threadName", ["loc", [null, [181, 6], [181, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.win32ThreadId", ["loc", [null, [196, 6], [196, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child14 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.message", ["loc", [null, [211, 6], [211, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child15 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 224,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.formattedMessage", ["loc", [null, [226, 6], [226, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 239,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-edit-panel");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "submit");
        dom.setAttribute(el5, "class", "ui button");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Timestamp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [1, 1, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [3]);
        var element7 = dom.childAt(element3, [5]);
        var element8 = dom.childAt(element3, [7]);
        var element9 = dom.childAt(element3, [9]);
        var element10 = dom.childAt(element3, [11]);
        var element11 = dom.childAt(element3, [13]);
        var element12 = dom.childAt(element3, [15]);
        var element13 = dom.childAt(element3, [17]);
        var element14 = dom.childAt(element3, [19]);
        var element15 = dom.childAt(element3, [21]);
        var element16 = dom.childAt(element3, [23]);
        var element17 = dom.childAt(element3, [25]);
        var element18 = dom.childAt(element3, [27]);
        var element19 = dom.childAt(element3, [29]);
        var morphs = new Array(32);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createMorphAt(element5, 0, 0);
        morphs[4] = dom.createMorphAt(element6, 1, 1);
        morphs[5] = dom.createMorphAt(element6, 3, 3);
        morphs[6] = dom.createMorphAt(element7, 1, 1);
        morphs[7] = dom.createMorphAt(element7, 3, 3);
        morphs[8] = dom.createMorphAt(element8, 1, 1);
        morphs[9] = dom.createMorphAt(element8, 3, 3);
        morphs[10] = dom.createMorphAt(element9, 1, 1);
        morphs[11] = dom.createMorphAt(element9, 3, 3);
        morphs[12] = dom.createMorphAt(element10, 1, 1);
        morphs[13] = dom.createMorphAt(element10, 3, 3);
        morphs[14] = dom.createMorphAt(element11, 3, 3);
        morphs[15] = dom.createMorphAt(element11, 5, 5);
        morphs[16] = dom.createMorphAt(element12, 1, 1);
        morphs[17] = dom.createMorphAt(element12, 3, 3);
        morphs[18] = dom.createMorphAt(element13, 1, 1);
        morphs[19] = dom.createMorphAt(element13, 3, 3);
        morphs[20] = dom.createMorphAt(element14, 1, 1);
        morphs[21] = dom.createMorphAt(element14, 3, 3);
        morphs[22] = dom.createMorphAt(element15, 1, 1);
        morphs[23] = dom.createMorphAt(element15, 3, 3);
        morphs[24] = dom.createMorphAt(element16, 1, 1);
        morphs[25] = dom.createMorphAt(element16, 3, 3);
        morphs[26] = dom.createMorphAt(element17, 1, 1);
        morphs[27] = dom.createMorphAt(element17, 3, 3);
        morphs[28] = dom.createMorphAt(element18, 1, 1);
        morphs[29] = dom.createMorphAt(element18, 3, 3);
        morphs[30] = dom.createMorphAt(element19, 1, 1);
        morphs[31] = dom.createMorphAt(element19, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [2, 6], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 0], [11, 7]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [16, 16], [16, 24]]]]], [], 1, null, ["loc", [null, [16, 6], [26, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [27, 46], [27, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [27, 65], [27, 106]]]], ["block", "if", [["get", "model.errors.category", ["loc", [null, [32, 8], [32, 29]]]]], [], 2, null, ["loc", [null, [32, 2], [36, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [38, 13], [38, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.category", ["loc", [null, [40, 10], [40, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.category", ["loc", [null, [41, 14], [41, 35]]]], "error", ""], [], ["loc", [null, [41, 10], [41, 47]]]], "label", "Category"], ["loc", [null, [37, 2], [43, 4]]]], ["block", "if", [["get", "model.errors.eventId", ["loc", [null, [47, 8], [47, 28]]]]], [], 3, null, ["loc", [null, [47, 2], [51, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [53, 13], [53, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eventId", ["loc", [null, [55, 10], [55, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eventId", ["loc", [null, [56, 14], [56, 34]]]], "error", ""], [], ["loc", [null, [56, 10], [56, 46]]]], "label", "Event id"], ["loc", [null, [52, 2], [58, 4]]]], ["block", "if", [["get", "model.errors.priority", ["loc", [null, [62, 8], [62, 29]]]]], [], 4, null, ["loc", [null, [62, 2], [66, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [68, 13], [68, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.priority", ["loc", [null, [70, 10], [70, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.priority", ["loc", [null, [71, 14], [71, 35]]]], "error", ""], [], ["loc", [null, [71, 10], [71, 47]]]], "label", "Priority"], ["loc", [null, [67, 2], [73, 4]]]], ["block", "if", [["get", "model.errors.severity", ["loc", [null, [77, 8], [77, 29]]]]], [], 5, null, ["loc", [null, [77, 2], [81, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [83, 13], [83, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.severity", ["loc", [null, [85, 10], [85, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.severity", ["loc", [null, [86, 14], [86, 35]]]], "error", ""], [], ["loc", [null, [86, 10], [86, 47]]]], "label", "Severity"], ["loc", [null, [82, 2], [88, 4]]]], ["block", "if", [["get", "model.errors.title", ["loc", [null, [92, 8], [92, 26]]]]], [], 6, null, ["loc", [null, [92, 2], [96, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [98, 13], [98, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [100, 10], [100, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.title", ["loc", [null, [101, 14], [101, 32]]]], "error", ""], [], ["loc", [null, [101, 10], [101, 44]]]], "label", "Title"], ["loc", [null, [97, 2], [103, 4]]]], ["block", "if", [["get", "model.errors.timestamp", ["loc", [null, [108, 8], [108, 30]]]]], [], 7, null, ["loc", [null, [108, 2], [110, 9]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 13], [112, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.timestamp", ["loc", [null, [113, 10], [113, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.timestamp", ["loc", [null, [114, 14], [114, 36]]]], "error", ""], [], ["loc", [null, [114, 10], [114, 48]]]]], ["loc", [null, [111, 2], [115, 4]]]], ["block", "if", [["get", "model.errors.machineName", ["loc", [null, [119, 8], [119, 32]]]]], [], 8, null, ["loc", [null, [119, 2], [123, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [125, 13], [125, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.machineName", ["loc", [null, [127, 10], [127, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.machineName", ["loc", [null, [128, 14], [128, 38]]]], "error", ""], [], ["loc", [null, [128, 10], [128, 50]]]], "label", "Machine name"], ["loc", [null, [124, 2], [130, 4]]]], ["block", "if", [["get", "model.errors.appDomainName", ["loc", [null, [134, 8], [134, 34]]]]], [], 9, null, ["loc", [null, [134, 2], [138, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [140, 13], [140, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.appDomainName", ["loc", [null, [142, 10], [142, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.appDomainName", ["loc", [null, [143, 14], [143, 40]]]], "error", ""], [], ["loc", [null, [143, 10], [143, 52]]]], "label", "App domain name"], ["loc", [null, [139, 2], [145, 4]]]], ["block", "if", [["get", "model.errors.processId", ["loc", [null, [149, 8], [149, 30]]]]], [], 10, null, ["loc", [null, [149, 2], [153, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [155, 13], [155, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processId", ["loc", [null, [157, 10], [157, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processId", ["loc", [null, [158, 14], [158, 36]]]], "error", ""], [], ["loc", [null, [158, 10], [158, 48]]]], "label", "Process id"], ["loc", [null, [154, 2], [160, 4]]]], ["block", "if", [["get", "model.errors.processName", ["loc", [null, [164, 8], [164, 32]]]]], [], 11, null, ["loc", [null, [164, 2], [168, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 13], [170, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processName", ["loc", [null, [172, 10], [172, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processName", ["loc", [null, [173, 14], [173, 38]]]], "error", ""], [], ["loc", [null, [173, 10], [173, 50]]]], "label", "Process name"], ["loc", [null, [169, 2], [175, 4]]]], ["block", "if", [["get", "model.errors.threadName", ["loc", [null, [179, 8], [179, 31]]]]], [], 12, null, ["loc", [null, [179, 2], [183, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [185, 13], [185, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.threadName", ["loc", [null, [187, 10], [187, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.threadName", ["loc", [null, [188, 14], [188, 37]]]], "error", ""], [], ["loc", [null, [188, 10], [188, 49]]]], "label", "Thread name"], ["loc", [null, [184, 2], [190, 4]]]], ["block", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [194, 8], [194, 34]]]]], [], 13, null, ["loc", [null, [194, 2], [198, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [200, 13], [200, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.win32ThreadId", ["loc", [null, [202, 10], [202, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [203, 14], [203, 40]]]], "error", ""], [], ["loc", [null, [203, 10], [203, 52]]]], "label", "Win32 thread id"], ["loc", [null, [199, 2], [205, 4]]]], ["block", "if", [["get", "model.errors.message", ["loc", [null, [209, 8], [209, 28]]]]], [], 14, null, ["loc", [null, [209, 2], [213, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [215, 13], [215, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.message", ["loc", [null, [217, 10], [217, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.message", ["loc", [null, [218, 14], [218, 34]]]], "error", ""], [], ["loc", [null, [218, 10], [218, 46]]]], "label", "Message"], ["loc", [null, [214, 2], [220, 4]]]], ["block", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [224, 8], [224, 37]]]]], [], 15, null, ["loc", [null, [224, 2], [228, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [230, 13], [230, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.formattedMessage", ["loc", [null, [232, 10], [232, 32]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [233, 14], [233, 43]]]], "error", ""], [], ["loc", [null, [233, 10], [233, 55]]]], "label", "Formatted message"], ["loc", [null, [229, 2], [235, 4]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-i-s-caseberry-logging-objects-application-log-l.caption"], [], ["loc", [null, [1, 4], [1, 75]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "i-i-s-caseberry-logging-objects-application-log", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [15, 20], [15, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [16, 16], [16, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [17, 17], [17, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [18, 23], [18, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "IISLoggingObjectListView"], ["loc", [null, [3, 2], [23, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "message", ["subexpr", "@mut", [["get", "errorMessage", ["loc", [null, [5, 12], [5, 24]]]]], [], []]], ["loc", [null, [2, 2], [6, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui message");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessage", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]], ["inline", "t", ["forms.index.greeting"], [], ["loc", [null, [10, 4], [10, 32]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.loading.spinner-caption"], [], ["loc", [null, [3, 4], [3, 41]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/login", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "message", ["subexpr", "@mut", [["get", "errorMessage", ["loc", [null, [7, 12], [7, 24]]]]], [], []]], ["loc", [null, [4, 2], [8, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ui-message", [], ["type", "info", "message", ["subexpr", "t", ["forms.login.you-logged-as"], ["login", ["get", "login", ["loc", [null, [16, 51], [16, 56]]]]], ["loc", [null, [16, 14], [16, 57]]]]], ["loc", [null, [14, 4], [17, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "field");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          morphs[5] = dom.createMorphAt(element1, 5, 5);
          return morphs;
        },
        statements: [["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [21, 20], [21, 64]]]], "required", true, "value", ["subexpr", "@mut", [["get", "loginInput", ["loc", [null, [23, 14], [23, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "emptyLogin", ["loc", [null, [24, 18], [24, 28]]]], "error", ""], [], ["loc", [null, [24, 14], [24, 40]]]], "label", ["subexpr", "t", ["forms.login.login"], [], ["loc", [null, [25, 14], [25, 37]]]]], ["loc", [null, [20, 6], [26, 8]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "emptyLogin", ["loc", [null, [27, 42], [27, 52]]]]], [], []], "pointing", "pointing"], ["loc", [null, [27, 6], [27, 74]]]], ["attribute", "class", ["concat", ["field", ["subexpr", "if", [["get", "emptyPassword", ["loc", [null, [30, 26], [30, 39]]]], " error", ""], [], ["loc", [null, [30, 21], [30, 53]]]]]]], ["inline", "t", ["forms.login.password"], [], ["loc", [null, [31, 13], [31, 41]]]], ["inline", "input", [], ["type", "password", "required", true, "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [35, 14], [35, 22]]]]], [], []], "placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [36, 20], [36, 64]]]]], ["loc", [null, [32, 6], [37, 8]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "emptyPassword", ["loc", [null, [38, 42], [38, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [38, 6], [38, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/login.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui positive button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [4]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.login.caption"], [], ["loc", [null, [1, 22], [1, 49]]]], ["block", "if", [["get", "errorMessage", ["loc", [null, [3, 6], [3, 18]]]]], [], 0, null, ["loc", [null, [3, 0], [9, 7]]]], ["attribute", "class", ["concat", ["ui form flexberry-vertical-form ", ["subexpr", "if", [["get", "tryToLogin", ["loc", [null, [11, 50], [11, 60]]]], "loading"], [], ["loc", [null, [11, 45], [11, 72]]]]]]], ["block", "if", [["get", "login", ["loc", [null, [13, 8], [13, 13]]]]], [], 1, 2, ["loc", [null, [13, 2], [40, 9]]]], ["element", "action", [["subexpr", "if", [["get", "login", ["loc", [null, [44, 68], [44, 73]]]], "logout", "login"], [], ["loc", [null, [44, 64], [44, 91]]]]], [], ["loc", [null, [44, 55], [44, 93]]]], ["inline", "t", [["subexpr", "if", [["get", "login", ["loc", [null, [45, 16], [45, 21]]]], "forms.login.logout", "forms.login.caption"], [], ["loc", [null, [45, 12], [45, 65]]]]], [], ["loc", [null, [45, 8], [45, 67]]]], ["element", "action", ["closeLoginForm"], [], ["loc", [null, [47, 46], [47, 73]]]], ["inline", "t", ["forms.login.back"], [], ["loc", [null, [48, 8], [48, 32]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/lookup-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/lookup-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "lookup-list");
        dom.setAttribute(el1, "class", "list-group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["class", "ui bottom attached", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [4, 20], [4, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "currentLookupRow", ["loc", [null, [6, 19], [6, 35]]]]], [], []], "componentMode", "lookupform", "componentName", "flexberry-objectlistview-at-lookup", "showEditMenuItemInRow", false, "createNewButton", false, "showCheckBoxInRow", false, "colsConfigButton", false, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [15, 21], [15, 48]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [16, 15], [16, 21]]]]], [], []], "customProperties", ["subexpr", "@mut", [["get", "customPropertiesData", ["loc", [null, [18, 21], [18, 41]]]]], [], []], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [20, 10], [20, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [21, 17], [21, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [22, 18], [22, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [23, 20], [23, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [24, 16], [24, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [25, 17], [25, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [26, 13], [26, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [27, 13], [27, 32]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [29, 12], [29, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [31, 17], [31, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [32, 23], [32, 52]]]], "notUseUserSettings", true], ["loc", [null, [2, 2], [34, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/lookup-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/lookup-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [8, 2], [8, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/lookup-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [3, 12], [3, 21]]]]], [], []], "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "brand");
          dom.setAttribute(el2, "href", "#");
          var el3 = dom.createTextNode("Flexberry Ember Demo");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [5, 21], [5, 28]]]]], [], ["loc", [null, [5, 2], [5, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example-mobile");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui top fixed inverted menu");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "launch icon item");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "sidebar icon");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "right menu");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-content ui attached segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical menu"], 0, null, ["loc", [null, [1, 0], [6, 15]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [10, 9], [10, 37]]]], ["content", "outlet", ["loc", [null, [15, 6], [15, 16]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [16, 6], [16, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 28,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "class", "flexberry-file-image-preview");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'src');
              morphs[1] = dom.createAttrMorph(element0, 'alt');
              return morphs;
            },
            statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [26, 20], [26, 47]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [27, 18], [27, 82]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui small image");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [22, 73], [22, 101]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [23, 20], [23, 48]]]]], [], 0, null, ["loc", [null, [23, 10], [28, 21]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [29, 30], [29, 58]]]], "active", ""], [], ["loc", [null, [29, 25], [29, 72]]]], " loader"]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-menu");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "left pointing", "items", ["subexpr", "@mut", [["get", "_menuItems", ["loc", [null, [15, 16], [15, 26]]]]], [], []], "callItemsOnClickCallbacks", false, "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [17, 22], [17, 48]]]], "collapseMenuOnItemClick", true], ["loc", [null, [13, 8], [19, 10]]]], ["block", "if", [["get", "showPreview", ["loc", [null, [21, 12], [21, 23]]]]], [], 0, null, ["loc", [null, [21, 6], [31, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-grid ui grid");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element4, 'id');
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createAttrMorph(element6, 'title');
        morphs[3] = dom.createAttrMorph(element6, 'for');
        morphs[4] = dom.createElementMorph(element6);
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element7, [3, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element7, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [5, 49], [5, 60]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [5, 72], [5, 91]]]], "disabled"], [], ["loc", [null, [5, 63], [5, 104]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "_hasFile", ["loc", [null, [5, 114], [5, 122]]]], ["get", "readonly", ["loc", [null, [5, 123], [5, 131]]]]], [], ["loc", [null, [5, 110], [5, 132]]]], "hidden"], [], ["loc", [null, [5, 105], [5, 143]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [6, 12], [6, 62]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [7, 12], [7, 24]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [8, 6], [8, 65]]]], ["inline", "t", ["components.flexberry-file.add-button-caption"], [], ["loc", [null, [9, 4], [9, 56]]]], ["block", "if", [["get", "_hasFile", ["loc", [null, [11, 10], [11, 18]]]]], [], 0, null, ["loc", [null, [11, 4], [32, 11]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [40, 4], [40, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [44, 6], [44, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [51, 8], [51, 72]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", "search", "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true, "isSearchReadOnly", ["subexpr", "@mut", [["get", "dropdownIsSearch", ["loc", [null, [9, 21], [9, 37]]]]], [], []]], ["loc", [null, [2, 2], [10, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 10
                },
                "end": {
                  "line": 18,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [17, 12], [17, 21]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 10
                },
                "end": {
                  "line": 20,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "displayValue", ["loc", [null, [19, 12], [19, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 8
              },
              "end": {
                "line": 21,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [16, 16], [16, 24]]]]], [], 0, 1, ["loc", [null, [16, 10], [20, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [22, 10], [22, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "chevron right icon");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 33,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui icon ", ["get", "removeButtonClass", ["loc", [null, [30, 31], [30, 48]]]], " button"]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [30, 77], [30, 87]]]]], [], ["loc", [null, [30, 59], [30, 89]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui transparent icon input");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "lookup-field");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          morphs[3] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [13, 27], [13, 37]]]]], [], ["loc", [null, [13, 9], [13, 39]]]], ["block", "if", [["get", "value", ["loc", [null, [15, 14], [15, 19]]]]], [], 0, 1, ["loc", [null, [15, 8], [23, 15]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [25, 16], [25, 24]]]]], [], 2, null, ["loc", [null, [25, 6], [27, 17]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [29, 14], [29, 22]]]]], [], 3, null, ["loc", [null, [29, 4], [33, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [35, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/mobile/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [8, 55], [8, 85]]]], "transparent"], [], ["loc", [null, [8, 46], [8, 101]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]], ["subexpr", "not", [["get", "record.config.canBeSelected", ["loc", [null, [14, 41], [14, 68]]]]], [], ["loc", [null, [14, 36], [14, 69]]]]], [], ["loc", [null, [14, 23], [14, 70]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [15, 31], [15, 40]]]], ["get", "record", ["loc", [null, [15, 41], [15, 47]]]]], [], ["loc", [null, [15, 23], [15, 48]]]]], ["loc", [null, [13, 12], [16, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "minus icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [21, 32], [21, 43]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [21, 55], [21, 63]]]], ["subexpr", "not", [["get", "record.config.canBeDeleted", ["loc", [null, [21, 69], [21, 95]]]]], [], ["loc", [null, [21, 64], [21, 96]]]]], [], ["loc", [null, [21, 51], [21, 97]]]], "disabled"], [], ["loc", [null, [21, 46], [21, 110]]]], " button"]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [21, 128], [21, 137]]]], ["get", "record", ["loc", [null, [21, 138], [21, 144]]]]], [], ["loc", [null, [21, 119], [21, 146]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element4, 1, 1);
          morphs[1] = dom.createMorphAt(element4, 2, 2);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [6, 14], [6, 31]]]]], [], 0, null, ["loc", [null, [6, 8], [10, 15]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [11, 14], [11, 31]]]]], [], 1, null, ["loc", [null, [11, 8], [18, 15]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [19, 14], [19, 35]]]]], [], 2, null, ["loc", [null, [19, 8], [25, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon mini ", ["get", "buttonClass", ["loc", [null, [38, 45], [38, 56]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [38, 60], [38, 93]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [39, 25], [39, 34]]]], "minus", "plus"], [], ["loc", [null, [39, 20], [39, 51]]]], " icon"]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "object-list-view-menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "basic right pointing", "callItemsOnClickCallbacks", false, "configurateItems", ["subexpr", "action", [["get", "menuInRowConfigurateItems", ["loc", [null, [48, 33], [48, 58]]]], ["get", "record", ["loc", [null, [48, 59], [48, 65]]]]], [], ["loc", [null, [48, 25], [48, 66]]]], "onItemClick", ["subexpr", "action", [["get", "menuInRowItemClick", ["loc", [null, [49, 28], [49, 46]]]], ["get", "record", ["loc", [null, [49, 47], [49, 53]]]]], [], ["loc", [null, [49, 20], [49, 54]]]]], ["loc", [null, [45, 6], [50, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 2
              },
              "end": {
                "line": 78,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [57, 13], [57, 19]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [58, 14], [58, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [59, 15], [59, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [60, 15], [60, 23]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [61, 21], [61, 35]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [62, 23], [62, 39]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [63, 23], [63, 39]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [64, 24], [64, 41]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [65, 24], [65, 41]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [66, 28], [66, 49]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [67, 25], [67, 43]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [68, 32], [68, 57]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [69, 18], [69, 29]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [70, 15], [70, 23]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [71, 16], [71, 25]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [72, 16], [72, 25]]]]], [], []], "menuInRowItemClick", ["subexpr", "@mut", [["get", "menuInRowItemClick", ["loc", [null, [73, 25], [73, 43]]]]], [], []], "menuInRowConfigurateItems", ["subexpr", "@mut", [["get", "menuInRowConfigurateItems", ["loc", [null, [74, 32], [74, 57]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [75, 20], [75, 33]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [76, 25], [76, 44]]]]], [], []]], ["loc", [null, [56, 4], [77, 6]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 79,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "records", ["loc", [null, [55, 10], [55, 17]]]]], ["key", "key"], 0, null, ["loc", [null, [55, 2], [78, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "hidden");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element5, 'class');
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element6, 3, 3);
        morphs[4] = dom.createAttrMorph(element7, 'style');
        morphs[5] = dom.createElementMorph(element7);
        morphs[6] = dom.createMorphAt(element7, 1, 1);
        morphs[7] = dom.createMorphAt(element7, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "record.config.customClass", ["loc", [null, [1, 13], [1, 38]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [2, 53], [2, 69]]]], "hidden"], [], ["loc", [null, [2, 44], [2, 80]]]]]]], ["content", "record.key", ["loc", [null, [3, 24], [3, 38]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 10], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [27, 11]]]], ["attribute", "style", ["concat", ["padding-left:", ["get", "hierarchicalIndent", ["loc", [null, [29, 78], [29, 96]]]], "px;"]]], ["element", "action", [["get", "rowClick", ["loc", [null, [29, 17], [29, 25]]]], ["get", "record", ["loc", [null, [29, 26], [29, 32]]]]], ["preventDefault", false], ["loc", [null, [29, 8], [29, 55]]]], ["inline", "component", [["get", "singleColumnCellComponent.componentName", ["loc", [null, [30, 18], [30, 57]]]]], ["model", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [31, 14], [31, 25]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [32, 16], [32, 23]]]]], [], []], "hasEditableValues", ["subexpr", "@mut", [["get", "hasEditableValues", ["loc", [null, [33, 26], [33, 43]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "singleColumnCellComponent.componentProperties", ["loc", [null, [34, 26], [34, 71]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [35, 17], [35, 25]]]]], [], []]], ["loc", [null, [30, 6], [36, 8]]]], ["block", "if", [["get", "hasRecords", ["loc", [null, [37, 12], [37, 22]]]]], [], 1, null, ["loc", [null, [37, 6], [41, 13]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [43, 8], [43, 22]]]]], [], 2, null, ["loc", [null, [43, 2], [52, 9]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [54, 11], [54, 20]]]], ["get", "inHierarchicalMode", ["loc", [null, [54, 21], [54, 39]]]]], [], ["loc", [null, [54, 6], [54, 40]]]]], [], 3, null, ["loc", [null, [54, 0], [79, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/mobile/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [3, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [2, 10], [2, 23]]]]], [], 0, null, ["loc", [null, [2, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
            dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("thead");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          dom.setAttribute(el3, "data-olv-header-property-name", "OlvRowToolbar");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element4, 3, 3);
          morphs[2] = dom.createMorphAt(element4, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["object-list-view-operations collapsing ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [16, 67], [16, 83]]]], "hidden"], [], ["loc", [null, [16, 58], [16, 94]]]]]]], ["inline", "component", [["get", "headerCellComponent.componentName", ["loc", [null, [17, 22], [17, 55]]]]], ["column", ["subexpr", "hash", [], ["header", ["get", "singleColumnHeaderTitle", ["loc", [null, [18, 32], [18, 55]]]], "sortable", false], ["loc", [null, [18, 19], [18, 71]]]], "dynamicProperties", ["subexpr", "@mut", [["get", "headerCellComponent.componentProperties", ["loc", [null, [19, 30], [19, 69]]]]], [], []]], ["loc", [null, [17, 10], [20, 12]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [21, 14], [21, 28]]]]], [], 0, null, ["loc", [null, [21, 8], [23, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 14
                },
                "end": {
                  "line": 45,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", ["flexberry-dropdown"], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [39, 24], [39, 47]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [40, 24], [40, 48]]]]], [], []], "class", "compact fluid", "placeholder", "", "needChecksOnValue", false], ["loc", [null, [38, 16], [44, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 14
                },
                "end": {
                  "line": 51,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [47, 28], [47, 56]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [48, 24], [48, 45]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [49, 36], [49, 70]]]]], [], []]], ["loc", [null, [47, 16], [50, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 10
              },
              "end": {
                "line": 53,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "inline fields");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(":");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element1, 3, 3);
            morphs[2] = dom.createMorphAt(element1, 4, 4);
            return morphs;
          },
          statements: [["content", "column.header", ["loc", [null, [36, 21], [36, 38]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [37, 20], [37, 44]]]]], [], 0, null, ["loc", [null, [37, 14], [45, 21]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [46, 20], [46, 48]]]]], [], 1, null, ["loc", [null, [46, 14], [51, 21]]]]],
          locals: ["column"],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 8
              },
              "end": {
                "line": 57,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "object-list-view-menu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "object-list-view-helper-column-cell");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(element2, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [30, 59], [30, 75]]]], "hidden"], [], ["loc", [null, [30, 50], [30, 86]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [34, 18], [34, 25]]]]], [], 0, null, ["loc", [null, [34, 10], [53, 19]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [55, 14], [55, 28]]]]], [], 1, null, ["loc", [null, [55, 8], [57, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'colspan');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [62, 23], [62, 30]]]]]]], ["content", "placeholder", ["loc", [null, [62, 61], [62, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [67, 15], [67, 21]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [68, 16], [68, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 17], [69, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [70, 17], [70, 25]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [71, 23], [71, 37]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [72, 25], [72, 41]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [73, 25], [73, 41]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [74, 26], [74, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [75, 26], [75, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [76, 30], [76, 51]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [77, 27], [77, 45]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [78, 27], [78, 45]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [79, 34], [79, 59]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [80, 20], [80, 31]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [81, 17], [81, 36]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [82, 18], [82, 38]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [83, 18], [83, 38]]]], "menuInRowItemClick", ["subexpr", "action", ["menuInRowItemClick"], [], ["loc", [null, [84, 27], [84, 56]]]], "menuInRowConfigurateItems", ["subexpr", "action", ["menuInRowConfigurateItems"], [], ["loc", [null, [85, 34], [85, 70]]]]], ["loc", [null, [66, 6], [86, 8]]]]],
        locals: ["record"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [1]);
        var element7 = dom.childAt(element6, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createMorphAt(element6, 1, 1);
        morphs[3] = dom.createMorphAt(element7, 1, 1);
        morphs[4] = dom.createMorphAt(element7, 2, 2);
        morphs[5] = dom.createMorphAt(element7, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [12, 58], [12, 66]]]], "readonly"], [], ["loc", [null, [12, 53], [12, 79]]]], " ", ["get", "tableClass", ["loc", [null, [12, 82], [12, 92]]]], " table"]]], ["block", "if", [["get", "singleColumnHeaderTitle", ["loc", [null, [13, 8], [13, 31]]]]], [], 1, null, ["loc", [null, [13, 2], [26, 9]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [28, 10], [28, 21]]]]], [], 2, null, ["loc", [null, [28, 4], [59, 11]]]], ["block", "unless", [["get", "hasContent", ["loc", [null, [60, 14], [60, 24]]]]], [], 3, null, ["loc", [null, [60, 4], [64, 15]]]], ["block", "each", [["get", "contentWithKeys", ["loc", [null, [65, 12], [65, 27]]]]], ["key", "key"], 4, null, ["loc", [null, [65, 4], [87, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/new-platform-flexberry-services-lock-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/new-platform-flexberry-services-lock-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui negative button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [3, 1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element0, [5]);
        var element5 = dom.childAt(element0, [7]);
        var element6 = dom.childAt(element0, [9]);
        var morphs = new Array(17);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createMorphAt(element2, 0, 0);
        morphs[5] = dom.createElementMorph(element3);
        morphs[6] = dom.createMorphAt(element3, 0, 0);
        morphs[7] = dom.createAttrMorph(element4, 'class');
        morphs[8] = dom.createMorphAt(element4, 1, 1);
        morphs[9] = dom.createMorphAt(element4, 3, 3);
        morphs[10] = dom.createAttrMorph(element5, 'class');
        morphs[11] = dom.createMorphAt(element5, 1, 1);
        morphs[12] = dom.createMorphAt(element5, 3, 3);
        morphs[13] = dom.createAttrMorph(element6, 'class');
        morphs[14] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(element6, 3, 3);
        morphs[16] = dom.createMorphAt(element6, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.new-platform-flexberry-services-lock-edit.caption"], [], ["loc", [null, [1, 22], [1, 85]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [5, 43], [5, 55]]]]], [], []]], ["loc", [null, [5, 6], [5, 57]]]], ["element", "action", ["delete"], [], ["loc", [null, [10, 55], [10, 74]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [10, 75], [10, 117]]]], ["element", "action", ["close"], [], ["loc", [null, [11, 46], [11, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [11, 65], [11, 106]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.lockKey", ["loc", [null, [14, 25], [14, 45]]]], "error", ""], [], ["loc", [null, [14, 20], [14, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.lockKey", ["loc", [null, [16, 12], [16, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.new-platform-flexberry-services-lock-edit.lockKey-caption"], [], ["loc", [null, [17, 12], [17, 81]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [18, 15], [18, 23]]]]], [], []]], ["loc", [null, [15, 4], [19, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.lockKey", ["loc", [null, [20, 40], [20, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [20, 4], [20, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userName", ["loc", [null, [22, 25], [22, 46]]]], "error", ""], [], ["loc", [null, [22, 20], [22, 59]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.userName", ["loc", [null, [24, 12], [24, 26]]]]], [], []], "label", ["subexpr", "t", ["forms.new-platform-flexberry-services-lock-edit.userName-caption"], [], ["loc", [null, [25, 12], [25, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [26, 15], [26, 23]]]]], [], []]], ["loc", [null, [23, 4], [27, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userName", ["loc", [null, [28, 40], [28, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [28, 4], [28, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.lockDate", ["loc", [null, [30, 25], [30, 46]]]], "error", ""], [], ["loc", [null, [30, 20], [30, 59]]]]]]], ["inline", "t", ["forms.new-platform-flexberry-services-lock-edit.lockDate-caption"], [], ["loc", [null, [31, 11], [31, 83]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.lockDate", ["loc", [null, [33, 12], [33, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [34, 15], [34, 23]]]]], [], []]], ["loc", [null, [32, 4], [35, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.lockDate", ["loc", [null, [36, 40], [36, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [36, 4], [36, 83]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/new-platform-flexberry-services-lock-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/new-platform-flexberry-services-lock-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.new-platform-flexberry-services-lock-list.caption"], [], ["loc", [null, [1, 4], [1, 67]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 14], [5, 23]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "refreshButton", true, "createNewButton", false, "deleteButton", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [18, 13], [18, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [19, 13], [19, 32]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "orderable", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [22, 12], [22, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [23, 17], [23, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [24, 23], [24, 52]]]], "componentName", "LockObjectListView"], ["loc", [null, [3, 2], [26, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/sitemap-node-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/sitemap-node-content.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "render", ["sitemap-node", ["get", "child", ["loc", [null, [5, 30], [5, 35]]]]], [], ["loc", [null, [5, 6], [5, 37]]]]],
          locals: ["child"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "model.children", ["loc", [null, [4, 12], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/sitemap-node-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "model.caption", ["loc", [null, [1, 0], [1, 17]]]], ["block", "if", [["get", "model.children.length", ["loc", [null, [2, 6], [2, 27]]]]], [], 0, null, ["loc", [null, [2, 0], [8, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/sitemap-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/sitemap-node.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [3, 4], [3, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "model.link", ["loc", [null, [2, 13], [2, 23]]]]], ["class", "item", "title", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [2, 43], [2, 54]]]]], [], []], "invokeAction", ["subexpr", "action", ["hideSidebar"], [], ["loc", [null, [2, 68], [2, 90]]]]], 0, null, ["loc", [null, [2, 2], [4, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "title", ["get", "model.title", ["loc", [null, [6, 28], [6, 39]]]]], ["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [7, 4], [7, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/sitemap-node.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.link", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/sitemap", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("	");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap-node", ["get", "node", ["loc", [null, [2, 25], [2, 29]]]]], [], ["loc", [null, [2, 1], [2, 31]]]]],
        locals: ["node"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/sitemap.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "model.nodes", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('dummy/transforms/decimal', ['exports', 'ember-flexberry-data/transforms/decimal'], function (exports, _emberFlexberryDataTransformsDecimal) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsDecimal['default'];
    }
  });
});
define('dummy/transforms/ember-flexberry-dummy-gender', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/ember-flexberry-dummy-gender'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsEmberFlexberryDummyGender) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsEmberFlexberryDummyGender['default']
  });
});
define('dummy/transforms/ember-flexberry-dummy-vote-type', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/ember-flexberry-dummy-vote-type'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsEmberFlexberryDummyVoteType) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsEmberFlexberryDummyVoteType['default']
  });
});
define('dummy/transforms/file', ['exports', 'ember-flexberry-data/transforms/file'], function (exports, _emberFlexberryDataTransformsFile) {
  exports['default'] = _emberFlexberryDataTransformsFile['default'];
});
define('dummy/transforms/flexberry-enum', ['exports', 'ember-flexberry-data/transforms/flexberry-enum'], function (exports, _emberFlexberryDataTransformsFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsFlexberryEnum['default'];
    }
  });
});
define('dummy/transforms/guid', ['exports', 'ember-flexberry-data/transforms/guid'], function (exports, _emberFlexberryDataTransformsGuid) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsGuid['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access', ['exports', 'ember-flexberry-security/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-security-t-type-access'], function (exports, _emberFlexberrySecurityTransformsICSSoftSTORMNETSecurityTTypeAccess) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySecurityTransformsICSSoftSTORMNETSecurityTTypeAccess['default'];
    }
  });
});
define('dummy/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('dummy/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('dummy/validators/local/datetime', ['exports', 'ember-flexberry/validators/local/datetime'], function (exports, _emberFlexberryValidatorsLocalDatetime) {
  exports['default'] = _emberFlexberryValidatorsLocalDatetime['default'];
});
define('dummy/views/application', ['exports', 'ember'], function (exports, _ember) {

  /**
   * Overload wrapper tag name for disabling wrapper.
   *
   * The sidebar, as per Semantic-UI's documentation,
   * will need to be directly below the body element.
   */
  exports['default'] = _ember['default'].Component.extend({
    tagName: ''
  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("dummy/app")["default"].create({"name":"dummy","backendUrl":"https://flexberry-ember-security.azurewebsites.net","backendUrls":{"root":"https://flexberry-ember-security.azurewebsites.net","api":"https://flexberry-ember-security.azurewebsites.net/odata"},"log":{"enabled":false,"storeErrorMessages":true},"useUserSettingsService":true,"components":{"flexberryFile":{"uploadUrl":"https://flexberry-ember-security.azurewebsites.net/api/File","maxUploadFileSize":null,"uploadOnModelPreSave":true,"showUploadButton":true,"showModalDialogOnUploadError":true,"showModalDialogOnDownloadError":true}},"version":"0.1.0-beta.0+11804557"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map